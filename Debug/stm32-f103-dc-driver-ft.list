
stm32-f103-dc-driver-ft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008988  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008a98  08008a98  00018a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d98  08008d98  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08008d98  08008d98  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d98  08008d98  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d98  08008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08008da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000208  08008fa8  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d10  08008fa8  00021d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170b4  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d88  00000000  00000000  000372e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  0003a070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a64  00000000  00000000  0003c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d790  00000000  00000000  0003ee1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007afb8  00000000  00000000  0004c5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c8  00000000  00000000  000c75e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a80 	.word	0x08008a80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08008a80 	.word	0x08008a80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <calculate_pwm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculate_pwm( float target_speed, float current_speed )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	float error = target_speed - current_speed;
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fd07 	bl	8000a90 <__aeabi_fsub>
 8001082:	4603      	mov	r3, r0
 8001084:	61bb      	str	r3, [r7, #24]
	float Pout = _Kp * error;
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <calculate_pwm+0xa4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	69b8      	ldr	r0, [r7, #24]
 800108e:	f7ff fe09 	bl	8000ca4 <__aeabi_fmul>
 8001092:	4603      	mov	r3, r0
 8001094:	617b      	str	r3, [r7, #20]
	float derivative = (error - _pre_error) / _dt;
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <calculate_pwm+0xa8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	69b8      	ldr	r0, [r7, #24]
 800109e:	f7ff fcf7 	bl	8000a90 <__aeabi_fsub>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <calculate_pwm+0xac>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f7ff fead 	bl	8000e0c <__aeabi_fdiv>
 80010b2:	4603      	mov	r3, r0
 80010b4:	613b      	str	r3, [r7, #16]
	float Dout = _Kd * derivative;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <calculate_pwm+0xb0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6938      	ldr	r0, [r7, #16]
 80010be:	f7ff fdf1 	bl	8000ca4 <__aeabi_fmul>
 80010c2:	4603      	mov	r3, r0
 80010c4:	60fb      	str	r3, [r7, #12]
	float output = Pout + Dout;
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	6978      	ldr	r0, [r7, #20]
 80010ca:	f7ff fce3 	bl	8000a94 <__addsf3>
 80010ce:	4603      	mov	r3, r0
 80010d0:	61fb      	str	r3, [r7, #28]
    if( output > _max )
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <calculate_pwm+0xb4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	f7ff ff9f 	bl	800101c <__aeabi_fcmpgt>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <calculate_pwm+0x7c>
        output = _max;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <calculate_pwm+0xb4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e00b      	b.n	8001104 <calculate_pwm+0x94>
    else if( output < _min )
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <calculate_pwm+0xb8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	69f8      	ldr	r0, [r7, #28]
 80010f4:	f7ff ff74 	bl	8000fe0 <__aeabi_fcmplt>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <calculate_pwm+0x94>
        output = _min;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <calculate_pwm+0xb8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	61fb      	str	r3, [r7, #28]
    _pre_error = error;
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <calculate_pwm+0xa8>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
    return output;
 800110a:	69fb      	ldr	r3, [r7, #28]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000001c 	.word	0x2000001c
 8001118:	20000238 	.word	0x20000238
 800111c:	2000000c 	.word	0x2000000c
 8001120:	20000020 	.word	0x20000020
 8001124:	20000014 	.word	0x20000014
 8001128:	20000018 	.word	0x20000018

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001130:	f000 ff4e 	bl	8001fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f886 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 f9c8 	bl	80014cc <MX_GPIO_Init>
  MX_CAN_Init();
 800113c:	f000 f8c8 	bl	80012d0 <MX_CAN_Init>
  MX_TIM2_Init();
 8001140:	f000 f94e 	bl	80013e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001144:	f000 f8fa 	bl	800133c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001148:	482d      	ldr	r0, [pc, #180]	; (8001200 <main+0xd4>)
 800114a:	f002 fc8a 	bl	8003a62 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800114e:	210c      	movs	r1, #12
 8001150:	482c      	ldr	r0, [pc, #176]	; (8001204 <main+0xd8>)
 8001152:	f002 fcdd 	bl	8003b10 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2104      	movs	r1, #4
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <main+0xdc>)
 800115c:	f001 ffe2 	bl	8003124 <HAL_GPIO_WritePin>

  pHeader.DLC = 4;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <main+0xe0>)
 8001162:	2204      	movs	r2, #4
 8001164:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <main+0xe0>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <main+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  pHeader.StdId = header_id;
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <main+0xe4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a25      	ldr	r2, [pc, #148]	; (800120c <main+0xe0>)
 8001178:	6013      	str	r3, [r2, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <main+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <main+0xec>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <main+0xe8>)
 8001188:	6013      	str	r3, [r2, #0]
  sFilterConfig.FilterIdLow = 0;
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <main+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <main+0xe8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <main+0xe8>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <main+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <main+0xe8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterActivation = ENABLE;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <main+0xe8>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80011ae:	4919      	ldr	r1, [pc, #100]	; (8001214 <main+0xe8>)
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <main+0xf0>)
 80011b2:	f001 f83a 	bl	800222a <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <main+0xf0>)
 80011b8:	f001 f900 	bl	80023bc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011bc:	2102      	movs	r1, #2
 80011be:	4817      	ldr	r0, [pc, #92]	; (800121c <main+0xf0>)
 80011c0:	f001 fb2b 	bl	800281a <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011c4:	f003 fa7a 	bl	80046bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of firstTask */
  firstTaskHandle = osThreadNew(StartDefaultTask, NULL, &firstTask_attributes);
 80011c8:	4a15      	ldr	r2, [pc, #84]	; (8001220 <main+0xf4>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4815      	ldr	r0, [pc, #84]	; (8001224 <main+0xf8>)
 80011ce:	f003 fadb 	bl	8004788 <osThreadNew>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <main+0xfc>)
 80011d6:	601a      	str	r2, [r3, #0]

  /* creation of secondTask */
  secondTaskHandle = osThreadNew(StartTask02, NULL, &secondTask_attributes);
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <main+0x100>)
 80011da:	2100      	movs	r1, #0
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <main+0x104>)
 80011de:	f003 fad3 	bl	8004788 <osThreadNew>
 80011e2:	4602      	mov	r2, r0
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <main+0x108>)
 80011e6:	601a      	str	r2, [r3, #0]

  /* creation of thirdTask */
  thirdTaskHandle = osThreadNew(StartTask03, NULL, &thirdTask_attributes);
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <main+0x10c>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <main+0x110>)
 80011ee:	f003 facb 	bl	8004788 <osThreadNew>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <main+0x114>)
 80011f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011f8:	f003 fa92 	bl	8004720 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <main+0xd0>
 80011fe:	bf00      	nop
 8001200:	20001bc4 	.word	0x20001bc4
 8001204:	20001c10 	.word	0x20001c10
 8001208:	40010800 	.word	0x40010800
 800120c:	20001c6c 	.word	0x20001c6c
 8001210:	20000004 	.word	0x20000004
 8001214:	20001b54 	.word	0x20001b54
 8001218:	20000008 	.word	0x20000008
 800121c:	20001b88 	.word	0x20001b88
 8001220:	08008ae8 	.word	0x08008ae8
 8001224:	0800197d 	.word	0x0800197d
 8001228:	20001bb0 	.word	0x20001bb0
 800122c:	08008b0c 	.word	0x08008b0c
 8001230:	08001a61 	.word	0x08001a61
 8001234:	20001b7c 	.word	0x20001b7c
 8001238:	08008b30 	.word	0x08008b30
 800123c:	08001a75 	.word	0x08001a75
 8001240:	20001bb8 	.word	0x20001bb8

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b090      	sub	sp, #64	; 0x40
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2228      	movs	r2, #40	; 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f005 feff 	bl	8007056 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800126a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001282:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4618      	mov	r0, r3
 8001290:	f001 ff82 	bl	8003198 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800129a:	f000 fc57 	bl	8001b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f9ed 	bl	8003698 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012c4:	f000 fc42 	bl	8001b4c <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_CAN_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_CAN_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_CAN_Init+0x64>)
 80012dc:	2204      	movs	r2, #4
 80012de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_CAN_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_CAN_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_CAN_Init+0x64>)
 80012ee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80012f2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_CAN_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_CAN_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_CAN_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_CAN_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_CAN_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_CAN_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_CAN_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_CAN_Init+0x64>)
 8001320:	f000 fe88 	bl	8002034 <HAL_CAN_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800132a:	f000 fc0f 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20001b88 	.word	0x20001b88
 8001338:	40006400 	.word	0x40006400

0800133c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_TIM1_Init+0x9c>)
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <MX_TIM1_Init+0xa0>)
 800135c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_TIM1_Init+0x9c>)
 8001360:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_TIM1_Init+0x9c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM1_Init+0x9c>)
 800136e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001372:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM1_Init+0x9c>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_TIM1_Init+0x9c>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_TIM1_Init+0x9c>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_TIM1_Init+0x9c>)
 8001388:	f002 fb40 	bl	8003a0c <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001392:	f000 fbdb 	bl	8001b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_TIM1_Init+0x9c>)
 80013a4:	f002 fdb4 	bl	8003f10 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013ae:	f000 fbcd 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_TIM1_Init+0x9c>)
 80013c0:	f003 f926 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013ca:	f000 fbbf 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20001bc4 	.word	0x20001bc4
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001410:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <MX_TIM2_Init+0xe8>)
 800141a:	2201      	movs	r2, #1
 800141c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001426:	f640 620f 	movw	r2, #3599	; 0xe0f
 800142a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <MX_TIM2_Init+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001438:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_TIM2_Init+0xe8>)
 800143a:	f002 fae7 	bl	8003a0c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001444:	f000 fb82 	bl	8001b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	4619      	mov	r1, r3
 8001454:	481c      	ldr	r0, [pc, #112]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001456:	f002 fd5b 	bl	8003f10 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001460:	f000 fb74 	bl	8001b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001466:	f002 fb1f 	bl	8003aa8 <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001470:	f000 fb6c 	bl	8001b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4619      	mov	r1, r3
 8001482:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_TIM2_Init+0xe8>)
 8001484:	f003 f8c4 	bl	8004610 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800148e:	f000 fb5d 	bl	8001b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	2360      	movs	r3, #96	; 0x60
 8001494:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	220c      	movs	r2, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM2_Init+0xe8>)
 80014aa:	f002 fc6b 	bl	8003d84 <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014b4:	f000 fb4a 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM2_Init+0xe8>)
 80014ba:	f000 fc0b 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3738      	adds	r7, #56	; 0x38
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20001c10 	.word	0x20001c10

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <MX_GPIO_Init+0xdc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <MX_GPIO_Init+0xdc>)
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <MX_GPIO_Init+0xdc>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_GPIO_Init+0xdc>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a2a      	ldr	r2, [pc, #168]	; (80015a8 <MX_GPIO_Init+0xdc>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_GPIO_Init+0xdc>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_GPIO_Init+0xdc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <MX_GPIO_Init+0xdc>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_GPIO_Init+0xdc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2104      	movs	r1, #4
 800152c:	481f      	ldr	r0, [pc, #124]	; (80015ac <MX_GPIO_Init+0xe0>)
 800152e:	f001 fdf9 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001538:	481d      	ldr	r0, [pc, #116]	; (80015b0 <MX_GPIO_Init+0xe4>)
 800153a:	f001 fdf3 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800153e:	2304      	movs	r3, #4
 8001540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2302      	movs	r3, #2
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	4619      	mov	r1, r3
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <MX_GPIO_Init+0xe0>)
 8001556:	f001 fc8b 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800155a:	2302      	movs	r3, #2
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_GPIO_Init+0xe8>)
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	4810      	ldr	r0, [pc, #64]	; (80015b0 <MX_GPIO_Init+0xe4>)
 800156e:	f001 fc7f 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <MX_GPIO_Init+0xe4>)
 800158c:	f001 fc70 	bl	8002e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2007      	movs	r0, #7
 8001596:	f001 fc40 	bl	8002e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800159a:	2007      	movs	r0, #7
 800159c:	f001 fc59 	bl	8002e52 <HAL_NVIC_EnableIRQ>

}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	10110000 	.word	0x10110000

080015b8 <rotate_ccw>:

/* USER CODE BEGIN 4 */
void rotate_ccw(uint8_t r_speed) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	482b      	ldr	r0, [pc, #172]	; (8001678 <rotate_ccw+0xc0>)
 80015ca:	f001 fdab 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4828      	ldr	r0, [pc, #160]	; (8001678 <rotate_ccw+0xc0>)
 80015d6:	f001 fda5 	bl	8003124 <HAL_GPIO_WritePin>
	can_tx_side = 1;
 80015da:	4b28      	ldr	r3, [pc, #160]	; (800167c <rotate_ccw+0xc4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm((float)(r_speed), (float)encoder_speed);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb06 	bl	8000bf4 <__aeabi_ui2f>
 80015e8:	4604      	mov	r4, r0
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <rotate_ccw+0xc8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb00 	bl	8000bf4 <__aeabi_ui2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fd39 	bl	8001070 <calculate_pwm>
 80015fe:	60f8      	str	r0, [r7, #12]
	u_pwm += inc;
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <rotate_ccw+0xcc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa44 	bl	8000a94 <__addsf3>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <rotate_ccw+0xcc>)
 8001612:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <rotate_ccw+0xcc>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <rotate_ccw+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f7ff fcfc 	bl	800101c <__aeabi_fcmpgt>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <rotate_ccw+0x7c>
		u_pwm = _Max;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <rotate_ccw+0xd0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <rotate_ccw+0xcc>)
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00e      	b.n	8001652 <rotate_ccw+0x9a>
	else if( u_pwm < _Min )
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <rotate_ccw+0xcc>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <rotate_ccw+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f7ff fcce 	bl	8000fe0 <__aeabi_fcmplt>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <rotate_ccw+0x9a>
		u_pwm = _Min;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <rotate_ccw+0xd4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <rotate_ccw+0xcc>)
 8001650:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <rotate_ccw+0xcc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fcea 	bl	8001030 <__aeabi_f2uiz>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <rotate_ccw+0xd8>)
 8001662:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <rotate_ccw+0xd8>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	40010c00 	.word	0x40010c00
 800167c:	20001bb5 	.word	0x20001bb5
 8001680:	20001c85 	.word	0x20001c85
 8001684:	2000023c 	.word	0x2000023c
 8001688:	20000010 	.word	0x20000010
 800168c:	20000234 	.word	0x20000234
 8001690:	20000230 	.word	0x20000230

08001694 <rotate_cw>:

void rotate_cw(uint8_t l_speed) {
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a4:	482e      	ldr	r0, [pc, #184]	; (8001760 <rotate_cw+0xcc>)
 80016a6:	f001 fd3d 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	482b      	ldr	r0, [pc, #172]	; (8001760 <rotate_cw+0xcc>)
 80016b2:	f001 fd37 	bl	8003124 <HAL_GPIO_WritePin>
	can_tx_side = 2;
 80016b6:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <rotate_cw+0xd0>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm((float)(l_speed), (float)encoder_speed);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fa98 	bl	8000bf4 <__aeabi_ui2f>
 80016c4:	4604      	mov	r4, r0
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <rotate_cw+0xd4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fa92 	bl	8000bf4 <__aeabi_ui2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4619      	mov	r1, r3
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff fccb 	bl	8001070 <calculate_pwm>
 80016da:	60f8      	str	r0, [r7, #12]
	u_pwm += inc;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <rotate_cw+0xd8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f9d6 	bl	8000a94 <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <rotate_cw+0xd8>)
 80016ee:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <rotate_cw+0xd8>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <rotate_cw+0xdc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7ff fc8e 	bl	800101c <__aeabi_fcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <rotate_cw+0x7c>
		u_pwm = _Max;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <rotate_cw+0xdc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <rotate_cw+0xd8>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e00e      	b.n	800172e <rotate_cw+0x9a>
	else if( u_pwm < _Min )
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <rotate_cw+0xd8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <rotate_cw+0xe0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f7ff fc60 	bl	8000fe0 <__aeabi_fcmplt>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <rotate_cw+0x9a>
		u_pwm = _Min;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <rotate_cw+0xe0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <rotate_cw+0xd8>)
 800172c:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <rotate_cw+0xd8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc7c 	bl	8001030 <__aeabi_f2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <rotate_cw+0xe4>)
 800173e:	801a      	strh	r2, [r3, #0]
	pwm = TIM2->CCR4;
 8001740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <rotate_cw+0xe8>)
 800174a:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <rotate_cw+0xe4>)
 800174e:	881a      	ldrh	r2, [r3, #0]
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	bf00      	nop
 8001760:	40010c00 	.word	0x40010c00
 8001764:	20001bb5 	.word	0x20001bb5
 8001768:	20001c85 	.word	0x20001c85
 800176c:	2000023c 	.word	0x2000023c
 8001770:	20000010 	.word	0x20000010
 8001774:	20000234 	.word	0x20000234
 8001778:	20000230 	.word	0x20000230
 800177c:	20001c0c 	.word	0x20001c0c

08001780 <reduce_speed_ccw>:

void reduce_speed_ccw() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178c:	482c      	ldr	r0, [pc, #176]	; (8001840 <reduce_speed_ccw+0xc0>)
 800178e:	f001 fcc9 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4829      	ldr	r0, [pc, #164]	; (8001840 <reduce_speed_ccw+0xc0>)
 800179a:	f001 fcc3 	bl	8003124 <HAL_GPIO_WritePin>
	can_tx_side = 1;
 800179e:	4b29      	ldr	r3, [pc, #164]	; (8001844 <reduce_speed_ccw+0xc4>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm(0, (float)encoder_speed);
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <reduce_speed_ccw+0xc8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa23 	bl	8000bf4 <__aeabi_ui2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f7ff fc5b 	bl	8001070 <calculate_pwm>
 80017ba:	6078      	str	r0, [r7, #4]
	u_pwm += inc;
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <reduce_speed_ccw+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f966 	bl	8000a94 <__addsf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <reduce_speed_ccw+0xcc>)
 80017ce:	601a      	str	r2, [r3, #0]
	//TIM2->CCR4 -= 1;
	pwm = TIM2->CCR4;
 80017d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <reduce_speed_ccw+0xd0>)
 80017da:	801a      	strh	r2, [r3, #0]
	if( u_pwm > _Max )
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <reduce_speed_ccw+0xcc>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <reduce_speed_ccw+0xd4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f7ff fc18 	bl	800101c <__aeabi_fcmpgt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <reduce_speed_ccw+0x7c>
		u_pwm = _Max;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <reduce_speed_ccw+0xd4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <reduce_speed_ccw+0xcc>)
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00e      	b.n	800181a <reduce_speed_ccw+0x9a>
	else if( u_pwm < _Min )
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <reduce_speed_ccw+0xcc>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <reduce_speed_ccw+0xd8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4610      	mov	r0, r2
 8001808:	f7ff fbea 	bl	8000fe0 <__aeabi_fcmplt>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <reduce_speed_ccw+0x9a>
		u_pwm = _Min;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <reduce_speed_ccw+0xd8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <reduce_speed_ccw+0xcc>)
 8001818:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <reduce_speed_ccw+0xcc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc06 	bl	8001030 <__aeabi_f2uiz>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <reduce_speed_ccw+0xdc>)
 800182a:	801a      	strh	r2, [r3, #0]
	//for (int i = 0; i<50000; ++i) {__NOP();}
	//HAL_Delay(10);
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <reduce_speed_ccw+0xdc>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010c00 	.word	0x40010c00
 8001844:	20001bb5 	.word	0x20001bb5
 8001848:	20001c85 	.word	0x20001c85
 800184c:	2000023c 	.word	0x2000023c
 8001850:	20001c0c 	.word	0x20001c0c
 8001854:	20000010 	.word	0x20000010
 8001858:	20000234 	.word	0x20000234
 800185c:	20000230 	.word	0x20000230

08001860 <reduce_speed_cw>:

void reduce_speed_cw() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186c:	482c      	ldr	r0, [pc, #176]	; (8001920 <reduce_speed_cw+0xc0>)
 800186e:	f001 fc59 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001878:	4829      	ldr	r0, [pc, #164]	; (8001920 <reduce_speed_cw+0xc0>)
 800187a:	f001 fc53 	bl	8003124 <HAL_GPIO_WritePin>
	can_tx_side = 2;
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <reduce_speed_cw+0xc4>)
 8001880:	2202      	movs	r2, #2
 8001882:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm(0, (float)encoder_speed);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <reduce_speed_cw+0xc8>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9b3 	bl	8000bf4 <__aeabi_ui2f>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f7ff fbeb 	bl	8001070 <calculate_pwm>
 800189a:	6078      	str	r0, [r7, #4]
	u_pwm += inc;
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <reduce_speed_cw+0xcc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f8f6 	bl	8000a94 <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <reduce_speed_cw+0xcc>)
 80018ae:	601a      	str	r2, [r3, #0]
	//TIM2->CCR4 -= 1;
	pwm = TIM2->CCR4;
 80018b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <reduce_speed_cw+0xd0>)
 80018ba:	801a      	strh	r2, [r3, #0]
	if( u_pwm > _Max )
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <reduce_speed_cw+0xcc>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <reduce_speed_cw+0xd4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f7ff fba8 	bl	800101c <__aeabi_fcmpgt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <reduce_speed_cw+0x7c>
		u_pwm = _Max;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <reduce_speed_cw+0xd4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a15      	ldr	r2, [pc, #84]	; (800192c <reduce_speed_cw+0xcc>)
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00e      	b.n	80018fa <reduce_speed_cw+0x9a>
	else if( u_pwm < _Min )
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <reduce_speed_cw+0xcc>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <reduce_speed_cw+0xd8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fb7a 	bl	8000fe0 <__aeabi_fcmplt>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <reduce_speed_cw+0x9a>
		u_pwm = _Min;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <reduce_speed_cw+0xd8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <reduce_speed_cw+0xcc>)
 80018f8:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <reduce_speed_cw+0xcc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fb96 	bl	8001030 <__aeabi_f2uiz>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <reduce_speed_cw+0xdc>)
 800190a:	801a      	strh	r2, [r3, #0]
	//for (int i = 0; i<50000; ++i) {__NOP();}
	//HAL_Delay(10);
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <reduce_speed_cw+0xdc>)
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010c00 	.word	0x40010c00
 8001924:	20001bb5 	.word	0x20001bb5
 8001928:	20001c85 	.word	0x20001c85
 800192c:	2000023c 	.word	0x2000023c
 8001930:	20001c0c 	.word	0x20001c0c
 8001934:	20000010 	.word	0x20000010
 8001938:	20000234 	.word	0x20000234
 800193c:	20000230 	.word	0x20000230

08001940 <stop_movement>:

void stop_movement(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <stop_movement+0x30>)
 800194c:	f001 fbea 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <stop_movement+0x30>)
 8001958:	f001 fbe4 	bl	8003124 <HAL_GPIO_WritePin>
	TIM2->CCR4 = 200;
 800195c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001960:	22c8      	movs	r2, #200	; 0xc8
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
	u_pwm = 200;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <stop_movement+0x34>)
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <stop_movement+0x38>)
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40010c00 	.word	0x40010c00
 8001974:	2000023c 	.word	0x2000023c
 8001978:	43480000 	.word	0x43480000

0800197c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if ((can_rx_side == 1)&&(status == State_CCW)) {
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <StartDefaultTask+0xd0>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10f      	bne.n	80019ac <StartDefaultTask+0x30>
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <StartDefaultTask+0xd4>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d10b      	bne.n	80019ac <StartDefaultTask+0x30>
		rotate_ccw(can_rx_speed);
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <StartDefaultTask+0xd8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe0d 	bl	80015b8 <rotate_ccw>
		status = State_CCW;
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <StartDefaultTask+0xd4>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]
		current_st = 1;
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <StartDefaultTask+0xdc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e04a      	b.n	8001a42 <StartDefaultTask+0xc6>
	}
	else if ((can_rx_side == 0)&&(status == State_CCW)) {
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <StartDefaultTask+0xd0>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d112      	bne.n	80019da <StartDefaultTask+0x5e>
 80019b4:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <StartDefaultTask+0xd4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d10e      	bne.n	80019da <StartDefaultTask+0x5e>
		current_st = 2;
 80019bc:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <StartDefaultTask+0xdc>)
 80019be:	2202      	movs	r2, #2
 80019c0:	701a      	strb	r2, [r3, #0]
		//while (encoder_speed != 0) {
			//while (TIM2->CCR4 > 50) {
			reduce_speed_ccw();
 80019c2:	f7ff fedd 	bl	8001780 <reduce_speed_ccw>
		//}
		if (encoder_speed <= 5) {
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <StartDefaultTask+0xe0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d839      	bhi.n	8001a42 <StartDefaultTask+0xc6>
			stop_movement();
 80019ce:	f7ff ffb7 	bl	8001940 <stop_movement>
			status = State_CW;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <StartDefaultTask+0xd4>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		if (encoder_speed <= 5) {
 80019d8:	e033      	b.n	8001a42 <StartDefaultTask+0xc6>
		}
	}
	else if ((can_rx_side == 0)&&(status == State_CW)) {
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <StartDefaultTask+0xd0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <StartDefaultTask+0x86>
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <StartDefaultTask+0xd4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10b      	bne.n	8001a02 <StartDefaultTask+0x86>
		rotate_cw(can_rx_speed);
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <StartDefaultTask+0xd8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe50 	bl	8001694 <rotate_cw>
		current_st = 3;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <StartDefaultTask+0xdc>)
 80019f6:	2203      	movs	r2, #3
 80019f8:	701a      	strb	r2, [r3, #0]
		status = State_CW;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <StartDefaultTask+0xd4>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e01f      	b.n	8001a42 <StartDefaultTask+0xc6>
	}
	else if ((can_rx_side == 1)&&(status == State_CW)) {
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <StartDefaultTask+0xd0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d112      	bne.n	8001a30 <StartDefaultTask+0xb4>
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <StartDefaultTask+0xd4>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10e      	bne.n	8001a30 <StartDefaultTask+0xb4>
		current_st = 4;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <StartDefaultTask+0xdc>)
 8001a14:	2204      	movs	r2, #4
 8001a16:	701a      	strb	r2, [r3, #0]
		//while (encoder_speed != 0) {
		//while (TIM2->CCR4 > 50) {
			reduce_speed_cw();
 8001a18:	f7ff ff22 	bl	8001860 <reduce_speed_cw>
		//}
		if (encoder_speed <= 5) {
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <StartDefaultTask+0xe0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d80e      	bhi.n	8001a42 <StartDefaultTask+0xc6>
			stop_movement();
 8001a24:	f7ff ff8c 	bl	8001940 <stop_movement>
			status = State_CCW;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <StartDefaultTask+0xd4>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
		if (encoder_speed <= 5) {
 8001a2e:	e008      	b.n	8001a42 <StartDefaultTask+0xc6>
		}
	}
	else if (can_rx_speed == 0) {
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <StartDefaultTask+0xd8>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <StartDefaultTask+0xc6>
		current_st = 5;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <StartDefaultTask+0xdc>)
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	701a      	strb	r2, [r3, #0]
		stop_movement();
 8001a3e:	f7ff ff7f 	bl	8001940 <stop_movement>
	}
//	  rotate_ccw(60);
    osDelay(20);
 8001a42:	2014      	movs	r0, #20
 8001a44:	f002 ff4a 	bl	80048dc <osDelay>
    if ((can_rx_side == 1)&&(status == State_CCW)) {
 8001a48:	e79c      	b.n	8001984 <StartDefaultTask+0x8>
 8001a4a:	bf00      	nop
 8001a4c:	20001bb4 	.word	0x20001bb4
 8001a50:	20000024 	.word	0x20000024
 8001a54:	20001c84 	.word	0x20001c84
 8001a58:	20000232 	.word	0x20000232
 8001a5c:	20001c85 	.word	0x20001c85

08001a60 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(5000);
 8001a68:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a6c:	f002 ff36 	bl	80048dc <osDelay>
 8001a70:	e7fa      	b.n	8001a68 <StartTask02+0x8>
	...

08001a74 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	driver_tx_data[0] = encoder_speed;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <StartTask03+0x2c>)
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <StartTask03+0x30>)
 8001a82:	701a      	strb	r2, [r3, #0]
	driver_tx_data[1] = can_tx_side;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <StartTask03+0x34>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <StartTask03+0x30>)
 8001a8a:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_tx_data, &TxMailbox);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <StartTask03+0x38>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <StartTask03+0x30>)
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <StartTask03+0x3c>)
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <StartTask03+0x40>)
 8001a94:	f000 fcd6 	bl	8002444 <HAL_CAN_AddTxMessage>
    osDelay(20);
 8001a98:	2014      	movs	r0, #20
 8001a9a:	f002 ff1f 	bl	80048dc <osDelay>
	driver_tx_data[0] = encoder_speed;
 8001a9e:	e7ed      	b.n	8001a7c <StartTask03+0x8>
 8001aa0:	20001c85 	.word	0x20001c85
 8001aa4:	20000224 	.word	0x20000224
 8001aa8:	20001bb5 	.word	0x20001bb5
 8001aac:	20001c04 	.word	0x20001c04
 8001ab0:	20001c6c 	.word	0x20001c6c
 8001ab4:	20001b88 	.word	0x20001b88

08001ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d106      	bne.n	8001ad8 <HAL_TIM_PeriodElapsedCallback+0x20>
	sys_tick++;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ad2:	6013      	str	r3, [r2, #0]
    HAL_IncTick();
 8001ad4:	f000 fa92 	bl	8001ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d121      	bne.n	8001b26 <HAL_TIM_PeriodElapsedCallback+0x6e>
	encoder_speed = (uint8_t)(encoder_tick*(float)300/encoder_ratio);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f887 	bl	8000bfc <__aeabi_i2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4913      	ldr	r1, [pc, #76]	; (8001b40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8d6 	bl	8000ca4 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461c      	mov	r4, r3
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f877 	bl	8000bf4 <__aeabi_ui2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff f97e 	bl	8000e0c <__aeabi_fdiv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa8c 	bl	8001030 <__aeabi_f2uiz>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	encoder_tick = 0;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000800 	.word	0x40000800
 8001b34:	20001c08 	.word	0x20001c08
 8001b38:	40012c00 	.word	0x40012c00
 8001b3c:	20001bbc 	.word	0x20001bbc
 8001b40:	43960000 	.word	0x43960000
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20001c85 	.word	0x20001c85

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6193      	str	r3, [r2, #24]
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_MspInit+0x60>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_MspInit+0x60>)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000

08001bbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <HAL_CAN_MspInit+0x9c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d139      	bne.n	8001c50 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be6:	61d3      	str	r3, [r2, #28]
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_CAN_MspInit+0xa0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480f      	ldr	r0, [pc, #60]	; (8001c60 <HAL_CAN_MspInit+0xa4>)
 8001c22:	f001 f925 	bl	8002e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <HAL_CAN_MspInit+0xa4>)
 8001c3c:	f001 f918 	bl	8002e70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2014      	movs	r0, #20
 8001c46:	f001 f8e8 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c4a:	2014      	movs	r0, #20
 8001c4c:	f001 f901 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40006400 	.word	0x40006400
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010800 	.word	0x40010800

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_TIM_Base_MspInit+0x68>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d114      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2019      	movs	r0, #25
 8001c94:	f001 f8c1 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c98:	2019      	movs	r0, #25
 8001c9a:	f001 f8da 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c9e:	e010      	b.n	8001cc2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	61d3      	str	r3, [r2, #28]
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d117      	bne.n	8001d24 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_TIM_MspPostInit+0x58>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_TIM_MspPostInit+0x58>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_TIM_MspPostInit+0x58>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <HAL_TIM_MspPostInit+0x5c>)
 8001d20:	f001 f8a6 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010800 	.word	0x40010800

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	201e      	movs	r0, #30
 8001d4a:	f001 f866 	bl	8002e1a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d4e:	201e      	movs	r0, #30
 8001d50:	f001 f87f 	bl	8002e52 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_InitTick+0xa0>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_InitTick+0xa0>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	61d3      	str	r3, [r2, #28]
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_InitTick+0xa0>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d6c:	f107 0210 	add.w	r2, r7, #16
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fdfa 	bl	8003970 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d7c:	f001 fde4 	bl	8003948 <HAL_RCC_GetPCLK1Freq>
 8001d80:	4603      	mov	r3, r0
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_InitTick+0xa4>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	3b01      	subs	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_InitTick+0xa8>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <HAL_InitTick+0xac>)
 8001d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_InitTick+0xa8>)
 8001d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_InitTick+0xa8>)
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_InitTick+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_InitTick+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <HAL_InitTick+0xa8>)
 8001db6:	f001 fe29 	bl	8003a0c <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_InitTick+0xa8>)
 8001dc2:	f001 fe4e 	bl	8003a62 <HAL_TIM_Base_Start_IT>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3730      	adds	r7, #48	; 0x30
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	431bde83 	.word	0x431bde83
 8001ddc:	20001c88 	.word	0x20001c88
 8001de0:	40000800 	.word	0x40000800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <HardFault_Handler+0x4>

08001df6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <MemManage_Handler+0x4>

08001dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <BusFault_Handler+0x4>

08001e02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <UsageFault_Handler+0x4>

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f001 f99b 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  encoder_tick++;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <EXTI1_IRQHandler+0x2c>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <EXTI1_IRQHandler+0x2c>)
 8001e2a:	801a      	strh	r2, [r3, #0]
  f++;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <EXTI1_IRQHandler+0x30>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <EXTI1_IRQHandler+0x30>)
 8001e38:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20001bbc 	.word	0x20001bbc
 8001e44:	20001b84 	.word	0x20001b84

08001e48 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, can_rx_control_data);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 8001e50:	2100      	movs	r1, #0
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 8001e54:	f000 fbd0 	bl	80025f8 <HAL_CAN_GetRxMessage>
  can_rx_side = can_rx_control_data[0];
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <USB_LP_CAN1_RX0_IRQHandler+0x38>)
 8001e5e:	701a      	strb	r2, [r3, #0]
  can_rx_speed = can_rx_control_data[1];
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 8001e62:	785a      	ldrb	r2, [r3, #1]
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 8001e66:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 8001e6a:	f000 fcfb 	bl	8002864 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000228 	.word	0x20000228
 8001e78:	20001c50 	.word	0x20001c50
 8001e7c:	20001b88 	.word	0x20001b88
 8001e80:	20001bb4 	.word	0x20001bb4
 8001e84:	20001c84 	.word	0x20001c84

08001e88 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM1_UP_IRQHandler+0x10>)
 8001e8e:	f001 fe71 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001bc4 	.word	0x20001bc4

08001e9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM4_IRQHandler+0x10>)
 8001ea2:	f001 fe67 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001c88 	.word	0x20001c88

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f005 f884 	bl	8006fec <__errno>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20005000 	.word	0x20005000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	20000240 	.word	0x20000240
 8001f18:	20001d10 	.word	0x20001d10

08001f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <SystemInit+0x5c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <SystemInit+0x5c>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SystemInit+0x5c>)
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4911      	ldr	r1, [pc, #68]	; (8001f78 <SystemInit+0x5c>)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SystemInit+0x60>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <SystemInit+0x5c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <SystemInit+0x5c>)
 8001f3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <SystemInit+0x5c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SystemInit+0x5c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <SystemInit+0x5c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <SystemInit+0x5c>)
 8001f5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SystemInit+0x5c>)
 8001f62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SystemInit+0x64>)
 8001f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	f8ff0000 	.word	0xf8ff0000
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
  ldr r2, =_sbss
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fa0:	f842 3b04 	str.w	r3, [r2], #4

08001fa4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff ffb7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f005 f823 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7ff f8bb 	bl	800112c <main>
  bx lr
 8001fb6:	4770      	bx	lr
  ldr r3, =_sidata
 8001fb8:	08008da0 	.word	0x08008da0
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fc0:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8001fc4:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8001fc8:	20001d10 	.word	0x20001d10

08001fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fcc:	e7fe      	b.n	8001fcc <ADC1_2_IRQHandler>
	...

08001fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x28>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x28>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 ff0f 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fea4 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fdb4 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x1c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x20>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000030 	.word	0x20000030
 800201c:	20001cc8 	.word	0x20001cc8

08002020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_GetTick+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20001cc8 	.word	0x20001cc8

08002034 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0ed      	b.n	8002222 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fdb2 	bl	8001bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0202 	bic.w	r2, r2, #2
 8002066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002068:	f7ff ffda 	bl	8002020 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800206e:	e012      	b.n	8002096 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002070:	f7ff ffd6 	bl	8002020 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d90b      	bls.n	8002096 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2205      	movs	r2, #5
 800208e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0c5      	b.n	8002222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e5      	bne.n	8002070 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b4:	f7ff ffb4 	bl	8002020 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ba:	e012      	b.n	80020e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020bc:	f7ff ffb0 	bl	8002020 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b0a      	cmp	r3, #10
 80020c8:	d90b      	bls.n	80020e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2205      	movs	r2, #5
 80020da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e09f      	b.n	8002222 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0e5      	beq.n	80020bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e1b      	ldrb	r3, [r3, #24]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d108      	bne.n	800210a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e007      	b.n	800211a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7e5b      	ldrb	r3, [r3, #25]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d108      	bne.n	8002134 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e007      	b.n	8002144 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7e9b      	ldrb	r3, [r3, #26]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d108      	bne.n	800215e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e007      	b.n	800216e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0220 	bic.w	r2, r2, #32
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7edb      	ldrb	r3, [r3, #27]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0210 	bic.w	r2, r2, #16
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e007      	b.n	8002198 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0210 	orr.w	r2, r2, #16
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7f1b      	ldrb	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0208 	orr.w	r2, r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0208 	bic.w	r2, r2, #8
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7f5b      	ldrb	r3, [r3, #29]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0204 	orr.w	r2, r2, #4
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e007      	b.n	80021ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	ea42 0103 	orr.w	r1, r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800222a:	b480      	push	{r7}
 800222c:	b087      	sub	sp, #28
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002240:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d003      	beq.n	8002250 <HAL_CAN_ConfigFilter+0x26>
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b02      	cmp	r3, #2
 800224c:	f040 80aa 	bne.w	80023a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d123      	bne.n	80022d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	401a      	ands	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3248      	adds	r2, #72	; 0x48
 80022b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c8:	6979      	ldr	r1, [r7, #20]
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d122      	bne.n	8002320 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3248      	adds	r2, #72	; 0x48
 8002300:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002314:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002316:	6979      	ldr	r1, [r7, #20]
 8002318:	3348      	adds	r3, #72	; 0x48
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800233a:	e007      	b.n	800234c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002366:	e007      	b.n	8002378 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002396:	f023 0201 	bic.w	r2, r3, #1
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e006      	b.n	80023b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d12e      	bne.n	800242e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023e8:	f7ff fe1a 	bl	8002020 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023ee:	e012      	b.n	8002416 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023f0:	f7ff fe16 	bl	8002020 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b0a      	cmp	r3, #10
 80023fc:	d90b      	bls.n	8002416 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2205      	movs	r2, #5
 800240e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e012      	b.n	800243c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e5      	bne.n	80023f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e006      	b.n	800243c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002462:	7ffb      	ldrb	r3, [r7, #31]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d003      	beq.n	8002470 <HAL_CAN_AddTxMessage+0x2c>
 8002468:	7ffb      	ldrb	r3, [r7, #31]
 800246a:	2b02      	cmp	r3, #2
 800246c:	f040 80b8 	bne.w	80025e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a0 	beq.w	80025d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	0e1b      	lsrs	r3, r3, #24
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d907      	bls.n	80024b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e09e      	b.n	80025ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024b0:	2201      	movs	r2, #1
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	409a      	lsls	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	6809      	ldr	r1, [r1, #0]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3318      	adds	r3, #24
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	440b      	add	r3, r1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e00f      	b.n	80024fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3318      	adds	r3, #24
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6819      	ldr	r1, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3318      	adds	r3, #24
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	440b      	add	r3, r1
 800250e:	3304      	adds	r3, #4
 8002510:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	7d1b      	ldrb	r3, [r3, #20]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d111      	bne.n	800253e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3318      	adds	r3, #24
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6811      	ldr	r1, [r2, #0]
 800252e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3318      	adds	r3, #24
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	440b      	add	r3, r1
 800253a:	3304      	adds	r3, #4
 800253c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3307      	adds	r3, #7
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	061a      	lsls	r2, r3, #24
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3306      	adds	r3, #6
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3305      	adds	r3, #5
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	4313      	orrs	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	3204      	adds	r2, #4
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	4610      	mov	r0, r2
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	6811      	ldr	r1, [r2, #0]
 8002566:	ea43 0200 	orr.w	r2, r3, r0
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	440b      	add	r3, r1
 8002570:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002574:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3303      	adds	r3, #3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	061a      	lsls	r2, r3, #24
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3302      	adds	r3, #2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3301      	adds	r3, #1
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4313      	orrs	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4610      	mov	r0, r2
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	6811      	ldr	r1, [r2, #0]
 800259c:	ea43 0200 	orr.w	r2, r3, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3318      	adds	r3, #24
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	4413      	add	r3, r2
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6811      	ldr	r1, [r2, #0]
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3318      	adds	r3, #24
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	440b      	add	r3, r1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e00e      	b.n	80025ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e006      	b.n	80025ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d003      	beq.n	800261c <HAL_CAN_GetRxMessage+0x24>
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b02      	cmp	r3, #2
 8002618:	f040 80f3 	bne.w	8002802 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10e      	bne.n	8002640 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0e7      	b.n	8002810 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0d8      	b.n	8002810 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	331b      	adds	r3, #27
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0204 	and.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	331b      	adds	r3, #27
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0d5b      	lsrs	r3, r3, #21
 800268c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e00b      	b.n	80026ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	331b      	adds	r3, #27
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	331b      	adds	r3, #27
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0202 	and.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	331b      	adds	r3, #27
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	3304      	adds	r3, #4
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	331b      	adds	r3, #27
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	331b      	adds	r3, #27
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0c1b      	lsrs	r3, r3, #16
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	4413      	add	r3, r2
 8002716:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4413      	add	r3, r2
 800272c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0a1a      	lsrs	r2, r3, #8
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0c1a      	lsrs	r2, r3, #16
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3302      	adds	r3, #2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e1a      	lsrs	r2, r3, #24
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3303      	adds	r3, #3
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	3304      	adds	r3, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0a1a      	lsrs	r2, r3, #8
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3305      	adds	r3, #5
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0c1a      	lsrs	r2, r3, #16
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3306      	adds	r3, #6
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e1a      	lsrs	r2, r3, #24
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3307      	adds	r3, #7
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0220 	orr.w	r2, r2, #32
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	e007      	b.n	80027fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e006      	b.n	8002810 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d002      	beq.n	8002838 <HAL_CAN_ActivateNotification+0x1e>
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d109      	bne.n	800284c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6959      	ldr	r1, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e006      	b.n	800285a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07c      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d023      	beq.n	80028fc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f97d 	bl	8002bc6 <HAL_CAN_TxMailbox0CompleteCallback>
 80028cc:	e016      	b.n	80028fc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e00c      	b.n	80028fc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e002      	b.n	80028fc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f980 	bl	8002bfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f95c 	bl	8002bd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002920:	e016      	b.n	8002950 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e00c      	b.n	8002950 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	e002      	b.n	8002950 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f95f 	bl	8002c0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002962:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f93b 	bl	8002bea <HAL_CAN_TxMailbox2CompleteCallback>
 8002974:	e016      	b.n	80029a4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	e00c      	b.n	80029a4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e002      	b.n	80029a4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f93e 	bl	8002c20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2210      	movs	r2, #16
 80029c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2208      	movs	r2, #8
 80029e2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f92d 	bl	8002c44 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f915 	bl	8002c32 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f90d 	bl	8002c68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8f5 	bl	8002c56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8f6 	bl	8002c7a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8ee 	bl	8002c8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d075      	beq.n	8002ba6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d06c      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03d      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d038      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b32:	2b30      	cmp	r3, #48	; 0x30
 8002b34:	d017      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x302>
 8002b36:	2b30      	cmp	r3, #48	; 0x30
 8002b38:	d804      	bhi.n	8002b44 <HAL_CAN_IRQHandler+0x2e0>
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d009      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x2ee>
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d00c      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b42:	e024      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002b44:	2b50      	cmp	r3, #80	; 0x50
 8002b46:	d018      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x316>
 8002b48:	2b60      	cmp	r3, #96	; 0x60
 8002b4a:	d01b      	beq.n	8002b84 <HAL_CAN_IRQHandler+0x320>
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d00f      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002b50:	e01d      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b5a:	e018      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b64:	e013      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b6e:	e00e      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b78:	e009      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b82:	e004      	b.n	8002b8e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f870 	bl	8002c9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3728      	adds	r7, #40	; 0x28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4906      	ldr	r1, [pc, #24]	; (8002d48 <__NVIC_EnableIRQ+0x34>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff4f 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff64 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ffb2 	bl	8002da0 <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff81 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff57 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e82:	e127      	b.n	80030d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e84:	2201      	movs	r2, #1
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8116 	bne.w	80030ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d034      	beq.n	8002f14 <HAL_GPIO_Init+0xa4>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d80d      	bhi.n	8002eca <HAL_GPIO_Init+0x5a>
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d02b      	beq.n	8002f0a <HAL_GPIO_Init+0x9a>
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d804      	bhi.n	8002ec0 <HAL_GPIO_Init+0x50>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d031      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ebe:	e048      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d043      	beq.n	8002f4c <HAL_GPIO_Init+0xdc>
 8002ec4:	2b11      	cmp	r3, #17
 8002ec6:	d01b      	beq.n	8002f00 <HAL_GPIO_Init+0x90>
          break;
 8002ec8:	e043      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002eca:	4a89      	ldr	r2, [pc, #548]	; (80030f0 <HAL_GPIO_Init+0x280>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d026      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
 8002ed0:	4a87      	ldr	r2, [pc, #540]	; (80030f0 <HAL_GPIO_Init+0x280>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d806      	bhi.n	8002ee4 <HAL_GPIO_Init+0x74>
 8002ed6:	4a87      	ldr	r2, [pc, #540]	; (80030f4 <HAL_GPIO_Init+0x284>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d020      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
 8002edc:	4a86      	ldr	r2, [pc, #536]	; (80030f8 <HAL_GPIO_Init+0x288>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01d      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
          break;
 8002ee2:	e036      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ee4:	4a85      	ldr	r2, [pc, #532]	; (80030fc <HAL_GPIO_Init+0x28c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d019      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
 8002eea:	4a85      	ldr	r2, [pc, #532]	; (8003100 <HAL_GPIO_Init+0x290>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d016      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
 8002ef0:	4a84      	ldr	r2, [pc, #528]	; (8003104 <HAL_GPIO_Init+0x294>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0xae>
          break;
 8002ef6:	e02c      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	623b      	str	r3, [r7, #32]
          break;
 8002efe:	e028      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	3304      	adds	r3, #4
 8002f06:	623b      	str	r3, [r7, #32]
          break;
 8002f08:	e023      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e01e      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	623b      	str	r3, [r7, #32]
          break;
 8002f1c:	e019      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f26:	2304      	movs	r3, #4
 8002f28:	623b      	str	r3, [r7, #32]
          break;
 8002f2a:	e012      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f34:	2308      	movs	r3, #8
 8002f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	611a      	str	r2, [r3, #16]
          break;
 8002f3e:	e008      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f40:	2308      	movs	r3, #8
 8002f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	615a      	str	r2, [r3, #20]
          break;
 8002f4a:	e002      	b.n	8002f52 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d801      	bhi.n	8002f5c <HAL_GPIO_Init+0xec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	e001      	b.n	8002f60 <HAL_GPIO_Init+0xf0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	2bff      	cmp	r3, #255	; 0xff
 8002f66:	d802      	bhi.n	8002f6e <HAL_GPIO_Init+0xfe>
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_Init+0x104>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	3b08      	subs	r3, #8
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	401a      	ands	r2, r3
 8002f86:	6a39      	ldr	r1, [r7, #32]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8096 	beq.w	80030ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa2:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_GPIO_Init+0x298>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_GPIO_Init+0x298>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6193      	str	r3, [r2, #24]
 8002fae:	4b56      	ldr	r3, [pc, #344]	; (8003108 <HAL_GPIO_Init+0x298>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fba:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_GPIO_Init+0x29c>)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	; (8003110 <HAL_GPIO_Init+0x2a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0x19e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4a      	ldr	r2, [pc, #296]	; (8003114 <HAL_GPIO_Init+0x2a4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00d      	beq.n	800300a <HAL_GPIO_Init+0x19a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a49      	ldr	r2, [pc, #292]	; (8003118 <HAL_GPIO_Init+0x2a8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <HAL_GPIO_Init+0x196>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a48      	ldr	r2, [pc, #288]	; (800311c <HAL_GPIO_Init+0x2ac>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_GPIO_Init+0x192>
 8002ffe:	2303      	movs	r3, #3
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x1a0>
 8003002:	2304      	movs	r3, #4
 8003004:	e004      	b.n	8003010 <HAL_GPIO_Init+0x1a0>
 8003006:	2302      	movs	r3, #2
 8003008:	e002      	b.n	8003010 <HAL_GPIO_Init+0x1a0>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_GPIO_Init+0x1a0>
 800300e:	2300      	movs	r3, #0
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	f002 0203 	and.w	r2, r2, #3
 8003016:	0092      	lsls	r2, r2, #2
 8003018:	4093      	lsls	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003020:	493a      	ldr	r1, [pc, #232]	; (800310c <HAL_GPIO_Init+0x29c>)
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4938      	ldr	r1, [pc, #224]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
 8003046:	e006      	b.n	8003056 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	43db      	mvns	r3, r3
 8003050:	4933      	ldr	r1, [pc, #204]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003052:	4013      	ands	r3, r2
 8003054:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	492e      	ldr	r1, [pc, #184]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e006      	b.n	800307e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	43db      	mvns	r3, r3
 8003078:	4929      	ldr	r1, [pc, #164]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 800307a:	4013      	ands	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	4924      	ldr	r1, [pc, #144]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
 8003096:	e006      	b.n	80030a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	491f      	ldr	r1, [pc, #124]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	491a      	ldr	r1, [pc, #104]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
 80030be:	e006      	b.n	80030ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4915      	ldr	r1, [pc, #84]	; (8003120 <HAL_GPIO_Init+0x2b0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	3301      	adds	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f47f aed0 	bne.w	8002e84 <HAL_GPIO_Init+0x14>
  }
}
 80030e4:	bf00      	nop
 80030e6:	372c      	adds	r7, #44	; 0x2c
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	10210000 	.word	0x10210000
 80030f4:	10110000 	.word	0x10110000
 80030f8:	10120000 	.word	0x10120000
 80030fc:	10310000 	.word	0x10310000
 8003100:	10320000 	.word	0x10320000
 8003104:	10220000 	.word	0x10220000
 8003108:	40021000 	.word	0x40021000
 800310c:	40010000 	.word	0x40010000
 8003110:	40010800 	.word	0x40010800
 8003114:	40010c00 	.word	0x40010c00
 8003118:	40011000 	.word	0x40011000
 800311c:	40011400 	.word	0x40011400
 8003120:	40010400 	.word	0x40010400

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f806 	bl	8003184 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e26c      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d00c      	beq.n	80031de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031c4:	4b8f      	ldr	r3, [pc, #572]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
 80031d0:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d06c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x12c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d168      	bne.n	80032c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e246      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x76>
 8003200:	4b80      	ldr	r3, [pc, #512]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7f      	ldr	r2, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x98>
 8003216:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a7a      	ldr	r2, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b78      	ldr	r3, [pc, #480]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a77      	ldr	r2, [pc, #476]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xbc>
 800323a:	4b72      	ldr	r3, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a71      	ldr	r2, [pc, #452]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd4>
 8003254:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6a      	ldr	r2, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a67      	ldr	r2, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fed4 	bl	8002020 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fed0 	bl	8002020 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1fa      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe4>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe fec0 	bl	8002020 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe febc 	bl	8002020 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1e6      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x10c>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032d2:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032de:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1ba      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4939      	ldr	r1, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_RCC_OscConfig+0x270>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe fe75 	bl	8002020 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe fe71 	bl	8002020 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e19b      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4927      	ldr	r1, [pc, #156]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_RCC_OscConfig+0x270>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fe54 	bl	8002020 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe fe50 	bl	8002020 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e17a      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03a      	beq.n	800341c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d019      	beq.n	80033e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCC_OscConfig+0x274>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fe fe34 	bl	8002020 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe fe30 	bl	8002020 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e15a      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033da:	2001      	movs	r0, #1
 80033dc:	f000 faf8 	bl	80039d0 <RCC_Delay>
 80033e0:	e01c      	b.n	800341c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x274>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fe1a 	bl	8002020 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fe16 	bl	8002020 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e140      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	42420000 	.word	0x42420000
 800340c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b9e      	ldr	r3, [pc, #632]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e9      	bne.n	80033f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80a6 	beq.w	8003576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b97      	ldr	r3, [pc, #604]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b94      	ldr	r3, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4a93      	ldr	r2, [pc, #588]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	61d3      	str	r3, [r2, #28]
 8003446:	4b91      	ldr	r3, [pc, #580]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b8b      	ldr	r3, [pc, #556]	; (8003690 <HAL_RCC_OscConfig+0x4f8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a8a      	ldr	r2, [pc, #552]	; (8003690 <HAL_RCC_OscConfig+0x4f8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe fdd7 	bl	8002020 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe fdd3 	bl	8002020 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b64      	cmp	r3, #100	; 0x64
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0fd      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b81      	ldr	r3, [pc, #516]	; (8003690 <HAL_RCC_OscConfig+0x4f8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x312>
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a7a      	ldr	r2, [pc, #488]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e02d      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x334>
 80034b2:	4b76      	ldr	r3, [pc, #472]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a75      	ldr	r2, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a72      	ldr	r2, [pc, #456]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	f023 0304 	bic.w	r3, r3, #4
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e01c      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b05      	cmp	r3, #5
 80034d2:	d10c      	bne.n	80034ee <HAL_RCC_OscConfig+0x356>
 80034d4:	4b6d      	ldr	r3, [pc, #436]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a6c      	ldr	r2, [pc, #432]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	4b6a      	ldr	r3, [pc, #424]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e00b      	b.n	8003506 <HAL_RCC_OscConfig+0x36e>
 80034ee:	4b67      	ldr	r3, [pc, #412]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a66      	ldr	r2, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	4b64      	ldr	r3, [pc, #400]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4a63      	ldr	r2, [pc, #396]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fd87 	bl	8002020 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e00a      	b.n	800352c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fe fd83 	bl	8002020 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	f241 3288 	movw	r2, #5000	; 0x1388
 8003524:	4293      	cmp	r3, r2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e0ab      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	4b57      	ldr	r3, [pc, #348]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ee      	beq.n	8003516 <HAL_RCC_OscConfig+0x37e>
 8003538:	e014      	b.n	8003564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fd71 	bl	8002020 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fe fd6d 	bl	8002020 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e095      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a47      	ldr	r2, [pc, #284]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8081 	beq.w	8003682 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003580:	4b42      	ldr	r3, [pc, #264]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d061      	beq.n	8003650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d146      	bne.n	8003622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <HAL_RCC_OscConfig+0x4fc>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe fd41 	bl	8002020 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fe fd3d 	bl	8002020 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e067      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	4b35      	ldr	r3, [pc, #212]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	492d      	ldr	r1, [pc, #180]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a19      	ldr	r1, [r3, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	430b      	orrs	r3, r1
 80035ee:	4927      	ldr	r1, [pc, #156]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f4:	4b27      	ldr	r3, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x4fc>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fd11 	bl	8002020 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe fd0d 	bl	8002020 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e037      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x46a>
 8003620:	e02f      	b.n	8003682 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003622:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_RCC_OscConfig+0x4fc>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fcfa 	bl	8002020 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fcf6 	bl	8002020 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e020      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x498>
 800364e:	e018      	b.n	8003682 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e013      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x4f4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
 8003694:	42420060 	.word	0x42420060

08003698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0d0      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d910      	bls.n	80036dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b67      	ldr	r3, [pc, #412]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4965      	ldr	r1, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003716:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d040      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d115      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e073      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3d      	ldr	r3, [pc, #244]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4936      	ldr	r1, [pc, #216]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fe fc4a 	bl	8002020 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fe fc46 	bl	8002020 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e053      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d210      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b24      	ldr	r3, [pc, #144]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 0207 	bic.w	r2, r3, #7
 80037ce:	4922      	ldr	r1, [pc, #136]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f821 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800382a:	4601      	mov	r1, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	fa21 f303 	lsr.w	r3, r1, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1cc>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1d0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa74 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40022000 	.word	0x40022000
 800385c:	40021000 	.word	0x40021000
 8003860:	08008b54 	.word	0x08008b54
 8003864:	20000028 	.word	0x20000028
 8003868:	2000002c 	.word	0x2000002c

0800386c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b490      	push	{r4, r7}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003874:	1d3c      	adds	r4, r7, #4
 8003876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x40>
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x46>
 80038aa:	e02d      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ae:	623b      	str	r3, [r7, #32]
      break;
 80038b0:	e02d      	b.n	800390e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	0c9b      	lsrs	r3, r3, #18
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038be:	4413      	add	r3, r2
 80038c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d013      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d0:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	0c5b      	lsrs	r3, r3, #17
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038de:	4413      	add	r3, r2
 80038e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038ea:	fb02 f203 	mul.w	r2, r2, r3
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	e004      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4a0c      	ldr	r2, [pc, #48]	; (800392c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	623b      	str	r3, [r7, #32]
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_GetSysClockFreq+0xc4>)
 800390a:	623b      	str	r3, [r7, #32]
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6a3b      	ldr	r3, [r7, #32]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bc90      	pop	{r4, r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	08008abc 	.word	0x08008abc
 8003920:	08008acc 	.word	0x08008acc
 8003924:	40021000 	.word	0x40021000
 8003928:	00f42400 	.word	0x00f42400
 800392c:	003d0900 	.word	0x003d0900
 8003930:	007a1200 	.word	0x007a1200

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b02      	ldr	r3, [pc, #8]	; (8003944 <HAL_RCC_GetHCLKFreq+0x10>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	20000028 	.word	0x20000028

08003948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800394c:	f7ff fff2 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003950:	4601      	mov	r1, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_RCC_GetPCLK1Freq+0x24>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08008b64 	.word	0x08008b64

08003970 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	220f      	movs	r2, #15
 800397e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_RCC_GetClockConfig+0x58>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0203 	and.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_RCC_GetClockConfig+0x58>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetClockConfig+0x58>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <HAL_RCC_GetClockConfig+0x58>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	08db      	lsrs	r3, r3, #3
 80039aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_GetClockConfig+0x5c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40022000 	.word	0x40022000

080039d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <RCC_Delay+0x34>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <RCC_Delay+0x38>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	0a5b      	lsrs	r3, r3, #9
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039ec:	bf00      	nop
  }
  while (Delay --);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	60fa      	str	r2, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f9      	bne.n	80039ec <RCC_Delay+0x1c>
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000028 	.word	0x20000028
 8003a08:	10624dd3 	.word	0x10624dd3

08003a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01d      	b.n	8003a5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fe f916 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 fb3c 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d007      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e01d      	b.n	8003af6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f815 	bl	8003afe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 faee 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fd50 	bl	80045c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_TIM_PWM_Start+0x60>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa6a 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa5d 	bl	800407e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa6c 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0204 	mvn.w	r2, #4
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa40 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa33 	bl	800407e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fa42 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0208 	mvn.w	r2, #8
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa16 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa09 	bl	800407e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fa18 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9ec 	bl	8004090 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9df 	bl	800407e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f9ee 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0201 	mvn.w	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fee0 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fcc3 	bl	80046aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9b2 	bl	80040b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0220 	mvn.w	r2, #32
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fc8e 	bl	8004698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0b4      	b.n	8003f08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	f200 809f 	bhi.w	8003ef4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003ef5 	.word	0x08003ef5
 8003dc4:	08003ef5 	.word	0x08003ef5
 8003dc8:	08003ef5 	.word	0x08003ef5
 8003dcc:	08003e31 	.word	0x08003e31
 8003dd0:	08003ef5 	.word	0x08003ef5
 8003dd4:	08003ef5 	.word	0x08003ef5
 8003dd8:	08003ef5 	.word	0x08003ef5
 8003ddc:	08003e73 	.word	0x08003e73
 8003de0:	08003ef5 	.word	0x08003ef5
 8003de4:	08003ef5 	.word	0x08003ef5
 8003de8:	08003ef5 	.word	0x08003ef5
 8003dec:	08003eb3 	.word	0x08003eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f9c8 	bl	800418c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0208 	orr.w	r2, r2, #8
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0204 	bic.w	r2, r2, #4
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
      break;
 8003e2e:	e062      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fa0e 	bl	8004258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	619a      	str	r2, [r3, #24]
      break;
 8003e70:	e041      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fa57 	bl	800432c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0208 	orr.w	r2, r2, #8
 8003e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0204 	bic.w	r2, r2, #4
 8003e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69d9      	ldr	r1, [r3, #28]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
      break;
 8003eb0:	e021      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 faa1 	bl	8004400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	021a      	lsls	r2, r3, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	61da      	str	r2, [r3, #28]
      break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ef4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_TIM_ConfigClockSource+0x18>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e0a6      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x166>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d067      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0x120>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d80b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x6c>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d073      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x140>
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d802      	bhi.n	8003f72 <HAL_TIM_ConfigClockSource+0x62>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d06f      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f70:	e078      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d06c      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x140>
 8003f76:	2b30      	cmp	r3, #48	; 0x30
 8003f78:	d06a      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f7a:	e073      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f7c:	2b70      	cmp	r3, #112	; 0x70
 8003f7e:	d00d      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0x8c>
 8003f80:	2b70      	cmp	r3, #112	; 0x70
 8003f82:	d804      	bhi.n	8003f8e <HAL_TIM_ConfigClockSource+0x7e>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d033      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xe0>
 8003f88:	2b60      	cmp	r3, #96	; 0x60
 8003f8a:	d041      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f8c:	e06a      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f92:	d066      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x152>
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f98:	d017      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f9a:	e063      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6899      	ldr	r1, [r3, #8]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f000 faed 	bl	800458a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]
      break;
 8003fc8:	e04c      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6899      	ldr	r1, [r3, #8]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f000 fad6 	bl	800458a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fec:	609a      	str	r2, [r3, #8]
      break;
 8003fee:	e039      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 fa4d 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2150      	movs	r1, #80	; 0x50
 8004008:	4618      	mov	r0, r3
 800400a:	f000 faa4 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800400e:	e029      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	461a      	mov	r2, r3
 800401e:	f000 fa6b 	bl	80044f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2160      	movs	r1, #96	; 0x60
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fa94 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800402e:	e019      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	461a      	mov	r2, r3
 800403e:	f000 fa2d 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2140      	movs	r1, #64	; 0x40
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa84 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 800404e:	e009      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fa7b 	bl	8004556 <TIM_ITRx_SetConfig>
      break;
 8004060:	e000      	b.n	8004064 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
	...

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a29      	ldr	r2, [pc, #164]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d007      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <TIM_Base_SetConfig+0xbc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0x30>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a25      	ldr	r2, [pc, #148]	; (8004188 <TIM_Base_SetConfig+0xc0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <TIM_Base_SetConfig+0xbc>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0x62>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <TIM_Base_SetConfig+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a07      	ldr	r2, [pc, #28]	; (8004180 <TIM_Base_SetConfig+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800

0800418c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d10c      	bne.n	8004202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0308 	bic.w	r3, r3, #8
 80041ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <TIM_OC1_SetConfig+0xc8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d111      	bne.n	800422e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40012c00 	.word	0x40012c00

08004258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0320 	bic.w	r3, r3, #32
 80042a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <TIM_OC2_SetConfig+0xd0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10d      	bne.n	80042d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <TIM_OC2_SetConfig+0xd0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d113      	bne.n	8004304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40012c00 	.word	0x40012c00

0800432c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <TIM_OC3_SetConfig+0xd0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d113      	bne.n	80043d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00

08004400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800444a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <TIM_OC4_SetConfig+0x98>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f023 0210 	bic.w	r2, r3, #16
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	031b      	lsls	r3, r3, #12
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004534:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	f043 0307 	orr.w	r3, r3, #7
 8004578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	609a      	str	r2, [r3, #8]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	2201      	movs	r2, #1
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	401a      	ands	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1a      	ldr	r2, [r3, #32]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	431a      	orrs	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004624:	2302      	movs	r3, #2
 8004626:	e032      	b.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004660:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	4313      	orrs	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c2:	f3ef 8305 	mrs	r3, IPSR
 80046c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10f      	bne.n	80046ee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	607b      	str	r3, [r7, #4]
  return(result);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <osKernelInitialize+0x32>
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <osKernelInitialize+0x60>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d109      	bne.n	80046f6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046e2:	f3ef 8311 	mrs	r3, BASEPRI
 80046e6:	603b      	str	r3, [r7, #0]
  return(result);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046ee:	f06f 0305 	mvn.w	r3, #5
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e00c      	b.n	8004710 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <osKernelInitialize+0x60>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d105      	bne.n	800470a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <osKernelInitialize+0x60>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e002      	b.n	8004710 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr
 800471c:	20000244 	.word	0x20000244

08004720 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60bb      	str	r3, [r7, #8]
  return(result);
 800472c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004732:	f3ef 8310 	mrs	r3, PRIMASK
 8004736:	607b      	str	r3, [r7, #4]
  return(result);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <osKernelStart+0x32>
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <osKernelStart+0x64>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d109      	bne.n	800475a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004746:	f3ef 8311 	mrs	r3, BASEPRI
 800474a:	603b      	str	r3, [r7, #0]
  return(result);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004752:	f06f 0305 	mvn.w	r3, #5
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e00e      	b.n	8004778 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <osKernelStart+0x64>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d107      	bne.n	8004772 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <osKernelStart+0x64>)
 8004764:	2202      	movs	r2, #2
 8004766:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004768:	f001 f864 	bl	8005834 <vTaskStartScheduler>
      stat = osOK;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e002      	b.n	8004778 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004776:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000244 	.word	0x20000244

08004788 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b092      	sub	sp, #72	; 0x48
 800478c:	af04      	add	r7, sp, #16
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004798:	f3ef 8305 	mrs	r3, IPSR
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 8094 	bne.w	80048ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a6:	f3ef 8310 	mrs	r3, PRIMASK
 80047aa:	623b      	str	r3, [r7, #32]
  return(result);
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 808d 	bne.w	80048ce <osThreadNew+0x146>
 80047b4:	4b48      	ldr	r3, [pc, #288]	; (80048d8 <osThreadNew+0x150>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d106      	bne.n	80047ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047bc:	f3ef 8311 	mrs	r3, BASEPRI
 80047c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f040 8082 	bne.w	80048ce <osThreadNew+0x146>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d07e      	beq.n	80048ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80047d4:	2318      	movs	r3, #24
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80047d8:	2300      	movs	r3, #0
 80047da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80047dc:	f107 031b 	add.w	r3, r7, #27
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d045      	beq.n	800487a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <osThreadNew+0x74>
        name = attr->name;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <osThreadNew+0x9a>
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b38      	cmp	r3, #56	; 0x38
 8004814:	d805      	bhi.n	8004822 <osThreadNew+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <osThreadNew+0x9e>
        return (NULL);
 8004822:	2300      	movs	r3, #0
 8004824:	e054      	b.n	80048d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00e      	beq.n	800485c <osThreadNew+0xd4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b5b      	cmp	r3, #91	; 0x5b
 8004844:	d90a      	bls.n	800485c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <osThreadNew+0xd4>
        mem = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
 800485a:	e010      	b.n	800487e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10c      	bne.n	800487e <osThreadNew+0xf6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <osThreadNew+0xf6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <osThreadNew+0xf6>
          mem = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
 8004878:	e001      	b.n	800487e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	2b01      	cmp	r3, #1
 8004882:	d110      	bne.n	80048a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800488c:	9202      	str	r2, [sp, #8]
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fe02 	bl	80054a4 <xTaskCreateStatic>
 80048a0:	4603      	mov	r3, r0
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e013      	b.n	80048ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fe49 	bl	8005556 <xTaskCreate>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <osThreadNew+0x146>
          hTask = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048ce:	697b      	ldr	r3, [r7, #20]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3738      	adds	r7, #56	; 0x38
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000244 	.word	0x20000244

080048dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR
 80048e8:	613b      	str	r3, [r7, #16]
  return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10f      	bne.n	8004910 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f0:	f3ef 8310 	mrs	r3, PRIMASK
 80048f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <osDelay+0x34>
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <osDelay+0x58>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d109      	bne.n	8004918 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004904:	f3ef 8311 	mrs	r3, BASEPRI
 8004908:	60bb      	str	r3, [r7, #8]
  return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <osDelay+0x3c>
    stat = osErrorISR;
 8004910:	f06f 0305 	mvn.w	r3, #5
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e007      	b.n	8004928 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 ff52 	bl	80057cc <vTaskDelay>
    }
  }

  return (stat);
 8004928:	697b      	ldr	r3, [r7, #20]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000244 	.word	0x20000244

08004938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a06      	ldr	r2, [pc, #24]	; (8004960 <vApplicationGetIdleTaskMemory+0x28>)
 8004948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4a05      	ldr	r2, [pc, #20]	; (8004964 <vApplicationGetIdleTaskMemory+0x2c>)
 800494e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2280      	movs	r2, #128	; 0x80
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	20000248 	.word	0x20000248
 8004964:	200002a4 	.word	0x200002a4

08004968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <vApplicationGetTimerTaskMemory+0x2c>)
 8004978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4a06      	ldr	r2, [pc, #24]	; (8004998 <vApplicationGetTimerTaskMemory+0x30>)
 800497e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004986:	601a      	str	r2, [r3, #0]
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	200004a4 	.word	0x200004a4
 8004998:	20000500 	.word	0x20000500

0800499c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f103 0208 	add.w	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 0208 	add.w	r2, r3, #8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f103 0208 	add.w	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a4e:	d103      	bne.n	8004a58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e00c      	b.n	8004a72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e002      	b.n	8004a66 <vListInsert+0x2e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d2f6      	bcs.n	8004a60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6852      	ldr	r2, [r2, #4]
 8004ac8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d103      	bne.n	8004adc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
	...

08004afc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	e7fe      	b.n	8004b22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b24:	f001 ff98 	bl	8006a58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	441a      	add	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	3b01      	subs	r3, #1
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	441a      	add	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	22ff      	movs	r2, #255	; 0xff
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d114      	bne.n	8004ba4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01a      	beq.n	8004bb8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3310      	adds	r3, #16
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 f8d8 	bl	8005d3c <xTaskRemoveFromEventList>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <xQueueGenericReset+0xcc>)
 8004b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	e009      	b.n	8004bb8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3310      	adds	r3, #16
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fef7 	bl	800499c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3324      	adds	r3, #36	; 0x24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fef2 	bl	800499c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bb8:	f001 ff7c 	bl	8006ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bbc:	2301      	movs	r3, #1
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08e      	sub	sp, #56	; 0x38
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <xQueueGenericCreateStatic+0x28>
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	e7fe      	b.n	8004bf2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <xQueueGenericCreateStatic+0x42>
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <xQueueGenericCreateStatic+0x4e>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <xQueueGenericCreateStatic+0x52>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericCreateStatic+0x54>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <xQueueGenericCreateStatic+0x6c>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
 8004c36:	e7fe      	b.n	8004c36 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xQueueGenericCreateStatic+0x78>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueGenericCreateStatic+0x7c>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <xQueueGenericCreateStatic+0x7e>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <xQueueGenericCreateStatic+0x96>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e7fe      	b.n	8004c60 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c62:	2350      	movs	r3, #80	; 0x50
 8004c64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d009      	beq.n	8004c80 <xQueueGenericCreateStatic+0xb4>
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e7fe      	b.n	8004c7e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00d      	beq.n	8004ca6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f805 	bl	8004cb0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cde:	2101      	movs	r1, #1
 8004ce0:	69b8      	ldr	r0, [r7, #24]
 8004ce2:	f7ff ff0b 	bl	8004afc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <xQueueGenericSend+0x30>
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <xQueueGenericSend+0x3e>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSend+0x42>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSend+0x44>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <xQueueGenericSend+0x5c>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	e7fe      	b.n	8004d52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d103      	bne.n	8004d62 <xQueueGenericSend+0x6a>
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <xQueueGenericSend+0x6e>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <xQueueGenericSend+0x70>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <xQueueGenericSend+0x88>
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e7fe      	b.n	8004d7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d80:	f001 f996 	bl	80060b0 <xTaskGetSchedulerState>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <xQueueGenericSend+0x98>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <xQueueGenericSend+0x9c>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <xQueueGenericSend+0x9e>
 8004d94:	2300      	movs	r3, #0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <xQueueGenericSend+0xb6>
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dae:	f001 fe53 	bl	8006a58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <xQueueGenericSend+0xcc>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d129      	bne.n	8004e18 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dca:	f000 f9ff 	bl	80051cc <prvCopyDataToQueue>
 8004dce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 ffad 	bl	8005d3c <xTaskRemoveFromEventList>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004de8:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <xQueueGenericSend+0x1f0>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	e00a      	b.n	8004e10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <xQueueGenericSend+0x1f0>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e10:	f001 fe50 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e063      	b.n	8004ee0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e1e:	f001 fe49 	bl	8006ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e05c      	b.n	8004ee0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 ffe5 	bl	8005e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e3a:	f001 fe3b 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e3e:	f000 fd5d 	bl	80058fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e42:	f001 fe09 	bl	8006a58 <vPortEnterCritical>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e52:	d103      	bne.n	8004e5c <xQueueGenericSend+0x164>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e68:	d103      	bne.n	8004e72 <xQueueGenericSend+0x17a>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e72:	f001 fe1f 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e76:	1d3a      	adds	r2, r7, #4
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 ffd4 	bl	8005e2c <xTaskCheckForTimeOut>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d124      	bne.n	8004ed4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8c:	f000 fa96 	bl	80053bc <prvIsQueueFull>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3310      	adds	r3, #16
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fefe 	bl	8005ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea6:	f000 fa21 	bl	80052ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eaa:	f000 fd35 	bl	8005918 <xTaskResumeAll>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f af7c 	bne.w	8004dae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <xQueueGenericSend+0x1f0>)
 8004eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	e772      	b.n	8004dae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eca:	f000 fa0f 	bl	80052ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ece:	f000 fd23 	bl	8005918 <xTaskResumeAll>
 8004ed2:	e76c      	b.n	8004dae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed6:	f000 fa09 	bl	80052ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eda:	f000 fd1d 	bl	8005918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ede:	2300      	movs	r3, #0
		}
	}
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3738      	adds	r7, #56	; 0x38
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <xQueueGenericSendFromISR+0x2c>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
 8004f16:	e7fe      	b.n	8004f16 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <xQueueGenericSendFromISR+0x3a>
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueGenericSendFromISR+0x3e>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueGenericSendFromISR+0x40>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <xQueueGenericSendFromISR+0x58>
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	e7fe      	b.n	8004f42 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d103      	bne.n	8004f52 <xQueueGenericSendFromISR+0x66>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <xQueueGenericSendFromISR+0x6a>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <xQueueGenericSendFromISR+0x6c>
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <xQueueGenericSendFromISR+0x84>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	e7fe      	b.n	8004f6e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f70:	f001 fe2c 	bl	8006bcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f74:	f3ef 8211 	mrs	r2, BASEPRI
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61ba      	str	r2, [r7, #24]
 8004f8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d302      	bcc.n	8004fa2 <xQueueGenericSendFromISR+0xb6>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d12c      	bne.n	8004ffc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb2:	f000 f90b 	bl	80051cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fb6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fbe:	d112      	bne.n	8004fe6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d016      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	3324      	adds	r3, #36	; 0x24
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 feb5 	bl	8005d3c <xTaskRemoveFromEventList>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e007      	b.n	8004ff6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fea:	3301      	adds	r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	b25a      	sxtb	r2, r3
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ffa:	e001      	b.n	8005000 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800500a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800500c:	4618      	mov	r0, r3
 800500e:	3738      	adds	r7, #56	; 0x38
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <xQueueReceive+0x2e>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	623b      	str	r3, [r7, #32]
 8005040:	e7fe      	b.n	8005040 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <xQueueReceive+0x3c>
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <xQueueReceive+0x40>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <xQueueReceive+0x42>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <xQueueReceive+0x5a>
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	e7fe      	b.n	800506c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800506e:	f001 f81f 	bl	80060b0 <xTaskGetSchedulerState>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <xQueueReceive+0x6a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <xQueueReceive+0x6e>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xQueueReceive+0x70>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <xQueueReceive+0x88>
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e7fe      	b.n	800509a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800509c:	f001 fcdc 	bl	8006a58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01f      	beq.n	80050ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b0:	f000 f8f6 	bl	80052a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00f      	beq.n	80050e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fe37 	bl	8005d3c <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b3c      	ldr	r3, [pc, #240]	; (80051c8 <xQueueReceive+0x1b4>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050e4:	f001 fce6 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e069      	b.n	80051c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050f2:	f001 fcdf 	bl	8006ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e062      	b.n	80051c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005100:	f107 0310 	add.w	r3, r7, #16
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fe7b 	bl	8005e00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800510e:	f001 fcd1 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005112:	f000 fbf3 	bl	80058fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005116:	f001 fc9f 	bl	8006a58 <vPortEnterCritical>
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005120:	b25b      	sxtb	r3, r3
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005126:	d103      	bne.n	8005130 <xQueueReceive+0x11c>
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005136:	b25b      	sxtb	r3, r3
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513c:	d103      	bne.n	8005146 <xQueueReceive+0x132>
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005146:	f001 fcb5 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800514a:	1d3a      	adds	r2, r7, #4
 800514c:	f107 0310 	add.w	r3, r7, #16
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fe6a 	bl	8005e2c <xTaskCheckForTimeOut>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d123      	bne.n	80051a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800515e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005160:	f000 f916 	bl	8005390 <prvIsQueueEmpty>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d017      	beq.n	800519a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	3324      	adds	r3, #36	; 0x24
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd94 	bl	8005ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517a:	f000 f8b7 	bl	80052ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800517e:	f000 fbcb 	bl	8005918 <xTaskResumeAll>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d189      	bne.n	800509c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xQueueReceive+0x1b4>)
 800518a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	e780      	b.n	800509c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800519a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800519c:	f000 f8a6 	bl	80052ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051a0:	f000 fbba 	bl	8005918 <xTaskResumeAll>
 80051a4:	e77a      	b.n	800509c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a8:	f000 f8a0 	bl	80052ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ac:	f000 fbb4 	bl	8005918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b2:	f000 f8ed 	bl	8005390 <prvIsQueueEmpty>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f43f af6f 	beq.w	800509c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3730      	adds	r7, #48	; 0x30
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10d      	bne.n	8005206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d14d      	bne.n	800528e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 ff78 	bl	80060ec <xTaskPriorityDisinherit>
 80051fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	e043      	b.n	800528e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d119      	bne.n	8005240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6898      	ldr	r0, [r3, #8]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	f001 ff12 	bl	8007040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d32b      	bcc.n	800528e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	e026      	b.n	800528e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68d8      	ldr	r0, [r3, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	461a      	mov	r2, r3
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	f001 fef8 	bl	8007040 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	425b      	negs	r3, r3
 800525a:	441a      	add	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d207      	bcs.n	800527c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	425b      	negs	r3, r3
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d105      	bne.n	800528e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	3b01      	subs	r3, #1
 800528c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005296:	697b      	ldr	r3, [r7, #20]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d018      	beq.n	80052e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	441a      	add	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d303      	bcc.n	80052d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68d9      	ldr	r1, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	461a      	mov	r2, r3
 80052de:	6838      	ldr	r0, [r7, #0]
 80052e0:	f001 feae 	bl	8007040 <memcpy>
	}
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052f4:	f001 fbb0 	bl	8006a58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005300:	e011      	b.n	8005326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fd14 	bl	8005d3c <xTaskRemoveFromEventList>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800531a:	f000 fde7 	bl	8005eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	3b01      	subs	r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	dce9      	bgt.n	8005302 <prvUnlockQueue+0x16>
 800532e:	e000      	b.n	8005332 <prvUnlockQueue+0x46>
					break;
 8005330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800533a:	f001 fbbb 	bl	8006ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800533e:	f001 fb8b 	bl	8006a58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800534a:	e011      	b.n	8005370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d012      	beq.n	800537a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3310      	adds	r3, #16
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fcef 	bl	8005d3c <xTaskRemoveFromEventList>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005364:	f000 fdc2 	bl	8005eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	3b01      	subs	r3, #1
 800536c:	b2db      	uxtb	r3, r3
 800536e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dce9      	bgt.n	800534c <prvUnlockQueue+0x60>
 8005378:	e000      	b.n	800537c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800537a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fb96 	bl	8006ab4 <vPortExitCritical>
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005398:	f001 fb5e 	bl	8006a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e001      	b.n	80053ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ae:	f001 fb81 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053c4:	f001 fb48 	bl	8006a58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d102      	bne.n	80053da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053d4:	2301      	movs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e001      	b.n	80053de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053de:	f001 fb69 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e014      	b.n	8005426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053fc:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <vQueueAddToRegistry+0x4c>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005408:	490b      	ldr	r1, [pc, #44]	; (8005438 <vQueueAddToRegistry+0x4c>)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <vQueueAddToRegistry+0x4c>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800541e:	e005      	b.n	800542c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b07      	cmp	r3, #7
 800542a:	d9e7      	bls.n	80053fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20001ccc 	.word	0x20001ccc

0800543c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800544c:	f001 fb04 	bl	8006a58 <vPortEnterCritical>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545c:	d103      	bne.n	8005466 <vQueueWaitForMessageRestricted+0x2a>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005472:	d103      	bne.n	800547c <vQueueWaitForMessageRestricted+0x40>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547c:	f001 fb1a 	bl	8006ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fc29 	bl	8005ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005496:	6978      	ldr	r0, [r7, #20]
 8005498:	f7ff ff28 	bl	80052ec <prvUnlockQueue>
	}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	; 0x38
 80054a8:	af04      	add	r7, sp, #16
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <xTaskCreateStatic+0x28>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e7fe      	b.n	80054ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <xTaskCreateStatic+0x42>
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	e7fe      	b.n	80054e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054e6:	235c      	movs	r3, #92	; 0x5c
 80054e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b5c      	cmp	r3, #92	; 0x5c
 80054ee:	d009      	beq.n	8005504 <xTaskCreateStatic+0x60>
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e7fe      	b.n	8005502 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01e      	beq.n	8005548 <xTaskCreateStatic+0xa4>
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005518:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005522:	2300      	movs	r3, #0
 8005524:	9303      	str	r3, [sp, #12]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	9302      	str	r3, [sp, #8]
 800552a:	f107 0314 	add.w	r3, r7, #20
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f850 	bl	80055e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005542:	f000 f8d3 	bl	80056ec <prvAddNewTaskToReadyList>
 8005546:	e001      	b.n	800554c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800554c:	697b      	ldr	r3, [r7, #20]
	}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005556:	b580      	push	{r7, lr}
 8005558:	b08c      	sub	sp, #48	; 0x30
 800555a:	af04      	add	r7, sp, #16
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fb6a 	bl	8006c44 <pvPortMalloc>
 8005570:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00e      	beq.n	8005596 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005578:	205c      	movs	r0, #92	; 0x5c
 800557a:	f001 fb63 	bl	8006c44 <pvPortMalloc>
 800557e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
 800558c:	e005      	b.n	800559a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f001 fc1a 	bl	8006dc8 <vPortFree>
 8005594:	e001      	b.n	800559a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d017      	beq.n	80055d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	2300      	movs	r3, #0
 80055ac:	9303      	str	r3, [sp, #12]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	9302      	str	r3, [sp, #8]
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f80e 	bl	80055e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c4:	69f8      	ldr	r0, [r7, #28]
 80055c6:	f000 f891 	bl	80056ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	e002      	b.n	80055d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055d6:	69bb      	ldr	r3, [r7, #24]
	}
 80055d8:	4618      	mov	r0, r3
 80055da:	3720      	adds	r7, #32
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	461a      	mov	r2, r3
 80055f8:	21a5      	movs	r1, #165	; 0xa5
 80055fa:	f001 fd2c 	bl	8007056 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005608:	3b01      	subs	r3, #1
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <prvInitialiseNewTask+0x56>
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	e7fe      	b.n	8005634 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	e012      	b.n	8005662 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	7819      	ldrb	r1, [r3, #0]
 8005644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	3334      	adds	r3, #52	; 0x34
 800564c:	460a      	mov	r2, r1
 800564e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d006      	beq.n	800566a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b0f      	cmp	r3, #15
 8005666:	d9e9      	bls.n	800563c <prvInitialiseNewTask+0x5c>
 8005668:	e000      	b.n	800566c <prvInitialiseNewTask+0x8c>
		{
			break;
 800566a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	2b37      	cmp	r3, #55	; 0x37
 8005678:	d901      	bls.n	800567e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800567a:	2337      	movs	r3, #55	; 0x37
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2200      	movs	r2, #0
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f9a0 	bl	80049da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	3318      	adds	r3, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff f99b 	bl	80049da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	69b8      	ldr	r0, [r7, #24]
 80056ce:	f001 f8d7 	bl	8006880 <pxPortInitialiseStack>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e4:	bf00      	nop
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056f4:	f001 f9b0 	bl	8006a58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056f8:	4b2d      	ldr	r3, [pc, #180]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 8005700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800570a:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <prvAddNewTaskToReadyList+0xc4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d110      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005718:	f000 fc0c 	bl	8005f34 <prvInitialiseTaskLists>
 800571c:	e00d      	b.n	800573a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <prvAddNewTaskToReadyList+0xcc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005726:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	429a      	cmp	r2, r3
 8005732:	d802      	bhi.n	800573a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800573a:	4b20      	ldr	r3, [pc, #128]	; (80057bc <prvAddNewTaskToReadyList+0xd0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3301      	adds	r3, #1
 8005740:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <prvAddNewTaskToReadyList+0xd0>)
 8005742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <prvAddNewTaskToReadyList+0xd0>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <prvAddNewTaskToReadyList+0xd4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d903      	bls.n	8005760 <prvAddNewTaskToReadyList+0x74>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <prvAddNewTaskToReadyList+0xd4>)
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <prvAddNewTaskToReadyList+0xd8>)
 800576e:	441a      	add	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7ff f93b 	bl	80049f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800577c:	f001 f99a 	bl	8006ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <prvAddNewTaskToReadyList+0xcc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvAddNewTaskToReadyList+0xc8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	429a      	cmp	r2, r3
 8005794:	d207      	bcs.n	80057a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvAddNewTaskToReadyList+0xdc>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000dd4 	.word	0x20000dd4
 80057b4:	20000900 	.word	0x20000900
 80057b8:	20000de0 	.word	0x20000de0
 80057bc:	20000df0 	.word	0x20000df0
 80057c0:	20000ddc 	.word	0x20000ddc
 80057c4:	20000904 	.word	0x20000904
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <vTaskDelay+0x60>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <vTaskDelay+0x2e>
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	60bb      	str	r3, [r7, #8]
 80057f8:	e7fe      	b.n	80057f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80057fa:	f000 f87f 	bl	80058fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fcdf 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005806:	f000 f887 	bl	8005918 <xTaskResumeAll>
 800580a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <vTaskDelay+0x64>)
 8005814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000dfc 	.word	0x20000dfc
 8005830:	e000ed04 	.word	0xe000ed04

08005834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005842:	463a      	mov	r2, r7
 8005844:	1d39      	adds	r1, r7, #4
 8005846:	f107 0308 	add.w	r3, r7, #8
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff f874 	bl	8004938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	9202      	str	r2, [sp, #8]
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	2300      	movs	r3, #0
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	2300      	movs	r3, #0
 8005860:	460a      	mov	r2, r1
 8005862:	4920      	ldr	r1, [pc, #128]	; (80058e4 <vTaskStartScheduler+0xb0>)
 8005864:	4820      	ldr	r0, [pc, #128]	; (80058e8 <vTaskStartScheduler+0xb4>)
 8005866:	f7ff fe1d 	bl	80054a4 <xTaskCreateStatic>
 800586a:	4602      	mov	r2, r0
 800586c:	4b1f      	ldr	r3, [pc, #124]	; (80058ec <vTaskStartScheduler+0xb8>)
 800586e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <vTaskStartScheduler+0xb8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e001      	b.n	8005882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005888:	f000 fcf0 	bl	800626c <xTimerCreateTimerTask>
 800588c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d115      	bne.n	80058c0 <vTaskStartScheduler+0x8c>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <vTaskStartScheduler+0xbc>)
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <vTaskStartScheduler+0xc0>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80058b4:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <vTaskStartScheduler+0xc4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058ba:	f001 f85d 	bl	8006978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058be:	e00d      	b.n	80058dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c6:	d109      	bne.n	80058dc <vTaskStartScheduler+0xa8>
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e7fe      	b.n	80058da <vTaskStartScheduler+0xa6>
}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08008ad0 	.word	0x08008ad0
 80058e8:	08005f05 	.word	0x08005f05
 80058ec:	20000df8 	.word	0x20000df8
 80058f0:	20000df4 	.word	0x20000df4
 80058f4:	20000de0 	.word	0x20000de0
 80058f8:	20000dd8 	.word	0x20000dd8

080058fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <vTaskSuspendAll+0x18>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3301      	adds	r3, #1
 8005906:	4a03      	ldr	r2, [pc, #12]	; (8005914 <vTaskSuspendAll+0x18>)
 8005908:	6013      	str	r3, [r2, #0]
}
 800590a:	bf00      	nop
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000dfc 	.word	0x20000dfc

08005918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <xTaskResumeAll+0x114>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <xTaskResumeAll+0x2a>
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	e7fe      	b.n	8005940 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005942:	f001 f889 	bl	8006a58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xTaskResumeAll+0x114>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <xTaskResumeAll+0x114>)
 800594e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005950:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <xTaskResumeAll+0x114>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d162      	bne.n	8005a1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005958:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <xTaskResumeAll+0x118>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d05e      	beq.n	8005a1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005960:	e02f      	b.n	80059c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005962:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <xTaskResumeAll+0x11c>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3318      	adds	r3, #24
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff f89a 	bl	8004aa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3304      	adds	r3, #4
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff f895 	bl	8004aa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <xTaskResumeAll+0x120>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d903      	bls.n	8005992 <xTaskResumeAll+0x7a>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <xTaskResumeAll+0x120>)
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <xTaskResumeAll+0x124>)
 80059a0:	441a      	add	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f7ff f822 	bl	80049f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <xTaskResumeAll+0x128>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059bc:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <xTaskResumeAll+0x12c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xTaskResumeAll+0x11c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1cb      	bne.n	8005962 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059d0:	f000 fb4a 	bl	8006068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <xTaskResumeAll+0x130>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059e0:	f000 f844 	bl	8005a6c <xTaskIncrementTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <xTaskResumeAll+0x12c>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f1      	bne.n	80059e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80059fc:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <xTaskResumeAll+0x130>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <xTaskResumeAll+0x12c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <xTaskResumeAll+0x134>)
 8005a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a1e:	f001 f849 	bl	8006ab4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a22:	68bb      	ldr	r3, [r7, #8]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000dfc 	.word	0x20000dfc
 8005a30:	20000dd4 	.word	0x20000dd4
 8005a34:	20000d94 	.word	0x20000d94
 8005a38:	20000ddc 	.word	0x20000ddc
 8005a3c:	20000904 	.word	0x20000904
 8005a40:	20000900 	.word	0x20000900
 8005a44:	20000de8 	.word	0x20000de8
 8005a48:	20000de4 	.word	0x20000de4
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <xTaskGetTickCount+0x18>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a5c:	687b      	ldr	r3, [r7, #4]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	20000dd8 	.word	0x20000dd8

08005a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a76:	4b51      	ldr	r3, [pc, #324]	; (8005bbc <xTaskIncrementTick+0x150>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 808d 	bne.w	8005b9a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a80:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a88:	4a4d      	ldr	r2, [pc, #308]	; (8005bc0 <xTaskIncrementTick+0x154>)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11f      	bne.n	8005ad4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a94:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <xTaskIncrementTick+0x46>
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	e7fe      	b.n	8005ab0 <xTaskIncrementTick+0x44>
 8005ab2:	4b44      	ldr	r3, [pc, #272]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a41      	ldr	r2, [pc, #260]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <xTaskIncrementTick+0x15c>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <xTaskIncrementTick+0x160>)
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	f000 faca 	bl	8006068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d34e      	bcc.n	8005b7c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ade:	4b39      	ldr	r3, [pc, #228]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <xTaskIncrementTick+0x80>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <xTaskIncrementTick+0x82>
 8005aec:	2300      	movs	r3, #0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af8:	601a      	str	r2, [r3, #0]
					break;
 8005afa:	e03f      	b.n	8005b7c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005afc:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <xTaskIncrementTick+0x158>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d203      	bcs.n	8005b1c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b14:	4a2e      	ldr	r2, [pc, #184]	; (8005bd0 <xTaskIncrementTick+0x164>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6013      	str	r3, [r2, #0]
						break;
 8005b1a:	e02f      	b.n	8005b7c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ffc1 	bl	8004aa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	3318      	adds	r3, #24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe ffb8 	bl	8004aa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d903      	bls.n	8005b4c <xTaskIncrementTick+0xe0>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <xTaskIncrementTick+0x168>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b5a:	441a      	add	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4619      	mov	r1, r3
 8005b62:	4610      	mov	r0, r2
 8005b64:	f7fe ff45 	bl	80049f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3b3      	bcc.n	8005ade <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b7a:	e7b0      	b.n	8005ade <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b7c:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <xTaskIncrementTick+0x170>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4915      	ldr	r1, [pc, #84]	; (8005bd8 <xTaskIncrementTick+0x16c>)
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d907      	bls.n	8005ba4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e004      	b.n	8005ba4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b9a:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <xTaskIncrementTick+0x174>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <xTaskIncrementTick+0x174>)
 8005ba2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <xTaskIncrementTick+0x178>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005bb0:	697b      	ldr	r3, [r7, #20]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000dfc 	.word	0x20000dfc
 8005bc0:	20000dd8 	.word	0x20000dd8
 8005bc4:	20000d8c 	.word	0x20000d8c
 8005bc8:	20000d90 	.word	0x20000d90
 8005bcc:	20000dec 	.word	0x20000dec
 8005bd0:	20000df4 	.word	0x20000df4
 8005bd4:	20000ddc 	.word	0x20000ddc
 8005bd8:	20000904 	.word	0x20000904
 8005bdc:	20000900 	.word	0x20000900
 8005be0:	20000de4 	.word	0x20000de4
 8005be4:	20000de8 	.word	0x20000de8

08005be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bee:	4b27      	ldr	r3, [pc, #156]	; (8005c8c <vTaskSwitchContext+0xa4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <vTaskSwitchContext+0xa8>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bfc:	e040      	b.n	8005c80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005bfe:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <vTaskSwitchContext+0xa8>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c04:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <vTaskSwitchContext+0xac>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e00f      	b.n	8005c2c <vTaskSwitchContext+0x44>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <vTaskSwitchContext+0x3e>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e7fe      	b.n	8005c24 <vTaskSwitchContext+0x3c>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	491a      	ldr	r1, [pc, #104]	; (8005c98 <vTaskSwitchContext+0xb0>)
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0e5      	beq.n	8005c0c <vTaskSwitchContext+0x24>
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <vTaskSwitchContext+0xb0>)
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3308      	adds	r3, #8
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d104      	bne.n	8005c70 <vTaskSwitchContext+0x88>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <vTaskSwitchContext+0xb4>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	4a06      	ldr	r2, [pc, #24]	; (8005c94 <vTaskSwitchContext+0xac>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000dfc 	.word	0x20000dfc
 8005c90:	20000de8 	.word	0x20000de8
 8005c94:	20000ddc 	.word	0x20000ddc
 8005c98:	20000904 	.word	0x20000904
 8005c9c:	20000900 	.word	0x20000900

08005ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <vTaskPlaceOnEventList+0x24>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e7fe      	b.n	8005cc2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <vTaskPlaceOnEventList+0x44>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3318      	adds	r3, #24
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fe feb3 	bl	8004a38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6838      	ldr	r0, [r7, #0]
 8005cd6:	f000 fa75 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000900 	.word	0x20000900

08005ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <vTaskPlaceOnEventListRestricted+0x26>
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e7fe      	b.n	8005d0c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <vTaskPlaceOnEventListRestricted+0x50>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3318      	adds	r3, #24
 8005d14:	4619      	mov	r1, r3
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7fe fe6b 	bl	80049f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	68b8      	ldr	r0, [r7, #8]
 8005d2c:	f000 fa4a 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
	}
 8005d30:	bf00      	nop
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000900 	.word	0x20000900

08005d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <xTaskRemoveFromEventList+0x2a>
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e7fe      	b.n	8005d64 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3318      	adds	r3, #24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fe9c 	bl	8004aa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d70:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <xTaskRemoveFromEventList+0xac>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11d      	bne.n	8005db4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe fe93 	bl	8004aa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d86:	4b19      	ldr	r3, [pc, #100]	; (8005dec <xTaskRemoveFromEventList+0xb0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d903      	bls.n	8005d96 <xTaskRemoveFromEventList+0x5a>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <xTaskRemoveFromEventList+0xb0>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a13      	ldr	r2, [pc, #76]	; (8005df0 <xTaskRemoveFromEventList+0xb4>)
 8005da4:	441a      	add	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fe fe20 	bl	80049f2 <vListInsertEnd>
 8005db2:	e005      	b.n	8005dc0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	3318      	adds	r3, #24
 8005db8:	4619      	mov	r1, r3
 8005dba:	480e      	ldr	r0, [pc, #56]	; (8005df4 <xTaskRemoveFromEventList+0xb8>)
 8005dbc:	f7fe fe19 	bl	80049f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <xTaskRemoveFromEventList+0xbc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d905      	bls.n	8005dda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <xTaskRemoveFromEventList+0xc0>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e001      	b.n	8005dde <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005dde:	697b      	ldr	r3, [r7, #20]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000dfc 	.word	0x20000dfc
 8005dec:	20000ddc 	.word	0x20000ddc
 8005df0:	20000904 	.word	0x20000904
 8005df4:	20000d94 	.word	0x20000d94
 8005df8:	20000900 	.word	0x20000900
 8005dfc:	20000de8 	.word	0x20000de8

08005e00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <vTaskInternalSetTimeOutState+0x24>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <vTaskInternalSetTimeOutState+0x28>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000dec 	.word	0x20000dec
 8005e28:	20000dd8 	.word	0x20000dd8

08005e2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <xTaskCheckForTimeOut+0x24>
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	e7fe      	b.n	8005e4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <xTaskCheckForTimeOut+0x3e>
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e7fe      	b.n	8005e68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005e6a:	f000 fdf5 	bl	8006a58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <xTaskCheckForTimeOut+0xb8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e86:	d102      	bne.n	8005e8e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e023      	b.n	8005ed6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <xTaskCheckForTimeOut+0xbc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d007      	beq.n	8005eaa <xTaskCheckForTimeOut+0x7e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e015      	b.n	8005ed6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d20b      	bcs.n	8005ecc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff ff9d 	bl	8005e00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
 8005eca:	e004      	b.n	8005ed6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ed6:	f000 fded 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8005eda:	69fb      	ldr	r3, [r7, #28]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000dd8 	.word	0x20000dd8
 8005ee8:	20000dec 	.word	0x20000dec

08005eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <vTaskMissedYield+0x14>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000de8 	.word	0x20000de8

08005f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f0c:	f000 f852 	bl	8005fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <prvIdleTask+0x28>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d9f9      	bls.n	8005f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <prvIdleTask+0x2c>)
 8005f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f28:	e7f0      	b.n	8005f0c <prvIdleTask+0x8>
 8005f2a:	bf00      	nop
 8005f2c:	20000904 	.word	0x20000904
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	e00c      	b.n	8005f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <prvInitialiseTaskLists+0x60>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fd24 	bl	800499c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3301      	adds	r3, #1
 8005f58:	607b      	str	r3, [r7, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b37      	cmp	r3, #55	; 0x37
 8005f5e:	d9ef      	bls.n	8005f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f60:	480d      	ldr	r0, [pc, #52]	; (8005f98 <prvInitialiseTaskLists+0x64>)
 8005f62:	f7fe fd1b 	bl	800499c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f66:	480d      	ldr	r0, [pc, #52]	; (8005f9c <prvInitialiseTaskLists+0x68>)
 8005f68:	f7fe fd18 	bl	800499c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f6c:	480c      	ldr	r0, [pc, #48]	; (8005fa0 <prvInitialiseTaskLists+0x6c>)
 8005f6e:	f7fe fd15 	bl	800499c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f72:	480c      	ldr	r0, [pc, #48]	; (8005fa4 <prvInitialiseTaskLists+0x70>)
 8005f74:	f7fe fd12 	bl	800499c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f78:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <prvInitialiseTaskLists+0x74>)
 8005f7a:	f7fe fd0f 	bl	800499c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <prvInitialiseTaskLists+0x78>)
 8005f80:	4a05      	ldr	r2, [pc, #20]	; (8005f98 <prvInitialiseTaskLists+0x64>)
 8005f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvInitialiseTaskLists+0x7c>)
 8005f86:	4a05      	ldr	r2, [pc, #20]	; (8005f9c <prvInitialiseTaskLists+0x68>)
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000904 	.word	0x20000904
 8005f98:	20000d64 	.word	0x20000d64
 8005f9c:	20000d78 	.word	0x20000d78
 8005fa0:	20000d94 	.word	0x20000d94
 8005fa4:	20000da8 	.word	0x20000da8
 8005fa8:	20000dc0 	.word	0x20000dc0
 8005fac:	20000d8c 	.word	0x20000d8c
 8005fb0:	20000d90 	.word	0x20000d90

08005fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fba:	e019      	b.n	8005ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fbc:	f000 fd4c 	bl	8006a58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <prvCheckTasksWaitingTermination+0x4c>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fd6b 	bl	8004aa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <prvCheckTasksWaitingTermination+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <prvCheckTasksWaitingTermination+0x50>)
 8005fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fe6:	f000 fd65 	bl	8006ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f80e 	bl	800600c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <prvCheckTasksWaitingTermination+0x54>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e1      	bne.n	8005fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000da8 	.word	0x20000da8
 8006004:	20000dd4 	.word	0x20000dd4
 8006008:	20000dbc 	.word	0x20000dbc

0800600c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fed0 	bl	8006dc8 <vPortFree>
				vPortFree( pxTCB );
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fecd 	bl	8006dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800602e:	e017      	b.n	8006060 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006036:	2b01      	cmp	r3, #1
 8006038:	d103      	bne.n	8006042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fec4 	bl	8006dc8 <vPortFree>
	}
 8006040:	e00e      	b.n	8006060 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006048:	2b02      	cmp	r3, #2
 800604a:	d009      	beq.n	8006060 <prvDeleteTCB+0x54>
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e7fe      	b.n	800605e <prvDeleteTCB+0x52>
	}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <prvResetNextTaskUnblockTime+0x40>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <prvResetNextTaskUnblockTime+0x14>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <prvResetNextTaskUnblockTime+0x16>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <prvResetNextTaskUnblockTime+0x44>)
 8006084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006088:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800608a:	e008      	b.n	800609e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <prvResetNextTaskUnblockTime+0x40>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4a04      	ldr	r2, [pc, #16]	; (80060ac <prvResetNextTaskUnblockTime+0x44>)
 800609c:	6013      	str	r3, [r2, #0]
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	20000d8c 	.word	0x20000d8c
 80060ac:	20000df4 	.word	0x20000df4

080060b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <xTaskGetSchedulerState+0x34>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d102      	bne.n	80060c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060be:	2301      	movs	r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	e008      	b.n	80060d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c4:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <xTaskGetSchedulerState+0x38>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060cc:	2302      	movs	r3, #2
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	e001      	b.n	80060d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060d6:	687b      	ldr	r3, [r7, #4]
	}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000de0 	.word	0x20000de0
 80060e8:	20000dfc 	.word	0x20000dfc

080060ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d054      	beq.n	80061ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006102:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <xTaskPriorityDisinherit+0xcc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	429a      	cmp	r2, r3
 800610a:	d009      	beq.n	8006120 <xTaskPriorityDisinherit+0x34>
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e7fe      	b.n	800611e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <xTaskPriorityDisinherit+0x50>
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	e7fe      	b.n	800613a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006140:	1e5a      	subs	r2, r3, #1
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	429a      	cmp	r2, r3
 8006150:	d02c      	beq.n	80061ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006156:	2b00      	cmp	r3, #0
 8006158:	d128      	bne.n	80061ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3304      	adds	r3, #4
 800615e:	4618      	mov	r0, r3
 8006160:	f7fe fca2 	bl	8004aa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <xTaskPriorityDisinherit+0xd0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d903      	bls.n	800618c <xTaskPriorityDisinherit+0xa0>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4a0c      	ldr	r2, [pc, #48]	; (80061bc <xTaskPriorityDisinherit+0xd0>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <xTaskPriorityDisinherit+0xd4>)
 800619a:	441a      	add	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	3304      	adds	r3, #4
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe fc25 	bl	80049f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061ac:	697b      	ldr	r3, [r7, #20]
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000900 	.word	0x20000900
 80061bc:	20000ddc 	.word	0x20000ddc
 80061c0:	20000904 	.word	0x20000904

080061c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b21      	ldr	r3, [pc, #132]	; (8006254 <prvAddCurrentTaskToDelayedList+0x90>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fc64 	bl	8004aa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e6:	d10a      	bne.n	80061fe <prvAddCurrentTaskToDelayedList+0x3a>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4819      	ldr	r0, [pc, #100]	; (800625c <prvAddCurrentTaskToDelayedList+0x98>)
 80061f8:	f7fe fbfb 	bl	80049f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061fc:	e026      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	429a      	cmp	r2, r3
 8006214:	d209      	bcs.n	800622a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006216:	4b12      	ldr	r3, [pc, #72]	; (8006260 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe fc08 	bl	8004a38 <vListInsert>
}
 8006228:	e010      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <prvAddCurrentTaskToDelayedList+0x94>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fbfe 	bl	8004a38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d202      	bcs.n	800624c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006246:	4a08      	ldr	r2, [pc, #32]	; (8006268 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000dd8 	.word	0x20000dd8
 8006258:	20000900 	.word	0x20000900
 800625c:	20000dc0 	.word	0x20000dc0
 8006260:	20000d90 	.word	0x20000d90
 8006264:	20000d8c 	.word	0x20000d8c
 8006268:	20000df4 	.word	0x20000df4

0800626c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08a      	sub	sp, #40	; 0x28
 8006270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006276:	f000 fac3 	bl	8006800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800627a:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <xTimerCreateTimerTask+0x80>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d021      	beq.n	80062c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800628a:	1d3a      	adds	r2, r7, #4
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fb67 	bl	8004968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	2302      	movs	r3, #2
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	460a      	mov	r2, r1
 80062ac:	4910      	ldr	r1, [pc, #64]	; (80062f0 <xTimerCreateTimerTask+0x84>)
 80062ae:	4811      	ldr	r0, [pc, #68]	; (80062f4 <xTimerCreateTimerTask+0x88>)
 80062b0:	f7ff f8f8 	bl	80054a4 <xTaskCreateStatic>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <xTimerCreateTimerTask+0x8c>)
 80062b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <xTimerCreateTimerTask+0x8c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062c2:	2301      	movs	r3, #1
 80062c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xTimerCreateTimerTask+0x74>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	e7fe      	b.n	80062de <xTimerCreateTimerTask+0x72>
	return xReturn;
 80062e0:	697b      	ldr	r3, [r7, #20]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000e30 	.word	0x20000e30
 80062f0:	08008ad8 	.word	0x08008ad8
 80062f4:	08006415 	.word	0x08006415
 80062f8:	20000e34 	.word	0x20000e34

080062fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d109      	bne.n	8006328 <xTimerGenericCommand+0x2c>
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	623b      	str	r3, [r7, #32]
 8006326:	e7fe      	b.n	8006326 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006328:	4b19      	ldr	r3, [pc, #100]	; (8006390 <xTimerGenericCommand+0x94>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02a      	beq.n	8006386 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b05      	cmp	r3, #5
 8006340:	dc18      	bgt.n	8006374 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006342:	f7ff feb5 	bl	80060b0 <xTaskGetSchedulerState>
 8006346:	4603      	mov	r3, r0
 8006348:	2b02      	cmp	r3, #2
 800634a:	d109      	bne.n	8006360 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTimerGenericCommand+0x94>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	f107 0110 	add.w	r1, r7, #16
 8006354:	2300      	movs	r3, #0
 8006356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006358:	f7fe fcce 	bl	8004cf8 <xQueueGenericSend>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24
 800635e:	e012      	b.n	8006386 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <xTimerGenericCommand+0x94>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	f107 0110 	add.w	r1, r7, #16
 8006368:	2300      	movs	r3, #0
 800636a:	2200      	movs	r2, #0
 800636c:	f7fe fcc4 	bl	8004cf8 <xQueueGenericSend>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24
 8006372:	e008      	b.n	8006386 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006374:	4b06      	ldr	r3, [pc, #24]	; (8006390 <xTimerGenericCommand+0x94>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	f107 0110 	add.w	r1, r7, #16
 800637c:	2300      	movs	r3, #0
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	f7fe fdb4 	bl	8004eec <xQueueGenericSendFromISR>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	; 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20000e30 	.word	0x20000e30

08006394 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <prvProcessExpiredTimer+0x7c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fb7b 	bl	8004aa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d121      	bne.n	80063fe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	18d1      	adds	r1, r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	6978      	ldr	r0, [r7, #20]
 80063c8:	f000 f8c8 	bl	800655c <prvInsertTimerInActiveList>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d015      	beq.n	80063fe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d2:	2300      	movs	r3, #0
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	2300      	movs	r3, #0
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	2100      	movs	r1, #0
 80063dc:	6978      	ldr	r0, [r7, #20]
 80063de:	f7ff ff8d 	bl	80062fc <xTimerGenericCommand>
 80063e2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvProcessExpiredTimer+0x6a>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e7fe      	b.n	80063fc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	4798      	blx	r3
}
 8006406:	bf00      	nop
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000e28 	.word	0x20000e28

08006414 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800641c:	f107 0308 	add.w	r3, r7, #8
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f857 	bl	80064d4 <prvGetNextExpireTime>
 8006426:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4619      	mov	r1, r3
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f803 	bl	8006438 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006432:	f000 f8d5 	bl	80065e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006436:	e7f1      	b.n	800641c <prvTimerTask+0x8>

08006438 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006442:	f7ff fa5b 	bl	80058fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f866 	bl	800651c <prvSampleTimeNow>
 8006450:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d130      	bne.n	80064ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	429a      	cmp	r2, r3
 8006464:	d806      	bhi.n	8006474 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006466:	f7ff fa57 	bl	8005918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff91 	bl	8006394 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006472:	e024      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <prvProcessTimerOrBlockTask+0x90>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
 8006486:	2300      	movne	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <prvProcessTimerOrBlockTask+0x94>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	f7fe ffcf 	bl	800543c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800649e:	f7ff fa3b 	bl	8005918 <xTaskResumeAll>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <prvProcessTimerOrBlockTask+0x98>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
}
 80064b8:	e001      	b.n	80064be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064ba:	f7ff fa2d 	bl	8005918 <xTaskResumeAll>
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000e2c 	.word	0x20000e2c
 80064cc:	20000e30 	.word	0x20000e30
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064dc:	4b0e      	ldr	r3, [pc, #56]	; (8006518 <prvGetNextExpireTime+0x44>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064fa:	4b07      	ldr	r3, [pc, #28]	; (8006518 <prvGetNextExpireTime+0x44>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e001      	b.n	800650a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	20000e28 	.word	0x20000e28

0800651c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006524:	f7ff fa94 	bl	8005a50 <xTaskGetTickCount>
 8006528:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <prvSampleTimeNow+0x3c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d205      	bcs.n	8006540 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006534:	f000 f904 	bl	8006740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e002      	b.n	8006546 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006546:	4a04      	ldr	r2, [pc, #16]	; (8006558 <prvSampleTimeNow+0x3c>)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800654c:	68fb      	ldr	r3, [r7, #12]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000e38 	.word	0x20000e38

0800655c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d812      	bhi.n	80065a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e01b      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <prvInsertTimerInActiveList+0x7c>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe fa49 	bl	8004a38 <vListInsert>
 80065a6:	e012      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d206      	bcs.n	80065be <prvInsertTimerInActiveList+0x62>
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d302      	bcc.n	80065be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065b8:	2301      	movs	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e007      	b.n	80065ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <prvInsertTimerInActiveList+0x80>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f7fe fa35 	bl	8004a38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000e2c 	.word	0x20000e2c
 80065dc:	20000e28 	.word	0x20000e28

080065e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	; 0x38
 80065e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065e6:	e099      	b.n	800671c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da17      	bge.n	800661e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	3304      	adds	r3, #4
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <prvProcessReceivedCommands+0x2e>
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e7fe      	b.n	800660c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006614:	6850      	ldr	r0, [r2, #4]
 8006616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006618:	6892      	ldr	r2, [r2, #8]
 800661a:	4611      	mov	r1, r2
 800661c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	db7a      	blt.n	800671a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	3304      	adds	r3, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fa37 	bl	8004aa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800663a:	463b      	mov	r3, r7
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff ff6d 	bl	800651c <prvSampleTimeNow>
 8006642:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b09      	cmp	r3, #9
 8006648:	d868      	bhi.n	800671c <prvProcessReceivedCommands+0x13c>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <prvProcessReceivedCommands+0x70>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006679 	.word	0x08006679
 8006654:	08006679 	.word	0x08006679
 8006658:	08006679 	.word	0x08006679
 800665c:	0800671d 	.word	0x0800671d
 8006660:	080066d3 	.word	0x080066d3
 8006664:	08006709 	.word	0x08006709
 8006668:	08006679 	.word	0x08006679
 800666c:	08006679 	.word	0x08006679
 8006670:	0800671d 	.word	0x0800671d
 8006674:	080066d3 	.word	0x080066d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	18d1      	adds	r1, r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006686:	f7ff ff69 	bl	800655c <prvInsertTimerInActiveList>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d045      	beq.n	800671c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006696:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d13d      	bne.n	800671c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	441a      	add	r2, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	2100      	movs	r1, #0
 80066b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066b2:	f7ff fe23 	bl	80062fc <xTimerGenericCommand>
 80066b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d12e      	bne.n	800671c <prvProcessReceivedCommands+0x13c>
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e7fe      	b.n	80066d0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <prvProcessReceivedCommands+0x114>
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	e7fe      	b.n	80066f2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	699a      	ldr	r2, [r3, #24]
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	18d1      	adds	r1, r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f7ff ff2b 	bl	800655c <prvInsertTimerInActiveList>
					break;
 8006706:	e009      	b.n	800671c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006714:	f000 fb58 	bl	8006dc8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006718:	e000      	b.n	800671c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800671a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvProcessReceivedCommands+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1d39      	adds	r1, r7, #4
 8006722:	2200      	movs	r2, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fc75 	bl	8005014 <xQueueReceive>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	f47f af5b 	bne.w	80065e8 <prvProcessReceivedCommands+0x8>
	}
}
 8006732:	bf00      	nop
 8006734:	3730      	adds	r7, #48	; 0x30
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000e30 	.word	0x20000e30

08006740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006746:	e044      	b.n	80067d2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006748:	4b2b      	ldr	r3, [pc, #172]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006752:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe f9a1 	bl	8004aa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d12d      	bne.n	80067d2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	429a      	cmp	r2, r3
 8006786:	d90e      	bls.n	80067a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006794:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fe f94a 	bl	8004a38 <vListInsert>
 80067a4:	e015      	b.n	80067d2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067a6:	2300      	movs	r3, #0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2300      	movs	r3, #0
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	2100      	movs	r1, #0
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fda3 	bl	80062fc <xTimerGenericCommand>
 80067b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <prvSwitchTimerLists+0x92>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	e7fe      	b.n	80067d0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d2:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1b5      	bne.n	8006748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <prvSwitchTimerLists+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <prvSwitchTimerLists+0xb8>)
 80067e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067ea:	4a04      	ldr	r2, [pc, #16]	; (80067fc <prvSwitchTimerLists+0xbc>)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6013      	str	r3, [r2, #0]
}
 80067f0:	bf00      	nop
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000e28 	.word	0x20000e28
 80067fc:	20000e2c 	.word	0x20000e2c

08006800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006806:	f000 f927 	bl	8006a58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <prvCheckForValidListAndQueue+0x60>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d120      	bne.n	8006854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006812:	4814      	ldr	r0, [pc, #80]	; (8006864 <prvCheckForValidListAndQueue+0x64>)
 8006814:	f7fe f8c2 	bl	800499c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006818:	4813      	ldr	r0, [pc, #76]	; (8006868 <prvCheckForValidListAndQueue+0x68>)
 800681a:	f7fe f8bf 	bl	800499c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <prvCheckForValidListAndQueue+0x6c>)
 8006820:	4a10      	ldr	r2, [pc, #64]	; (8006864 <prvCheckForValidListAndQueue+0x64>)
 8006822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006824:	4b12      	ldr	r3, [pc, #72]	; (8006870 <prvCheckForValidListAndQueue+0x70>)
 8006826:	4a10      	ldr	r2, [pc, #64]	; (8006868 <prvCheckForValidListAndQueue+0x68>)
 8006828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800682a:	2300      	movs	r3, #0
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	4b11      	ldr	r3, [pc, #68]	; (8006874 <prvCheckForValidListAndQueue+0x74>)
 8006830:	4a11      	ldr	r2, [pc, #68]	; (8006878 <prvCheckForValidListAndQueue+0x78>)
 8006832:	2110      	movs	r1, #16
 8006834:	200a      	movs	r0, #10
 8006836:	f7fe f9c9 	bl	8004bcc <xQueueGenericCreateStatic>
 800683a:	4602      	mov	r2, r0
 800683c:	4b08      	ldr	r3, [pc, #32]	; (8006860 <prvCheckForValidListAndQueue+0x60>)
 800683e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <prvCheckForValidListAndQueue+0x60>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <prvCheckForValidListAndQueue+0x60>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	490b      	ldr	r1, [pc, #44]	; (800687c <prvCheckForValidListAndQueue+0x7c>)
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fdcc 	bl	80053ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006854:	f000 f92e 	bl	8006ab4 <vPortExitCritical>
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000e30 	.word	0x20000e30
 8006864:	20000e00 	.word	0x20000e00
 8006868:	20000e14 	.word	0x20000e14
 800686c:	20000e28 	.word	0x20000e28
 8006870:	20000e2c 	.word	0x20000e2c
 8006874:	20000edc 	.word	0x20000edc
 8006878:	20000e3c 	.word	0x20000e3c
 800687c:	08008ae0 	.word	0x08008ae0

08006880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b04      	subs	r3, #4
 8006890:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b04      	subs	r3, #4
 800689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b04      	subs	r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <pxPortInitialiseStack+0x54>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3b14      	subs	r3, #20
 80068ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3b20      	subs	r3, #32
 80068c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068c8:	68fb      	ldr	r3, [r7, #12]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr
 80068d4:	080068d9 	.word	0x080068d9

080068d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068e2:	4b10      	ldr	r3, [pc, #64]	; (8006924 <prvTaskExitError+0x4c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ea:	d009      	beq.n	8006900 <prvTaskExitError+0x28>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e7fe      	b.n	80068fe <prvTaskExitError+0x26>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006912:	bf00      	nop
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0fc      	beq.n	8006914 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr
 8006924:	20000034 	.word	0x20000034
	...

08006930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <pxCurrentTCBConst2>)
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	6808      	ldr	r0, [r1, #0]
 8006936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800693a:	f380 8809 	msr	PSP, r0
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8811 	msr	BASEPRI, r0
 800694a:	f04e 0e0d 	orr.w	lr, lr, #13
 800694e:	4770      	bx	lr

08006950 <pxCurrentTCBConst2>:
 8006950:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006958:	4806      	ldr	r0, [pc, #24]	; (8006974 <prvPortStartFirstTask+0x1c>)
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f380 8808 	msr	MSP, r0
 8006962:	b662      	cpsie	i
 8006964:	b661      	cpsie	f
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	df00      	svc	0
 8006970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006972:	bf00      	nop
 8006974:	e000ed08 	.word	0xe000ed08

08006978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800697e:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <xPortStartScheduler+0xcc>)
 8006980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	22ff      	movs	r2, #255	; 0xff
 800698e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	4b29      	ldr	r3, [pc, #164]	; (8006a48 <xPortStartScheduler+0xd0>)
 80069a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069a6:	4b29      	ldr	r3, [pc, #164]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069a8:	2207      	movs	r2, #7
 80069aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ac:	e009      	b.n	80069c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069ae:	4b27      	ldr	r3, [pc, #156]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b80      	cmp	r3, #128	; 0x80
 80069cc:	d0ef      	beq.n	80069ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069ce:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1c3 0307 	rsb	r3, r3, #7
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d009      	beq.n	80069ee <xPortStartScheduler+0x76>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	e7fe      	b.n	80069ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069ee:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069f8:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <xPortStartScheduler+0xd4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a00:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <xPortStartScheduler+0xd4>)
 8006a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a0c:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <xPortStartScheduler+0xd8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0f      	ldr	r2, [pc, #60]	; (8006a50 <xPortStartScheduler+0xd8>)
 8006a12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <xPortStartScheduler+0xd8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <xPortStartScheduler+0xd8>)
 8006a1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a24:	f000 f8b0 	bl	8006b88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <xPortStartScheduler+0xdc>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a2e:	f7ff ff93 	bl	8006958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a32:	f7ff f8d9 	bl	8005be8 <vTaskSwitchContext>
	prvTaskExitError();
 8006a36:	f7ff ff4f 	bl	80068d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000e400 	.word	0xe000e400
 8006a48:	20000f2c 	.word	0x20000f2c
 8006a4c:	20000f30 	.word	0x20000f30
 8006a50:	e000ed20 	.word	0xe000ed20
 8006a54:	20000034 	.word	0x20000034

08006a58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <vPortEnterCritical+0x54>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <vPortEnterCritical+0x54>)
 8006a78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <vPortEnterCritical+0x54>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10e      	bne.n	8006aa0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <vPortEnterCritical+0x58>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <vPortEnterCritical+0x48>
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	e7fe      	b.n	8006a9e <vPortEnterCritical+0x46>
	}
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000034 	.word	0x20000034
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <vPortExitCritical+0x48>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <vPortExitCritical+0x22>
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	e7fe      	b.n	8006ad4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <vPortExitCritical+0x48>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	4a07      	ldr	r2, [pc, #28]	; (8006afc <vPortExitCritical+0x48>)
 8006ade:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <vPortExitCritical+0x48>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <vPortExitCritical+0x3e>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	20000034 	.word	0x20000034

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b10:	6010      	str	r0, [r2, #0]
 8006b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b1a:	f380 8811 	msr	BASEPRI, r0
 8006b1e:	f7ff f863 	bl	8005be8 <vTaskSwitchContext>
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b2e:	6819      	ldr	r1, [r3, #0]
 8006b30:	6808      	ldr	r0, [r1, #0]
 8006b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b36:	f380 8809 	msr	PSP, r0
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	4770      	bx	lr

08006b40 <pxCurrentTCBConst>:
 8006b40:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b60:	f7fe ff84 	bl	8005a6c <xTaskIncrementTick>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b6a:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <SysTick_Handler+0x3c>)
 8006b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	2300      	movs	r3, #0
 8006b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <vPortSetupTimerInterrupt+0x30>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <vPortSetupTimerInterrupt+0x34>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b98:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <vPortSetupTimerInterrupt+0x38>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <vPortSetupTimerInterrupt+0x3c>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	099b      	lsrs	r3, r3, #6
 8006ba4:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <vPortSetupTimerInterrupt+0x40>)
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <vPortSetupTimerInterrupt+0x30>)
 8006bac:	2207      	movs	r2, #7
 8006bae:	601a      	str	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	e000e010 	.word	0xe000e010
 8006bbc:	e000e018 	.word	0xe000e018
 8006bc0:	20000028 	.word	0x20000028
 8006bc4:	10624dd3 	.word	0x10624dd3
 8006bc8:	e000e014 	.word	0xe000e014

08006bcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bd2:	f3ef 8305 	mrs	r3, IPSR
 8006bd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b0f      	cmp	r3, #15
 8006bdc:	d913      	bls.n	8006c06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bde:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <vPortValidateInterruptPriority+0x68>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be8:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <vPortValidateInterruptPriority+0x6c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	7afa      	ldrb	r2, [r7, #11]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d209      	bcs.n	8006c06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
 8006c04:	e7fe      	b.n	8006c04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <vPortValidateInterruptPriority+0x70>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <vPortValidateInterruptPriority+0x74>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d909      	bls.n	8006c2a <vPortValidateInterruptPriority+0x5e>
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	e7fe      	b.n	8006c28 <vPortValidateInterruptPriority+0x5c>
	}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr
 8006c34:	e000e3f0 	.word	0xe000e3f0
 8006c38:	20000f2c 	.word	0x20000f2c
 8006c3c:	e000ed0c 	.word	0xe000ed0c
 8006c40:	20000f30 	.word	0x20000f30

08006c44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c50:	f7fe fe54 	bl	80058fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c54:	4b57      	ldr	r3, [pc, #348]	; (8006db4 <pvPortMalloc+0x170>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c5c:	f000 f90c 	bl	8006e78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c60:	4b55      	ldr	r3, [pc, #340]	; (8006db8 <pvPortMalloc+0x174>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 808c 	bne.w	8006d86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01c      	beq.n	8006cae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c74:	2208      	movs	r2, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d013      	beq.n	8006cae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <pvPortMalloc+0x6a>
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e7fe      	b.n	8006cac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d068      	beq.n	8006d86 <pvPortMalloc+0x142>
 8006cb4:	4b41      	ldr	r3, [pc, #260]	; (8006dbc <pvPortMalloc+0x178>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d863      	bhi.n	8006d86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cbe:	4b40      	ldr	r3, [pc, #256]	; (8006dc0 <pvPortMalloc+0x17c>)
 8006cc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cc2:	4b3f      	ldr	r3, [pc, #252]	; (8006dc0 <pvPortMalloc+0x17c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc8:	e004      	b.n	8006cd4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <pvPortMalloc+0xa2>
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f1      	bne.n	8006cca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ce6:	4b33      	ldr	r3, [pc, #204]	; (8006db4 <pvPortMalloc+0x170>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d04a      	beq.n	8006d86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2208      	movs	r2, #8
 8006cf6:	4413      	add	r3, r2
 8006cf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d91e      	bls.n	8006d50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <pvPortMalloc+0xf4>
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	e7fe      	b.n	8006d36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d4a:	69b8      	ldr	r0, [r7, #24]
 8006d4c:	f000 f8f6 	bl	8006f3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d50:	4b1a      	ldr	r3, [pc, #104]	; (8006dbc <pvPortMalloc+0x178>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <pvPortMalloc+0x178>)
 8006d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <pvPortMalloc+0x178>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b18      	ldr	r3, [pc, #96]	; (8006dc4 <pvPortMalloc+0x180>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d203      	bcs.n	8006d72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d6a:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <pvPortMalloc+0x178>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <pvPortMalloc+0x180>)
 8006d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <pvPortMalloc+0x174>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d86:	f7fe fdc7 	bl	8005918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <pvPortMalloc+0x164>
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	e7fe      	b.n	8006da6 <pvPortMalloc+0x162>
	return pvReturn;
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3728      	adds	r7, #40	; 0x28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20001b3c 	.word	0x20001b3c
 8006db8:	20001b48 	.word	0x20001b48
 8006dbc:	20001b40 	.word	0x20001b40
 8006dc0:	20001b34 	.word	0x20001b34
 8006dc4:	20001b44 	.word	0x20001b44

08006dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d046      	beq.n	8006e68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dda:	2308      	movs	r3, #8
 8006ddc:	425b      	negs	r3, r3
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <vPortFree+0xa8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <vPortFree+0x42>
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	e7fe      	b.n	8006e08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <vPortFree+0x5e>
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	e7fe      	b.n	8006e24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <vPortFree+0xa8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d019      	beq.n	8006e68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d115      	bne.n	8006e68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <vPortFree+0xa8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	401a      	ands	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e4c:	f7fe fd56 	bl	80058fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <vPortFree+0xac>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4413      	add	r3, r2
 8006e5a:	4a06      	ldr	r2, [pc, #24]	; (8006e74 <vPortFree+0xac>)
 8006e5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f000 f86c 	bl	8006f3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e64:	f7fe fd58 	bl	8005918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20001b48 	.word	0x20001b48
 8006e74:	20001b40 	.word	0x20001b40

08006e78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e84:	4b27      	ldr	r3, [pc, #156]	; (8006f24 <prvHeapInit+0xac>)
 8006e86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3307      	adds	r3, #7
 8006e96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <prvHeapInit+0xac>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	; (8006f28 <prvHeapInit+0xb0>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb6:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <prvHeapInit+0xb0>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0307 	bic.w	r3, r3, #7
 8006ed2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4a15      	ldr	r2, [pc, #84]	; (8006f2c <prvHeapInit+0xb4>)
 8006ed8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <prvHeapInit+0xb4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <prvHeapInit+0xb4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	1ad2      	subs	r2, r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <prvHeapInit+0xb4>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <prvHeapInit+0xb8>)
 8006f06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <prvHeapInit+0xbc>)
 8006f0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <prvHeapInit+0xc0>)
 8006f12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000f34 	.word	0x20000f34
 8006f28:	20001b34 	.word	0x20001b34
 8006f2c:	20001b3c 	.word	0x20001b3c
 8006f30:	20001b44 	.word	0x20001b44
 8006f34:	20001b40 	.word	0x20001b40
 8006f38:	20001b48 	.word	0x20001b48

08006f3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f44:	4b27      	ldr	r3, [pc, #156]	; (8006fe4 <prvInsertBlockIntoFreeList+0xa8>)
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e002      	b.n	8006f50 <prvInsertBlockIntoFreeList+0x14>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d8f7      	bhi.n	8006f4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d108      	bne.n	8006f7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	441a      	add	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d118      	bne.n	8006fc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <prvInsertBlockIntoFreeList+0xac>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d00d      	beq.n	8006fba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e008      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <prvInsertBlockIntoFreeList+0xac>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e003      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d002      	beq.n	8006fda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	20001b34 	.word	0x20001b34
 8006fe8:	20001b3c 	.word	0x20001b3c

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000038 	.word	0x20000038

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	2500      	movs	r5, #0
 8006ffc:	4e0c      	ldr	r6, [pc, #48]	; (8007030 <__libc_init_array+0x38>)
 8006ffe:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8007000:	1ba4      	subs	r4, r4, r6
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	42a5      	cmp	r5, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	f001 fd3a 	bl	8008a80 <_init>
 800700c:	2500      	movs	r5, #0
 800700e:	4e0a      	ldr	r6, [pc, #40]	; (8007038 <__libc_init_array+0x40>)
 8007010:	4c0a      	ldr	r4, [pc, #40]	; (800703c <__libc_init_array+0x44>)
 8007012:	1ba4      	subs	r4, r4, r6
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	42a5      	cmp	r5, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007020:	4798      	blx	r3
 8007022:	3501      	adds	r5, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800702a:	4798      	blx	r3
 800702c:	3501      	adds	r5, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08008d98 	.word	0x08008d98
 8007034:	08008d98 	.word	0x08008d98
 8007038:	08008d98 	.word	0x08008d98
 800703c:	08008d9c 	.word	0x08008d9c

08007040 <memcpy>:
 8007040:	b510      	push	{r4, lr}
 8007042:	1e43      	subs	r3, r0, #1
 8007044:	440a      	add	r2, r1
 8007046:	4291      	cmp	r1, r2
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	bd10      	pop	{r4, pc}
 800704c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007054:	e7f7      	b.n	8007046 <memcpy+0x6>

08007056 <memset>:
 8007056:	4603      	mov	r3, r0
 8007058:	4402      	add	r2, r0
 800705a:	4293      	cmp	r3, r2
 800705c:	d100      	bne.n	8007060 <memset+0xa>
 800705e:	4770      	bx	lr
 8007060:	f803 1b01 	strb.w	r1, [r3], #1
 8007064:	e7f9      	b.n	800705a <memset+0x4>

08007066 <__cvt>:
 8007066:	2b00      	cmp	r3, #0
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	461e      	mov	r6, r3
 800706e:	bfbb      	ittet	lt
 8007070:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007074:	461e      	movlt	r6, r3
 8007076:	2300      	movge	r3, #0
 8007078:	232d      	movlt	r3, #45	; 0x2d
 800707a:	b088      	sub	sp, #32
 800707c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800707e:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007082:	f027 0720 	bic.w	r7, r7, #32
 8007086:	2f46      	cmp	r7, #70	; 0x46
 8007088:	4614      	mov	r4, r2
 800708a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800708c:	700b      	strb	r3, [r1, #0]
 800708e:	d004      	beq.n	800709a <__cvt+0x34>
 8007090:	2f45      	cmp	r7, #69	; 0x45
 8007092:	d100      	bne.n	8007096 <__cvt+0x30>
 8007094:	3501      	adds	r5, #1
 8007096:	2302      	movs	r3, #2
 8007098:	e000      	b.n	800709c <__cvt+0x36>
 800709a:	2303      	movs	r3, #3
 800709c:	aa07      	add	r2, sp, #28
 800709e:	9204      	str	r2, [sp, #16]
 80070a0:	aa06      	add	r2, sp, #24
 80070a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070a6:	e9cd 3500 	strd	r3, r5, [sp]
 80070aa:	4622      	mov	r2, r4
 80070ac:	4633      	mov	r3, r6
 80070ae:	f000 fba7 	bl	8007800 <_dtoa_r>
 80070b2:	2f47      	cmp	r7, #71	; 0x47
 80070b4:	4680      	mov	r8, r0
 80070b6:	d102      	bne.n	80070be <__cvt+0x58>
 80070b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070ba:	07db      	lsls	r3, r3, #31
 80070bc:	d526      	bpl.n	800710c <__cvt+0xa6>
 80070be:	2f46      	cmp	r7, #70	; 0x46
 80070c0:	eb08 0905 	add.w	r9, r8, r5
 80070c4:	d111      	bne.n	80070ea <__cvt+0x84>
 80070c6:	f898 3000 	ldrb.w	r3, [r8]
 80070ca:	2b30      	cmp	r3, #48	; 0x30
 80070cc:	d10a      	bne.n	80070e4 <__cvt+0x7e>
 80070ce:	2200      	movs	r2, #0
 80070d0:	2300      	movs	r3, #0
 80070d2:	4620      	mov	r0, r4
 80070d4:	4631      	mov	r1, r6
 80070d6:	f7f9 fc67 	bl	80009a8 <__aeabi_dcmpeq>
 80070da:	b918      	cbnz	r0, 80070e4 <__cvt+0x7e>
 80070dc:	f1c5 0501 	rsb	r5, r5, #1
 80070e0:	f8ca 5000 	str.w	r5, [sl]
 80070e4:	f8da 3000 	ldr.w	r3, [sl]
 80070e8:	4499      	add	r9, r3
 80070ea:	2200      	movs	r2, #0
 80070ec:	2300      	movs	r3, #0
 80070ee:	4620      	mov	r0, r4
 80070f0:	4631      	mov	r1, r6
 80070f2:	f7f9 fc59 	bl	80009a8 <__aeabi_dcmpeq>
 80070f6:	b938      	cbnz	r0, 8007108 <__cvt+0xa2>
 80070f8:	2230      	movs	r2, #48	; 0x30
 80070fa:	9b07      	ldr	r3, [sp, #28]
 80070fc:	454b      	cmp	r3, r9
 80070fe:	d205      	bcs.n	800710c <__cvt+0xa6>
 8007100:	1c59      	adds	r1, r3, #1
 8007102:	9107      	str	r1, [sp, #28]
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e7f8      	b.n	80070fa <__cvt+0x94>
 8007108:	f8cd 901c 	str.w	r9, [sp, #28]
 800710c:	4640      	mov	r0, r8
 800710e:	9b07      	ldr	r3, [sp, #28]
 8007110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007112:	eba3 0308 	sub.w	r3, r3, r8
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	b008      	add	sp, #32
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800711e <__exponent>:
 800711e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007120:	2900      	cmp	r1, #0
 8007122:	bfb4      	ite	lt
 8007124:	232d      	movlt	r3, #45	; 0x2d
 8007126:	232b      	movge	r3, #43	; 0x2b
 8007128:	4604      	mov	r4, r0
 800712a:	bfb8      	it	lt
 800712c:	4249      	neglt	r1, r1
 800712e:	2909      	cmp	r1, #9
 8007130:	f804 2b02 	strb.w	r2, [r4], #2
 8007134:	7043      	strb	r3, [r0, #1]
 8007136:	dd21      	ble.n	800717c <__exponent+0x5e>
 8007138:	f10d 0307 	add.w	r3, sp, #7
 800713c:	461f      	mov	r7, r3
 800713e:	260a      	movs	r6, #10
 8007140:	fb91 f5f6 	sdiv	r5, r1, r6
 8007144:	fb06 1115 	mls	r1, r6, r5, r1
 8007148:	2d09      	cmp	r5, #9
 800714a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800714e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007152:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007156:	4629      	mov	r1, r5
 8007158:	dc09      	bgt.n	800716e <__exponent+0x50>
 800715a:	3130      	adds	r1, #48	; 0x30
 800715c:	3b02      	subs	r3, #2
 800715e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007162:	42bb      	cmp	r3, r7
 8007164:	4622      	mov	r2, r4
 8007166:	d304      	bcc.n	8007172 <__exponent+0x54>
 8007168:	1a10      	subs	r0, r2, r0
 800716a:	b003      	add	sp, #12
 800716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716e:	4613      	mov	r3, r2
 8007170:	e7e6      	b.n	8007140 <__exponent+0x22>
 8007172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007176:	f804 2b01 	strb.w	r2, [r4], #1
 800717a:	e7f2      	b.n	8007162 <__exponent+0x44>
 800717c:	2330      	movs	r3, #48	; 0x30
 800717e:	4419      	add	r1, r3
 8007180:	7083      	strb	r3, [r0, #2]
 8007182:	1d02      	adds	r2, r0, #4
 8007184:	70c1      	strb	r1, [r0, #3]
 8007186:	e7ef      	b.n	8007168 <__exponent+0x4a>

08007188 <_printf_float>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	b091      	sub	sp, #68	; 0x44
 800718e:	460c      	mov	r4, r1
 8007190:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007192:	4693      	mov	fp, r2
 8007194:	461e      	mov	r6, r3
 8007196:	4605      	mov	r5, r0
 8007198:	f001 f8e6 	bl	8008368 <_localeconv_r>
 800719c:	6803      	ldr	r3, [r0, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	9309      	str	r3, [sp, #36]	; 0x24
 80071a2:	f7f8 ffd5 	bl	8000150 <strlen>
 80071a6:	2300      	movs	r3, #0
 80071a8:	930e      	str	r3, [sp, #56]	; 0x38
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	900a      	str	r0, [sp, #40]	; 0x28
 80071ae:	3307      	adds	r3, #7
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	f103 0208 	add.w	r2, r3, #8
 80071b8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80071bc:	f8d4 a000 	ldr.w	sl, [r4]
 80071c0:	603a      	str	r2, [r7, #0]
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071ca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80071ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071d8:	4ba6      	ldr	r3, [pc, #664]	; (8007474 <_printf_float+0x2ec>)
 80071da:	4638      	mov	r0, r7
 80071dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071de:	f7f9 fc15 	bl	8000a0c <__aeabi_dcmpun>
 80071e2:	bb68      	cbnz	r0, 8007240 <_printf_float+0xb8>
 80071e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e8:	4ba2      	ldr	r3, [pc, #648]	; (8007474 <_printf_float+0x2ec>)
 80071ea:	4638      	mov	r0, r7
 80071ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ee:	f7f9 fbef 	bl	80009d0 <__aeabi_dcmple>
 80071f2:	bb28      	cbnz	r0, 8007240 <_printf_float+0xb8>
 80071f4:	2200      	movs	r2, #0
 80071f6:	2300      	movs	r3, #0
 80071f8:	4638      	mov	r0, r7
 80071fa:	4649      	mov	r1, r9
 80071fc:	f7f9 fbde 	bl	80009bc <__aeabi_dcmplt>
 8007200:	b110      	cbz	r0, 8007208 <_printf_float+0x80>
 8007202:	232d      	movs	r3, #45	; 0x2d
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007208:	4f9b      	ldr	r7, [pc, #620]	; (8007478 <_printf_float+0x2f0>)
 800720a:	4b9c      	ldr	r3, [pc, #624]	; (800747c <_printf_float+0x2f4>)
 800720c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007210:	bf98      	it	ls
 8007212:	461f      	movls	r7, r3
 8007214:	2303      	movs	r3, #3
 8007216:	f04f 0900 	mov.w	r9, #0
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	f02a 0304 	bic.w	r3, sl, #4
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	9600      	str	r6, [sp, #0]
 8007224:	465b      	mov	r3, fp
 8007226:	aa0f      	add	r2, sp, #60	; 0x3c
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f9e2 	bl	80075f4 <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	f040 8090 	bne.w	8007356 <_printf_float+0x1ce>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800723a:	b011      	add	sp, #68	; 0x44
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	463a      	mov	r2, r7
 8007242:	464b      	mov	r3, r9
 8007244:	4638      	mov	r0, r7
 8007246:	4649      	mov	r1, r9
 8007248:	f7f9 fbe0 	bl	8000a0c <__aeabi_dcmpun>
 800724c:	b110      	cbz	r0, 8007254 <_printf_float+0xcc>
 800724e:	4f8c      	ldr	r7, [pc, #560]	; (8007480 <_printf_float+0x2f8>)
 8007250:	4b8c      	ldr	r3, [pc, #560]	; (8007484 <_printf_float+0x2fc>)
 8007252:	e7db      	b.n	800720c <_printf_float+0x84>
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	a80d      	add	r0, sp, #52	; 0x34
 800725e:	a90e      	add	r1, sp, #56	; 0x38
 8007260:	d140      	bne.n	80072e4 <_printf_float+0x15c>
 8007262:	2306      	movs	r3, #6
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	f04f 0c00 	mov.w	ip, #0
 800726a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800726e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	463a      	mov	r2, r7
 800727e:	464b      	mov	r3, r9
 8007280:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007284:	4628      	mov	r0, r5
 8007286:	f7ff feee 	bl	8007066 <__cvt>
 800728a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800728e:	2b47      	cmp	r3, #71	; 0x47
 8007290:	4607      	mov	r7, r0
 8007292:	d109      	bne.n	80072a8 <_printf_float+0x120>
 8007294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007296:	1cd8      	adds	r0, r3, #3
 8007298:	db02      	blt.n	80072a0 <_printf_float+0x118>
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	4293      	cmp	r3, r2
 800729e:	dd47      	ble.n	8007330 <_printf_float+0x1a8>
 80072a0:	f1a8 0802 	sub.w	r8, r8, #2
 80072a4:	fa5f f888 	uxtb.w	r8, r8
 80072a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80072ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072ae:	d824      	bhi.n	80072fa <_printf_float+0x172>
 80072b0:	3901      	subs	r1, #1
 80072b2:	4642      	mov	r2, r8
 80072b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072b8:	910d      	str	r1, [sp, #52]	; 0x34
 80072ba:	f7ff ff30 	bl	800711e <__exponent>
 80072be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072c0:	4681      	mov	r9, r0
 80072c2:	1813      	adds	r3, r2, r0
 80072c4:	2a01      	cmp	r2, #1
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	dc02      	bgt.n	80072d0 <_printf_float+0x148>
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	07d1      	lsls	r1, r2, #31
 80072ce:	d501      	bpl.n	80072d4 <_printf_float+0x14c>
 80072d0:	3301      	adds	r3, #1
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0a2      	beq.n	8007222 <_printf_float+0x9a>
 80072dc:	232d      	movs	r3, #45	; 0x2d
 80072de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e2:	e79e      	b.n	8007222 <_printf_float+0x9a>
 80072e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80072e8:	f000 816e 	beq.w	80075c8 <_printf_float+0x440>
 80072ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072f0:	d1b9      	bne.n	8007266 <_printf_float+0xde>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1b7      	bne.n	8007266 <_printf_float+0xde>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7b4      	b.n	8007264 <_printf_float+0xdc>
 80072fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80072fe:	d119      	bne.n	8007334 <_printf_float+0x1ac>
 8007300:	2900      	cmp	r1, #0
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	dd0c      	ble.n	8007320 <_printf_float+0x198>
 8007306:	6121      	str	r1, [r4, #16]
 8007308:	b913      	cbnz	r3, 8007310 <_printf_float+0x188>
 800730a:	6822      	ldr	r2, [r4, #0]
 800730c:	07d2      	lsls	r2, r2, #31
 800730e:	d502      	bpl.n	8007316 <_printf_float+0x18e>
 8007310:	3301      	adds	r3, #1
 8007312:	440b      	add	r3, r1
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007318:	f04f 0900 	mov.w	r9, #0
 800731c:	65a3      	str	r3, [r4, #88]	; 0x58
 800731e:	e7d9      	b.n	80072d4 <_printf_float+0x14c>
 8007320:	b913      	cbnz	r3, 8007328 <_printf_float+0x1a0>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	07d0      	lsls	r0, r2, #31
 8007326:	d501      	bpl.n	800732c <_printf_float+0x1a4>
 8007328:	3302      	adds	r3, #2
 800732a:	e7f3      	b.n	8007314 <_printf_float+0x18c>
 800732c:	2301      	movs	r3, #1
 800732e:	e7f1      	b.n	8007314 <_printf_float+0x18c>
 8007330:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007334:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007338:	4293      	cmp	r3, r2
 800733a:	db05      	blt.n	8007348 <_printf_float+0x1c0>
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	6123      	str	r3, [r4, #16]
 8007340:	07d1      	lsls	r1, r2, #31
 8007342:	d5e8      	bpl.n	8007316 <_printf_float+0x18e>
 8007344:	3301      	adds	r3, #1
 8007346:	e7e5      	b.n	8007314 <_printf_float+0x18c>
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfcc      	ite	gt
 800734c:	2301      	movgt	r3, #1
 800734e:	f1c3 0302 	rsble	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	e7de      	b.n	8007314 <_printf_float+0x18c>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	055a      	lsls	r2, r3, #21
 800735a:	d407      	bmi.n	800736c <_printf_float+0x1e4>
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	463a      	mov	r2, r7
 8007360:	4659      	mov	r1, fp
 8007362:	4628      	mov	r0, r5
 8007364:	47b0      	blx	r6
 8007366:	3001      	adds	r0, #1
 8007368:	d129      	bne.n	80073be <_printf_float+0x236>
 800736a:	e764      	b.n	8007236 <_printf_float+0xae>
 800736c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007370:	f240 80d7 	bls.w	8007522 <_printf_float+0x39a>
 8007374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	f7f9 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8007380:	b388      	cbz	r0, 80073e6 <_printf_float+0x25e>
 8007382:	2301      	movs	r3, #1
 8007384:	4a40      	ldr	r2, [pc, #256]	; (8007488 <_printf_float+0x300>)
 8007386:	4659      	mov	r1, fp
 8007388:	4628      	mov	r0, r5
 800738a:	47b0      	blx	r6
 800738c:	3001      	adds	r0, #1
 800738e:	f43f af52 	beq.w	8007236 <_printf_float+0xae>
 8007392:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007396:	429a      	cmp	r2, r3
 8007398:	db02      	blt.n	80073a0 <_printf_float+0x218>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	07d8      	lsls	r0, r3, #31
 800739e:	d50e      	bpl.n	80073be <_printf_float+0x236>
 80073a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a4:	4659      	mov	r1, fp
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b0      	blx	r6
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f af43 	beq.w	8007236 <_printf_float+0xae>
 80073b0:	2700      	movs	r7, #0
 80073b2:	f104 081a 	add.w	r8, r4, #26
 80073b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073b8:	3b01      	subs	r3, #1
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	dc09      	bgt.n	80073d2 <_printf_float+0x24a>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	079f      	lsls	r7, r3, #30
 80073c2:	f100 80fd 	bmi.w	80075c0 <_printf_float+0x438>
 80073c6:	68e0      	ldr	r0, [r4, #12]
 80073c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ca:	4298      	cmp	r0, r3
 80073cc:	bfb8      	it	lt
 80073ce:	4618      	movlt	r0, r3
 80073d0:	e733      	b.n	800723a <_printf_float+0xb2>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4642      	mov	r2, r8
 80073d6:	4659      	mov	r1, fp
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f af2a 	beq.w	8007236 <_printf_float+0xae>
 80073e2:	3701      	adds	r7, #1
 80073e4:	e7e7      	b.n	80073b6 <_printf_float+0x22e>
 80073e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc2b      	bgt.n	8007444 <_printf_float+0x2bc>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4a26      	ldr	r2, [pc, #152]	; (8007488 <_printf_float+0x300>)
 80073f0:	4659      	mov	r1, fp
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b0      	blx	r6
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af1d 	beq.w	8007236 <_printf_float+0xae>
 80073fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073fe:	b923      	cbnz	r3, 800740a <_printf_float+0x282>
 8007400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007402:	b913      	cbnz	r3, 800740a <_printf_float+0x282>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d5d9      	bpl.n	80073be <_printf_float+0x236>
 800740a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800740e:	4659      	mov	r1, fp
 8007410:	4628      	mov	r0, r5
 8007412:	47b0      	blx	r6
 8007414:	3001      	adds	r0, #1
 8007416:	f43f af0e 	beq.w	8007236 <_printf_float+0xae>
 800741a:	f04f 0800 	mov.w	r8, #0
 800741e:	f104 091a 	add.w	r9, r4, #26
 8007422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007424:	425b      	negs	r3, r3
 8007426:	4543      	cmp	r3, r8
 8007428:	dc01      	bgt.n	800742e <_printf_float+0x2a6>
 800742a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742c:	e797      	b.n	800735e <_printf_float+0x1d6>
 800742e:	2301      	movs	r3, #1
 8007430:	464a      	mov	r2, r9
 8007432:	4659      	mov	r1, fp
 8007434:	4628      	mov	r0, r5
 8007436:	47b0      	blx	r6
 8007438:	3001      	adds	r0, #1
 800743a:	f43f aefc 	beq.w	8007236 <_printf_float+0xae>
 800743e:	f108 0801 	add.w	r8, r8, #1
 8007442:	e7ee      	b.n	8007422 <_printf_float+0x29a>
 8007444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007448:	429a      	cmp	r2, r3
 800744a:	bfa8      	it	ge
 800744c:	461a      	movge	r2, r3
 800744e:	2a00      	cmp	r2, #0
 8007450:	4690      	mov	r8, r2
 8007452:	dd07      	ble.n	8007464 <_printf_float+0x2dc>
 8007454:	4613      	mov	r3, r2
 8007456:	4659      	mov	r1, fp
 8007458:	463a      	mov	r2, r7
 800745a:	4628      	mov	r0, r5
 800745c:	47b0      	blx	r6
 800745e:	3001      	adds	r0, #1
 8007460:	f43f aee9 	beq.w	8007236 <_printf_float+0xae>
 8007464:	f104 031a 	add.w	r3, r4, #26
 8007468:	f04f 0a00 	mov.w	sl, #0
 800746c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007470:	930b      	str	r3, [sp, #44]	; 0x2c
 8007472:	e015      	b.n	80074a0 <_printf_float+0x318>
 8007474:	7fefffff 	.word	0x7fefffff
 8007478:	08008b70 	.word	0x08008b70
 800747c:	08008b6c 	.word	0x08008b6c
 8007480:	08008b78 	.word	0x08008b78
 8007484:	08008b74 	.word	0x08008b74
 8007488:	08008b7c 	.word	0x08008b7c
 800748c:	2301      	movs	r3, #1
 800748e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007490:	4659      	mov	r1, fp
 8007492:	4628      	mov	r0, r5
 8007494:	47b0      	blx	r6
 8007496:	3001      	adds	r0, #1
 8007498:	f43f aecd 	beq.w	8007236 <_printf_float+0xae>
 800749c:	f10a 0a01 	add.w	sl, sl, #1
 80074a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80074a4:	eba9 0308 	sub.w	r3, r9, r8
 80074a8:	4553      	cmp	r3, sl
 80074aa:	dcef      	bgt.n	800748c <_printf_float+0x304>
 80074ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074b0:	429a      	cmp	r2, r3
 80074b2:	444f      	add	r7, r9
 80074b4:	db14      	blt.n	80074e0 <_printf_float+0x358>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	07da      	lsls	r2, r3, #31
 80074ba:	d411      	bmi.n	80074e0 <_printf_float+0x358>
 80074bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80074c0:	eba3 0209 	sub.w	r2, r3, r9
 80074c4:	eba3 0901 	sub.w	r9, r3, r1
 80074c8:	4591      	cmp	r9, r2
 80074ca:	bfa8      	it	ge
 80074cc:	4691      	movge	r9, r2
 80074ce:	f1b9 0f00 	cmp.w	r9, #0
 80074d2:	dc0d      	bgt.n	80074f0 <_printf_float+0x368>
 80074d4:	2700      	movs	r7, #0
 80074d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074da:	f104 081a 	add.w	r8, r4, #26
 80074de:	e018      	b.n	8007512 <_printf_float+0x38a>
 80074e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e4:	4659      	mov	r1, fp
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b0      	blx	r6
 80074ea:	3001      	adds	r0, #1
 80074ec:	d1e6      	bne.n	80074bc <_printf_float+0x334>
 80074ee:	e6a2      	b.n	8007236 <_printf_float+0xae>
 80074f0:	464b      	mov	r3, r9
 80074f2:	463a      	mov	r2, r7
 80074f4:	4659      	mov	r1, fp
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b0      	blx	r6
 80074fa:	3001      	adds	r0, #1
 80074fc:	d1ea      	bne.n	80074d4 <_printf_float+0x34c>
 80074fe:	e69a      	b.n	8007236 <_printf_float+0xae>
 8007500:	2301      	movs	r3, #1
 8007502:	4642      	mov	r2, r8
 8007504:	4659      	mov	r1, fp
 8007506:	4628      	mov	r0, r5
 8007508:	47b0      	blx	r6
 800750a:	3001      	adds	r0, #1
 800750c:	f43f ae93 	beq.w	8007236 <_printf_float+0xae>
 8007510:	3701      	adds	r7, #1
 8007512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	eba3 0309 	sub.w	r3, r3, r9
 800751c:	42bb      	cmp	r3, r7
 800751e:	dcef      	bgt.n	8007500 <_printf_float+0x378>
 8007520:	e74d      	b.n	80073be <_printf_float+0x236>
 8007522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007524:	2a01      	cmp	r2, #1
 8007526:	dc01      	bgt.n	800752c <_printf_float+0x3a4>
 8007528:	07db      	lsls	r3, r3, #31
 800752a:	d538      	bpl.n	800759e <_printf_float+0x416>
 800752c:	2301      	movs	r3, #1
 800752e:	463a      	mov	r2, r7
 8007530:	4659      	mov	r1, fp
 8007532:	4628      	mov	r0, r5
 8007534:	47b0      	blx	r6
 8007536:	3001      	adds	r0, #1
 8007538:	f43f ae7d 	beq.w	8007236 <_printf_float+0xae>
 800753c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007540:	4659      	mov	r1, fp
 8007542:	4628      	mov	r0, r5
 8007544:	47b0      	blx	r6
 8007546:	3001      	adds	r0, #1
 8007548:	f107 0701 	add.w	r7, r7, #1
 800754c:	f43f ae73 	beq.w	8007236 <_printf_float+0xae>
 8007550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007556:	2200      	movs	r2, #0
 8007558:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800755c:	2300      	movs	r3, #0
 800755e:	f7f9 fa23 	bl	80009a8 <__aeabi_dcmpeq>
 8007562:	b9c0      	cbnz	r0, 8007596 <_printf_float+0x40e>
 8007564:	4643      	mov	r3, r8
 8007566:	463a      	mov	r2, r7
 8007568:	4659      	mov	r1, fp
 800756a:	4628      	mov	r0, r5
 800756c:	47b0      	blx	r6
 800756e:	3001      	adds	r0, #1
 8007570:	d10d      	bne.n	800758e <_printf_float+0x406>
 8007572:	e660      	b.n	8007236 <_printf_float+0xae>
 8007574:	2301      	movs	r3, #1
 8007576:	4642      	mov	r2, r8
 8007578:	4659      	mov	r1, fp
 800757a:	4628      	mov	r0, r5
 800757c:	47b0      	blx	r6
 800757e:	3001      	adds	r0, #1
 8007580:	f43f ae59 	beq.w	8007236 <_printf_float+0xae>
 8007584:	3701      	adds	r7, #1
 8007586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007588:	3b01      	subs	r3, #1
 800758a:	42bb      	cmp	r3, r7
 800758c:	dcf2      	bgt.n	8007574 <_printf_float+0x3ec>
 800758e:	464b      	mov	r3, r9
 8007590:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007594:	e6e4      	b.n	8007360 <_printf_float+0x1d8>
 8007596:	2700      	movs	r7, #0
 8007598:	f104 081a 	add.w	r8, r4, #26
 800759c:	e7f3      	b.n	8007586 <_printf_float+0x3fe>
 800759e:	2301      	movs	r3, #1
 80075a0:	e7e1      	b.n	8007566 <_printf_float+0x3de>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4642      	mov	r2, r8
 80075a6:	4659      	mov	r1, fp
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b0      	blx	r6
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae42 	beq.w	8007236 <_printf_float+0xae>
 80075b2:	3701      	adds	r7, #1
 80075b4:	68e3      	ldr	r3, [r4, #12]
 80075b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075b8:	1a9b      	subs	r3, r3, r2
 80075ba:	42bb      	cmp	r3, r7
 80075bc:	dcf1      	bgt.n	80075a2 <_printf_float+0x41a>
 80075be:	e702      	b.n	80073c6 <_printf_float+0x23e>
 80075c0:	2700      	movs	r7, #0
 80075c2:	f104 0819 	add.w	r8, r4, #25
 80075c6:	e7f5      	b.n	80075b4 <_printf_float+0x42c>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f43f ae94 	beq.w	80072f6 <_printf_float+0x16e>
 80075ce:	f04f 0c00 	mov.w	ip, #0
 80075d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80075d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80075e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	463a      	mov	r2, r7
 80075e8:	464b      	mov	r3, r9
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7ff fd3b 	bl	8007066 <__cvt>
 80075f0:	4607      	mov	r7, r0
 80075f2:	e64f      	b.n	8007294 <_printf_float+0x10c>

080075f4 <_printf_common>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	4691      	mov	r9, r2
 80075fa:	461f      	mov	r7, r3
 80075fc:	688a      	ldr	r2, [r1, #8]
 80075fe:	690b      	ldr	r3, [r1, #16]
 8007600:	4606      	mov	r6, r0
 8007602:	4293      	cmp	r3, r2
 8007604:	bfb8      	it	lt
 8007606:	4613      	movlt	r3, r2
 8007608:	f8c9 3000 	str.w	r3, [r9]
 800760c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007610:	460c      	mov	r4, r1
 8007612:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007616:	b112      	cbz	r2, 800761e <_printf_common+0x2a>
 8007618:	3301      	adds	r3, #1
 800761a:	f8c9 3000 	str.w	r3, [r9]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	0699      	lsls	r1, r3, #26
 8007622:	bf42      	ittt	mi
 8007624:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007628:	3302      	addmi	r3, #2
 800762a:	f8c9 3000 	strmi.w	r3, [r9]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	f015 0506 	ands.w	r5, r5, #6
 8007634:	d107      	bne.n	8007646 <_printf_common+0x52>
 8007636:	f104 0a19 	add.w	sl, r4, #25
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	f8d9 2000 	ldr.w	r2, [r9]
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	42ab      	cmp	r3, r5
 8007644:	dc29      	bgt.n	800769a <_printf_common+0xa6>
 8007646:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	3300      	adds	r3, #0
 800764e:	bf18      	it	ne
 8007650:	2301      	movne	r3, #1
 8007652:	0692      	lsls	r2, r2, #26
 8007654:	d42e      	bmi.n	80076b4 <_printf_common+0xc0>
 8007656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800765a:	4639      	mov	r1, r7
 800765c:	4630      	mov	r0, r6
 800765e:	47c0      	blx	r8
 8007660:	3001      	adds	r0, #1
 8007662:	d021      	beq.n	80076a8 <_printf_common+0xb4>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	68e5      	ldr	r5, [r4, #12]
 8007668:	f003 0306 	and.w	r3, r3, #6
 800766c:	2b04      	cmp	r3, #4
 800766e:	bf18      	it	ne
 8007670:	2500      	movne	r5, #0
 8007672:	f8d9 2000 	ldr.w	r2, [r9]
 8007676:	f04f 0900 	mov.w	r9, #0
 800767a:	bf08      	it	eq
 800767c:	1aad      	subeq	r5, r5, r2
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	bf08      	it	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	4293      	cmp	r3, r2
 800768a:	bfc4      	itt	gt
 800768c:	1a9b      	subgt	r3, r3, r2
 800768e:	18ed      	addgt	r5, r5, r3
 8007690:	341a      	adds	r4, #26
 8007692:	454d      	cmp	r5, r9
 8007694:	d11a      	bne.n	80076cc <_printf_common+0xd8>
 8007696:	2000      	movs	r0, #0
 8007698:	e008      	b.n	80076ac <_printf_common+0xb8>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4639      	mov	r1, r7
 80076a0:	4630      	mov	r0, r6
 80076a2:	47c0      	blx	r8
 80076a4:	3001      	adds	r0, #1
 80076a6:	d103      	bne.n	80076b0 <_printf_common+0xbc>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b0:	3501      	adds	r5, #1
 80076b2:	e7c2      	b.n	800763a <_printf_common+0x46>
 80076b4:	2030      	movs	r0, #48	; 0x30
 80076b6:	18e1      	adds	r1, r4, r3
 80076b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c2:	4422      	add	r2, r4
 80076c4:	3302      	adds	r3, #2
 80076c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ca:	e7c4      	b.n	8007656 <_printf_common+0x62>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4622      	mov	r2, r4
 80076d0:	4639      	mov	r1, r7
 80076d2:	4630      	mov	r0, r6
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d0e6      	beq.n	80076a8 <_printf_common+0xb4>
 80076da:	f109 0901 	add.w	r9, r9, #1
 80076de:	e7d8      	b.n	8007692 <_printf_common+0x9e>

080076e0 <quorem>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	6903      	ldr	r3, [r0, #16]
 80076e6:	690c      	ldr	r4, [r1, #16]
 80076e8:	4680      	mov	r8, r0
 80076ea:	42a3      	cmp	r3, r4
 80076ec:	f2c0 8084 	blt.w	80077f8 <quorem+0x118>
 80076f0:	3c01      	subs	r4, #1
 80076f2:	f101 0714 	add.w	r7, r1, #20
 80076f6:	f100 0614 	add.w	r6, r0, #20
 80076fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80076fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007702:	3501      	adds	r5, #1
 8007704:	fbb0 f5f5 	udiv	r5, r0, r5
 8007708:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800770c:	eb06 030c 	add.w	r3, r6, ip
 8007710:	eb07 090c 	add.w	r9, r7, ip
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	b39d      	cbz	r5, 8007780 <quorem+0xa0>
 8007718:	f04f 0a00 	mov.w	sl, #0
 800771c:	4638      	mov	r0, r7
 800771e:	46b6      	mov	lr, r6
 8007720:	46d3      	mov	fp, sl
 8007722:	f850 2b04 	ldr.w	r2, [r0], #4
 8007726:	b293      	uxth	r3, r2
 8007728:	fb05 a303 	mla	r3, r5, r3, sl
 800772c:	0c12      	lsrs	r2, r2, #16
 800772e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007732:	fb05 a202 	mla	r2, r5, r2, sl
 8007736:	b29b      	uxth	r3, r3
 8007738:	ebab 0303 	sub.w	r3, fp, r3
 800773c:	f8de b000 	ldr.w	fp, [lr]
 8007740:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007744:	fa1f fb8b 	uxth.w	fp, fp
 8007748:	445b      	add	r3, fp
 800774a:	fa1f fb82 	uxth.w	fp, r2
 800774e:	f8de 2000 	ldr.w	r2, [lr]
 8007752:	4581      	cmp	r9, r0
 8007754:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007762:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007766:	f84e 3b04 	str.w	r3, [lr], #4
 800776a:	d2da      	bcs.n	8007722 <quorem+0x42>
 800776c:	f856 300c 	ldr.w	r3, [r6, ip]
 8007770:	b933      	cbnz	r3, 8007780 <quorem+0xa0>
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	3b04      	subs	r3, #4
 8007776:	429e      	cmp	r6, r3
 8007778:	461a      	mov	r2, r3
 800777a:	d331      	bcc.n	80077e0 <quorem+0x100>
 800777c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007780:	4640      	mov	r0, r8
 8007782:	f001 f81b 	bl	80087bc <__mcmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	db26      	blt.n	80077d8 <quorem+0xf8>
 800778a:	4630      	mov	r0, r6
 800778c:	f04f 0c00 	mov.w	ip, #0
 8007790:	3501      	adds	r5, #1
 8007792:	f857 1b04 	ldr.w	r1, [r7], #4
 8007796:	f8d0 e000 	ldr.w	lr, [r0]
 800779a:	b28b      	uxth	r3, r1
 800779c:	ebac 0303 	sub.w	r3, ip, r3
 80077a0:	fa1f f28e 	uxth.w	r2, lr
 80077a4:	4413      	add	r3, r2
 80077a6:	0c0a      	lsrs	r2, r1, #16
 80077a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b6:	45b9      	cmp	r9, r7
 80077b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077bc:	f840 3b04 	str.w	r3, [r0], #4
 80077c0:	d2e7      	bcs.n	8007792 <quorem+0xb2>
 80077c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80077c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80077ca:	b92a      	cbnz	r2, 80077d8 <quorem+0xf8>
 80077cc:	3b04      	subs	r3, #4
 80077ce:	429e      	cmp	r6, r3
 80077d0:	461a      	mov	r2, r3
 80077d2:	d30b      	bcc.n	80077ec <quorem+0x10c>
 80077d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80077d8:	4628      	mov	r0, r5
 80077da:	b003      	add	sp, #12
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	3b04      	subs	r3, #4
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d1c9      	bne.n	800777c <quorem+0x9c>
 80077e8:	3c01      	subs	r4, #1
 80077ea:	e7c4      	b.n	8007776 <quorem+0x96>
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	3b04      	subs	r3, #4
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	d1ef      	bne.n	80077d4 <quorem+0xf4>
 80077f4:	3c01      	subs	r4, #1
 80077f6:	e7ea      	b.n	80077ce <quorem+0xee>
 80077f8:	2000      	movs	r0, #0
 80077fa:	e7ee      	b.n	80077da <quorem+0xfa>
 80077fc:	0000      	movs	r0, r0
	...

08007800 <_dtoa_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	4616      	mov	r6, r2
 8007806:	461f      	mov	r7, r3
 8007808:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800780a:	b095      	sub	sp, #84	; 0x54
 800780c:	4604      	mov	r4, r0
 800780e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007812:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007816:	b93d      	cbnz	r5, 8007828 <_dtoa_r+0x28>
 8007818:	2010      	movs	r0, #16
 800781a:	f000 fdb3 	bl	8008384 <malloc>
 800781e:	6260      	str	r0, [r4, #36]	; 0x24
 8007820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007824:	6005      	str	r5, [r0, #0]
 8007826:	60c5      	str	r5, [r0, #12]
 8007828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800782a:	6819      	ldr	r1, [r3, #0]
 800782c:	b151      	cbz	r1, 8007844 <_dtoa_r+0x44>
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	2301      	movs	r3, #1
 8007832:	4093      	lsls	r3, r2
 8007834:	604a      	str	r2, [r1, #4]
 8007836:	608b      	str	r3, [r1, #8]
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fddf 	bl	80083fc <_Bfree>
 800783e:	2200      	movs	r2, #0
 8007840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	1e3b      	subs	r3, r7, #0
 8007846:	bfaf      	iteee	ge
 8007848:	2300      	movge	r3, #0
 800784a:	2201      	movlt	r2, #1
 800784c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007850:	9303      	strlt	r3, [sp, #12]
 8007852:	bfac      	ite	ge
 8007854:	f8c8 3000 	strge.w	r3, [r8]
 8007858:	f8c8 2000 	strlt.w	r2, [r8]
 800785c:	4bae      	ldr	r3, [pc, #696]	; (8007b18 <_dtoa_r+0x318>)
 800785e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007862:	ea33 0308 	bics.w	r3, r3, r8
 8007866:	d11b      	bne.n	80078a0 <_dtoa_r+0xa0>
 8007868:	f242 730f 	movw	r3, #9999	; 0x270f
 800786c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	b923      	cbnz	r3, 800787e <_dtoa_r+0x7e>
 8007874:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007878:	2800      	cmp	r0, #0
 800787a:	f000 8545 	beq.w	8008308 <_dtoa_r+0xb08>
 800787e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007880:	b953      	cbnz	r3, 8007898 <_dtoa_r+0x98>
 8007882:	4ba6      	ldr	r3, [pc, #664]	; (8007b1c <_dtoa_r+0x31c>)
 8007884:	e021      	b.n	80078ca <_dtoa_r+0xca>
 8007886:	4ba6      	ldr	r3, [pc, #664]	; (8007b20 <_dtoa_r+0x320>)
 8007888:	9306      	str	r3, [sp, #24]
 800788a:	3308      	adds	r3, #8
 800788c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	9806      	ldr	r0, [sp, #24]
 8007892:	b015      	add	sp, #84	; 0x54
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	4ba0      	ldr	r3, [pc, #640]	; (8007b1c <_dtoa_r+0x31c>)
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	3303      	adds	r3, #3
 800789e:	e7f5      	b.n	800788c <_dtoa_r+0x8c>
 80078a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80078b0:	4682      	mov	sl, r0
 80078b2:	b160      	cbz	r0, 80078ce <_dtoa_r+0xce>
 80078b4:	2301      	movs	r3, #1
 80078b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8520 	beq.w	8008302 <_dtoa_r+0xb02>
 80078c2:	4b98      	ldr	r3, [pc, #608]	; (8007b24 <_dtoa_r+0x324>)
 80078c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	9306      	str	r3, [sp, #24]
 80078cc:	e7e0      	b.n	8007890 <_dtoa_r+0x90>
 80078ce:	ab12      	add	r3, sp, #72	; 0x48
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	ab13      	add	r3, sp, #76	; 0x4c
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	4620      	mov	r0, r4
 80078dc:	f000 ffe6 	bl	80088ac <__d2b>
 80078e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078e4:	4683      	mov	fp, r0
 80078e6:	2d00      	cmp	r5, #0
 80078e8:	d07d      	beq.n	80079e6 <_dtoa_r+0x1e6>
 80078ea:	46b0      	mov	r8, r6
 80078ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80078f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80078f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007900:	2200      	movs	r2, #0
 8007902:	4b89      	ldr	r3, [pc, #548]	; (8007b28 <_dtoa_r+0x328>)
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f8 fc2e 	bl	8000168 <__aeabi_dsub>
 800790c:	a37c      	add	r3, pc, #496	; (adr r3, 8007b00 <_dtoa_r+0x300>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fde1 	bl	80004d8 <__aeabi_dmul>
 8007916:	a37c      	add	r3, pc, #496	; (adr r3, 8007b08 <_dtoa_r+0x308>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f8 fc26 	bl	800016c <__adddf3>
 8007920:	4606      	mov	r6, r0
 8007922:	4628      	mov	r0, r5
 8007924:	460f      	mov	r7, r1
 8007926:	f7f8 fd6d 	bl	8000404 <__aeabi_i2d>
 800792a:	a379      	add	r3, pc, #484	; (adr r3, 8007b10 <_dtoa_r+0x310>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f8 fc16 	bl	800016c <__adddf3>
 8007940:	4606      	mov	r6, r0
 8007942:	460f      	mov	r7, r1
 8007944:	f7f9 f878 	bl	8000a38 <__aeabi_d2iz>
 8007948:	2200      	movs	r2, #0
 800794a:	4682      	mov	sl, r0
 800794c:	2300      	movs	r3, #0
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f9 f833 	bl	80009bc <__aeabi_dcmplt>
 8007956:	b148      	cbz	r0, 800796c <_dtoa_r+0x16c>
 8007958:	4650      	mov	r0, sl
 800795a:	f7f8 fd53 	bl	8000404 <__aeabi_i2d>
 800795e:	4632      	mov	r2, r6
 8007960:	463b      	mov	r3, r7
 8007962:	f7f9 f821 	bl	80009a8 <__aeabi_dcmpeq>
 8007966:	b908      	cbnz	r0, 800796c <_dtoa_r+0x16c>
 8007968:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800796c:	f1ba 0f16 	cmp.w	sl, #22
 8007970:	d85a      	bhi.n	8007a28 <_dtoa_r+0x228>
 8007972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007976:	496d      	ldr	r1, [pc, #436]	; (8007b2c <_dtoa_r+0x32c>)
 8007978:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800797c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007980:	f7f9 f83a 	bl	80009f8 <__aeabi_dcmpgt>
 8007984:	2800      	cmp	r0, #0
 8007986:	d051      	beq.n	8007a2c <_dtoa_r+0x22c>
 8007988:	2300      	movs	r3, #0
 800798a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800798e:	930d      	str	r3, [sp, #52]	; 0x34
 8007990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007992:	1b5d      	subs	r5, r3, r5
 8007994:	1e6b      	subs	r3, r5, #1
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	bf43      	ittte	mi
 800799a:	2300      	movmi	r3, #0
 800799c:	f1c5 0901 	rsbmi	r9, r5, #1
 80079a0:	9307      	strmi	r3, [sp, #28]
 80079a2:	f04f 0900 	movpl.w	r9, #0
 80079a6:	f1ba 0f00 	cmp.w	sl, #0
 80079aa:	db41      	blt.n	8007a30 <_dtoa_r+0x230>
 80079ac:	9b07      	ldr	r3, [sp, #28]
 80079ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80079b2:	4453      	add	r3, sl
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9308      	str	r3, [sp, #32]
 80079ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079bc:	2b09      	cmp	r3, #9
 80079be:	f200 808f 	bhi.w	8007ae0 <_dtoa_r+0x2e0>
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	bfc4      	itt	gt
 80079c6:	3b04      	subgt	r3, #4
 80079c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80079ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079cc:	bfc8      	it	gt
 80079ce:	2500      	movgt	r5, #0
 80079d0:	f1a3 0302 	sub.w	r3, r3, #2
 80079d4:	bfd8      	it	le
 80079d6:	2501      	movle	r5, #1
 80079d8:	2b03      	cmp	r3, #3
 80079da:	f200 808d 	bhi.w	8007af8 <_dtoa_r+0x2f8>
 80079de:	e8df f003 	tbb	[pc, r3]
 80079e2:	7d7b      	.short	0x7d7b
 80079e4:	6f2f      	.short	0x6f2f
 80079e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079ea:	441d      	add	r5, r3
 80079ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80079f0:	2820      	cmp	r0, #32
 80079f2:	dd13      	ble.n	8007a1c <_dtoa_r+0x21c>
 80079f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	fa08 f800 	lsl.w	r8, r8, r0
 80079fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007a02:	fa23 f000 	lsr.w	r0, r3, r0
 8007a06:	ea48 0000 	orr.w	r0, r8, r0
 8007a0a:	f7f8 fceb 	bl	80003e4 <__aeabi_ui2d>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4680      	mov	r8, r0
 8007a12:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007a16:	3d01      	subs	r5, #1
 8007a18:	9310      	str	r3, [sp, #64]	; 0x40
 8007a1a:	e771      	b.n	8007900 <_dtoa_r+0x100>
 8007a1c:	9b02      	ldr	r3, [sp, #8]
 8007a1e:	f1c0 0020 	rsb	r0, r0, #32
 8007a22:	fa03 f000 	lsl.w	r0, r3, r0
 8007a26:	e7f0      	b.n	8007a0a <_dtoa_r+0x20a>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e7b0      	b.n	800798e <_dtoa_r+0x18e>
 8007a2c:	900d      	str	r0, [sp, #52]	; 0x34
 8007a2e:	e7af      	b.n	8007990 <_dtoa_r+0x190>
 8007a30:	f1ca 0300 	rsb	r3, sl, #0
 8007a34:	9308      	str	r3, [sp, #32]
 8007a36:	2300      	movs	r3, #0
 8007a38:	eba9 090a 	sub.w	r9, r9, sl
 8007a3c:	930c      	str	r3, [sp, #48]	; 0x30
 8007a3e:	e7bc      	b.n	80079ba <_dtoa_r+0x1ba>
 8007a40:	2301      	movs	r3, #1
 8007a42:	9309      	str	r3, [sp, #36]	; 0x24
 8007a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd74      	ble.n	8007b34 <_dtoa_r+0x334>
 8007a4a:	4698      	mov	r8, r3
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a52:	6072      	str	r2, [r6, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	f102 0014 	add.w	r0, r2, #20
 8007a5a:	4298      	cmp	r0, r3
 8007a5c:	6871      	ldr	r1, [r6, #4]
 8007a5e:	d96e      	bls.n	8007b3e <_dtoa_r+0x33e>
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 fc97 	bl	8008394 <_Balloc>
 8007a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f1b8 0f0e 	cmp.w	r8, #14
 8007a70:	9306      	str	r3, [sp, #24]
 8007a72:	f200 80ed 	bhi.w	8007c50 <_dtoa_r+0x450>
 8007a76:	2d00      	cmp	r5, #0
 8007a78:	f000 80ea 	beq.w	8007c50 <_dtoa_r+0x450>
 8007a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a80:	f1ba 0f00 	cmp.w	sl, #0
 8007a84:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007a88:	dd77      	ble.n	8007b7a <_dtoa_r+0x37a>
 8007a8a:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <_dtoa_r+0x32c>)
 8007a8c:	f00a 030f 	and.w	r3, sl, #15
 8007a90:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007a94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a98:	06f0      	lsls	r0, r6, #27
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007aa2:	d568      	bpl.n	8007b76 <_dtoa_r+0x376>
 8007aa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007aa8:	4b21      	ldr	r3, [pc, #132]	; (8007b30 <_dtoa_r+0x330>)
 8007aaa:	2503      	movs	r5, #3
 8007aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab0:	f7f8 fe3c 	bl	800072c <__aeabi_ddiv>
 8007ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab8:	f006 060f 	and.w	r6, r6, #15
 8007abc:	4f1c      	ldr	r7, [pc, #112]	; (8007b30 <_dtoa_r+0x330>)
 8007abe:	e04f      	b.n	8007b60 <_dtoa_r+0x360>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ac6:	4453      	add	r3, sl
 8007ac8:	f103 0801 	add.w	r8, r3, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	4643      	mov	r3, r8
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	bfb8      	it	lt
 8007ad4:	2301      	movlt	r3, #1
 8007ad6:	e7ba      	b.n	8007a4e <_dtoa_r+0x24e>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e7b2      	b.n	8007a42 <_dtoa_r+0x242>
 8007adc:	2300      	movs	r3, #0
 8007ade:	e7f0      	b.n	8007ac2 <_dtoa_r+0x2c2>
 8007ae0:	2501      	movs	r5, #1
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ae6:	931e      	str	r3, [sp, #120]	; 0x78
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aec:	2200      	movs	r2, #0
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	4698      	mov	r8, r3
 8007af2:	2312      	movs	r3, #18
 8007af4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007af6:	e7aa      	b.n	8007a4e <_dtoa_r+0x24e>
 8007af8:	2301      	movs	r3, #1
 8007afa:	9309      	str	r3, [sp, #36]	; 0x24
 8007afc:	e7f4      	b.n	8007ae8 <_dtoa_r+0x2e8>
 8007afe:	bf00      	nop
 8007b00:	636f4361 	.word	0x636f4361
 8007b04:	3fd287a7 	.word	0x3fd287a7
 8007b08:	8b60c8b3 	.word	0x8b60c8b3
 8007b0c:	3fc68a28 	.word	0x3fc68a28
 8007b10:	509f79fb 	.word	0x509f79fb
 8007b14:	3fd34413 	.word	0x3fd34413
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	08008b87 	.word	0x08008b87
 8007b20:	08008b7e 	.word	0x08008b7e
 8007b24:	08008b7d 	.word	0x08008b7d
 8007b28:	3ff80000 	.word	0x3ff80000
 8007b2c:	08008bb8 	.word	0x08008bb8
 8007b30:	08008b90 	.word	0x08008b90
 8007b34:	2301      	movs	r3, #1
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	4698      	mov	r8, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	e7da      	b.n	8007af4 <_dtoa_r+0x2f4>
 8007b3e:	3101      	adds	r1, #1
 8007b40:	6071      	str	r1, [r6, #4]
 8007b42:	0052      	lsls	r2, r2, #1
 8007b44:	e787      	b.n	8007a56 <_dtoa_r+0x256>
 8007b46:	07f1      	lsls	r1, r6, #31
 8007b48:	d508      	bpl.n	8007b5c <_dtoa_r+0x35c>
 8007b4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b52:	f7f8 fcc1 	bl	80004d8 <__aeabi_dmul>
 8007b56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b5a:	3501      	adds	r5, #1
 8007b5c:	1076      	asrs	r6, r6, #1
 8007b5e:	3708      	adds	r7, #8
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d1f0      	bne.n	8007b46 <_dtoa_r+0x346>
 8007b64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6c:	f7f8 fdde 	bl	800072c <__aeabi_ddiv>
 8007b70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b74:	e01b      	b.n	8007bae <_dtoa_r+0x3ae>
 8007b76:	2502      	movs	r5, #2
 8007b78:	e7a0      	b.n	8007abc <_dtoa_r+0x2bc>
 8007b7a:	f000 80a4 	beq.w	8007cc6 <_dtoa_r+0x4c6>
 8007b7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b82:	f1ca 0600 	rsb	r6, sl, #0
 8007b86:	4ba0      	ldr	r3, [pc, #640]	; (8007e08 <_dtoa_r+0x608>)
 8007b88:	f006 020f 	and.w	r2, r6, #15
 8007b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f7f8 fca0 	bl	80004d8 <__aeabi_dmul>
 8007b98:	2502      	movs	r5, #2
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	4f9a      	ldr	r7, [pc, #616]	; (8007e0c <_dtoa_r+0x60c>)
 8007ba2:	1136      	asrs	r6, r6, #4
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	f040 8083 	bne.w	8007cb0 <_dtoa_r+0x4b0>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e0      	bne.n	8007b70 <_dtoa_r+0x370>
 8007bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 808a 	beq.w	8007cca <_dtoa_r+0x4ca>
 8007bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b92      	ldr	r3, [pc, #584]	; (8007e10 <_dtoa_r+0x610>)
 8007bc6:	f7f8 fef9 	bl	80009bc <__aeabi_dcmplt>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d07d      	beq.n	8007cca <_dtoa_r+0x4ca>
 8007bce:	f1b8 0f00 	cmp.w	r8, #0
 8007bd2:	d07a      	beq.n	8007cca <_dtoa_r+0x4ca>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd36      	ble.n	8007c48 <_dtoa_r+0x448>
 8007bda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bde:	2200      	movs	r2, #0
 8007be0:	4b8c      	ldr	r3, [pc, #560]	; (8007e14 <_dtoa_r+0x614>)
 8007be2:	f7f8 fc79 	bl	80004d8 <__aeabi_dmul>
 8007be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bea:	9e04      	ldr	r6, [sp, #16]
 8007bec:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fc06 	bl	8000404 <__aeabi_i2d>
 8007bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bfc:	f7f8 fc6c 	bl	80004d8 <__aeabi_dmul>
 8007c00:	2200      	movs	r2, #0
 8007c02:	4b85      	ldr	r3, [pc, #532]	; (8007e18 <_dtoa_r+0x618>)
 8007c04:	f7f8 fab2 	bl	800016c <__adddf3>
 8007c08:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007c0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c10:	950b      	str	r5, [sp, #44]	; 0x2c
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d15c      	bne.n	8007cd0 <_dtoa_r+0x4d0>
 8007c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4b7f      	ldr	r3, [pc, #508]	; (8007e1c <_dtoa_r+0x61c>)
 8007c1e:	f7f8 faa3 	bl	8000168 <__aeabi_dsub>
 8007c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c24:	462b      	mov	r3, r5
 8007c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c2a:	f7f8 fee5 	bl	80009f8 <__aeabi_dcmpgt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 8281 	bne.w	8008136 <_dtoa_r+0x936>
 8007c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007c3e:	f7f8 febd 	bl	80009bc <__aeabi_dcmplt>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	f040 8275 	bne.w	8008132 <_dtoa_r+0x932>
 8007c48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f2c0 814b 	blt.w	8007eee <_dtoa_r+0x6ee>
 8007c58:	f1ba 0f0e 	cmp.w	sl, #14
 8007c5c:	f300 8147 	bgt.w	8007eee <_dtoa_r+0x6ee>
 8007c60:	4b69      	ldr	r3, [pc, #420]	; (8007e08 <_dtoa_r+0x608>)
 8007c62:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f280 80d7 	bge.w	8007e24 <_dtoa_r+0x624>
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	f300 80d3 	bgt.w	8007e24 <_dtoa_r+0x624>
 8007c7e:	f040 8257 	bne.w	8008130 <_dtoa_r+0x930>
 8007c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c86:	2200      	movs	r2, #0
 8007c88:	4b64      	ldr	r3, [pc, #400]	; (8007e1c <_dtoa_r+0x61c>)
 8007c8a:	f7f8 fc25 	bl	80004d8 <__aeabi_dmul>
 8007c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c92:	f7f8 fea7 	bl	80009e4 <__aeabi_dcmpge>
 8007c96:	4646      	mov	r6, r8
 8007c98:	4647      	mov	r7, r8
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	f040 822d 	bne.w	80080fa <_dtoa_r+0x8fa>
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	9a06      	ldr	r2, [sp, #24]
 8007ca4:	1c5d      	adds	r5, r3, #1
 8007ca6:	2331      	movs	r3, #49	; 0x31
 8007ca8:	f10a 0a01 	add.w	sl, sl, #1
 8007cac:	7013      	strb	r3, [r2, #0]
 8007cae:	e228      	b.n	8008102 <_dtoa_r+0x902>
 8007cb0:	07f2      	lsls	r2, r6, #31
 8007cb2:	d505      	bpl.n	8007cc0 <_dtoa_r+0x4c0>
 8007cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	3501      	adds	r5, #1
 8007cc0:	1076      	asrs	r6, r6, #1
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	e76e      	b.n	8007ba4 <_dtoa_r+0x3a4>
 8007cc6:	2502      	movs	r5, #2
 8007cc8:	e771      	b.n	8007bae <_dtoa_r+0x3ae>
 8007cca:	4657      	mov	r7, sl
 8007ccc:	4646      	mov	r6, r8
 8007cce:	e790      	b.n	8007bf2 <_dtoa_r+0x3f2>
 8007cd0:	4b4d      	ldr	r3, [pc, #308]	; (8007e08 <_dtoa_r+0x608>)
 8007cd2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cd6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d048      	beq.n	8007d72 <_dtoa_r+0x572>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	494e      	ldr	r1, [pc, #312]	; (8007e20 <_dtoa_r+0x620>)
 8007ce8:	f7f8 fd20 	bl	800072c <__aeabi_ddiv>
 8007cec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cf0:	f7f8 fa3a 	bl	8000168 <__aeabi_dsub>
 8007cf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cf8:	9d06      	ldr	r5, [sp, #24]
 8007cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfe:	f7f8 fe9b 	bl	8000a38 <__aeabi_d2iz>
 8007d02:	9011      	str	r0, [sp, #68]	; 0x44
 8007d04:	f7f8 fb7e 	bl	8000404 <__aeabi_i2d>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d10:	f7f8 fa2a 	bl	8000168 <__aeabi_dsub>
 8007d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1a:	3330      	adds	r3, #48	; 0x30
 8007d1c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d24:	f7f8 fe4a 	bl	80009bc <__aeabi_dcmplt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d163      	bne.n	8007df4 <_dtoa_r+0x5f4>
 8007d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d30:	2000      	movs	r0, #0
 8007d32:	4937      	ldr	r1, [pc, #220]	; (8007e10 <_dtoa_r+0x610>)
 8007d34:	f7f8 fa18 	bl	8000168 <__aeabi_dsub>
 8007d38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d3c:	f7f8 fe3e 	bl	80009bc <__aeabi_dcmplt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f040 80b5 	bne.w	8007eb0 <_dtoa_r+0x6b0>
 8007d46:	9b06      	ldr	r3, [sp, #24]
 8007d48:	1aeb      	subs	r3, r5, r3
 8007d4a:	429e      	cmp	r6, r3
 8007d4c:	f77f af7c 	ble.w	8007c48 <_dtoa_r+0x448>
 8007d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d54:	2200      	movs	r2, #0
 8007d56:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <_dtoa_r+0x614>)
 8007d58:	f7f8 fbbe 	bl	80004d8 <__aeabi_dmul>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <_dtoa_r+0x614>)
 8007d68:	f7f8 fbb6 	bl	80004d8 <__aeabi_dmul>
 8007d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d70:	e7c3      	b.n	8007cfa <_dtoa_r+0x4fa>
 8007d72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d76:	f7f8 fbaf 	bl	80004d8 <__aeabi_dmul>
 8007d7a:	9b06      	ldr	r3, [sp, #24]
 8007d7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d80:	199d      	adds	r5, r3, r6
 8007d82:	461e      	mov	r6, r3
 8007d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d88:	f7f8 fe56 	bl	8000a38 <__aeabi_d2iz>
 8007d8c:	9011      	str	r0, [sp, #68]	; 0x44
 8007d8e:	f7f8 fb39 	bl	8000404 <__aeabi_i2d>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9a:	f7f8 f9e5 	bl	8000168 <__aeabi_dsub>
 8007d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da4:	3330      	adds	r3, #48	; 0x30
 8007da6:	f806 3b01 	strb.w	r3, [r6], #1
 8007daa:	42ae      	cmp	r6, r5
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	d124      	bne.n	8007dfc <_dtoa_r+0x5fc>
 8007db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <_dtoa_r+0x620>)
 8007db8:	f7f8 f9d8 	bl	800016c <__adddf3>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc4:	f7f8 fe18 	bl	80009f8 <__aeabi_dcmpgt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d171      	bne.n	8007eb0 <_dtoa_r+0x6b0>
 8007dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	4913      	ldr	r1, [pc, #76]	; (8007e20 <_dtoa_r+0x620>)
 8007dd4:	f7f8 f9c8 	bl	8000168 <__aeabi_dsub>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de0:	f7f8 fdec 	bl	80009bc <__aeabi_dcmplt>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	f43f af2f 	beq.w	8007c48 <_dtoa_r+0x448>
 8007dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dee:	1e6a      	subs	r2, r5, #1
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d001      	beq.n	8007df8 <_dtoa_r+0x5f8>
 8007df4:	46ba      	mov	sl, r7
 8007df6:	e04a      	b.n	8007e8e <_dtoa_r+0x68e>
 8007df8:	4615      	mov	r5, r2
 8007dfa:	e7f6      	b.n	8007dea <_dtoa_r+0x5ea>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_dtoa_r+0x614>)
 8007dfe:	f7f8 fb6b 	bl	80004d8 <__aeabi_dmul>
 8007e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e06:	e7bd      	b.n	8007d84 <_dtoa_r+0x584>
 8007e08:	08008bb8 	.word	0x08008bb8
 8007e0c:	08008b90 	.word	0x08008b90
 8007e10:	3ff00000 	.word	0x3ff00000
 8007e14:	40240000 	.word	0x40240000
 8007e18:	401c0000 	.word	0x401c0000
 8007e1c:	40140000 	.word	0x40140000
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	9d06      	ldr	r5, [sp, #24]
 8007e26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2e:	4630      	mov	r0, r6
 8007e30:	4639      	mov	r1, r7
 8007e32:	f7f8 fc7b 	bl	800072c <__aeabi_ddiv>
 8007e36:	f7f8 fdff 	bl	8000a38 <__aeabi_d2iz>
 8007e3a:	4681      	mov	r9, r0
 8007e3c:	f7f8 fae2 	bl	8000404 <__aeabi_i2d>
 8007e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e44:	f7f8 fb48 	bl	80004d8 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 f98a 	bl	8000168 <__aeabi_dsub>
 8007e54:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007e58:	f805 6b01 	strb.w	r6, [r5], #1
 8007e5c:	9e06      	ldr	r6, [sp, #24]
 8007e5e:	4602      	mov	r2, r0
 8007e60:	1bae      	subs	r6, r5, r6
 8007e62:	45b0      	cmp	r8, r6
 8007e64:	460b      	mov	r3, r1
 8007e66:	d135      	bne.n	8007ed4 <_dtoa_r+0x6d4>
 8007e68:	f7f8 f980 	bl	800016c <__adddf3>
 8007e6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e70:	4606      	mov	r6, r0
 8007e72:	460f      	mov	r7, r1
 8007e74:	f7f8 fdc0 	bl	80009f8 <__aeabi_dcmpgt>
 8007e78:	b9c8      	cbnz	r0, 8007eae <_dtoa_r+0x6ae>
 8007e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fd91 	bl	80009a8 <__aeabi_dcmpeq>
 8007e86:	b110      	cbz	r0, 8007e8e <_dtoa_r+0x68e>
 8007e88:	f019 0f01 	tst.w	r9, #1
 8007e8c:	d10f      	bne.n	8007eae <_dtoa_r+0x6ae>
 8007e8e:	4659      	mov	r1, fp
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fab3 	bl	80083fc <_Bfree>
 8007e96:	2300      	movs	r3, #0
 8007e98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e9a:	702b      	strb	r3, [r5, #0]
 8007e9c:	f10a 0301 	add.w	r3, sl, #1
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f43f acf3 	beq.w	8007890 <_dtoa_r+0x90>
 8007eaa:	601d      	str	r5, [r3, #0]
 8007eac:	e4f0      	b.n	8007890 <_dtoa_r+0x90>
 8007eae:	4657      	mov	r7, sl
 8007eb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007eb4:	1e6b      	subs	r3, r5, #1
 8007eb6:	2a39      	cmp	r2, #57	; 0x39
 8007eb8:	d106      	bne.n	8007ec8 <_dtoa_r+0x6c8>
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d107      	bne.n	8007ed0 <_dtoa_r+0x6d0>
 8007ec0:	2330      	movs	r3, #48	; 0x30
 8007ec2:	7013      	strb	r3, [r2, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	3701      	adds	r7, #1
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	3201      	adds	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e791      	b.n	8007df4 <_dtoa_r+0x5f4>
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	e7ed      	b.n	8007eb0 <_dtoa_r+0x6b0>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4b99      	ldr	r3, [pc, #612]	; (800813c <_dtoa_r+0x93c>)
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	460f      	mov	r7, r1
 8007ee4:	f7f8 fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d09e      	beq.n	8007e2a <_dtoa_r+0x62a>
 8007eec:	e7cf      	b.n	8007e8e <_dtoa_r+0x68e>
 8007eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	f000 8088 	beq.w	8008006 <_dtoa_r+0x806>
 8007ef6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ef8:	2a01      	cmp	r2, #1
 8007efa:	dc6d      	bgt.n	8007fd8 <_dtoa_r+0x7d8>
 8007efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d066      	beq.n	8007fd0 <_dtoa_r+0x7d0>
 8007f02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f06:	464d      	mov	r5, r9
 8007f08:	9e08      	ldr	r6, [sp, #32]
 8007f0a:	9a07      	ldr	r2, [sp, #28]
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	441a      	add	r2, r3
 8007f10:	4620      	mov	r0, r4
 8007f12:	4499      	add	r9, r3
 8007f14:	9207      	str	r2, [sp, #28]
 8007f16:	f000 fb11 	bl	800853c <__i2b>
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	dd0b      	ble.n	8007f38 <_dtoa_r+0x738>
 8007f20:	9b07      	ldr	r3, [sp, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd08      	ble.n	8007f38 <_dtoa_r+0x738>
 8007f26:	42ab      	cmp	r3, r5
 8007f28:	bfa8      	it	ge
 8007f2a:	462b      	movge	r3, r5
 8007f2c:	9a07      	ldr	r2, [sp, #28]
 8007f2e:	eba9 0903 	sub.w	r9, r9, r3
 8007f32:	1aed      	subs	r5, r5, r3
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	b1eb      	cbz	r3, 8007f78 <_dtoa_r+0x778>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d065      	beq.n	800800e <_dtoa_r+0x80e>
 8007f42:	b18e      	cbz	r6, 8007f68 <_dtoa_r+0x768>
 8007f44:	4639      	mov	r1, r7
 8007f46:	4632      	mov	r2, r6
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fb95 	bl	8008678 <__pow5mult>
 8007f4e:	465a      	mov	r2, fp
 8007f50:	4601      	mov	r1, r0
 8007f52:	4607      	mov	r7, r0
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fafa 	bl	800854e <__multiply>
 8007f5a:	4659      	mov	r1, fp
 8007f5c:	900a      	str	r0, [sp, #40]	; 0x28
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 fa4c 	bl	80083fc <_Bfree>
 8007f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f66:	469b      	mov	fp, r3
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	1b9a      	subs	r2, r3, r6
 8007f6c:	d004      	beq.n	8007f78 <_dtoa_r+0x778>
 8007f6e:	4659      	mov	r1, fp
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fb81 	bl	8008678 <__pow5mult>
 8007f76:	4683      	mov	fp, r0
 8007f78:	2101      	movs	r1, #1
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fade 	bl	800853c <__i2b>
 8007f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f82:	4606      	mov	r6, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 81c6 	beq.w	8008316 <_dtoa_r+0xb16>
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 fb72 	bl	8008678 <__pow5mult>
 8007f94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f96:	4606      	mov	r6, r0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	dc3e      	bgt.n	800801a <_dtoa_r+0x81a>
 8007f9c:	9b02      	ldr	r3, [sp, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d137      	bne.n	8008012 <_dtoa_r+0x812>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d134      	bne.n	8008016 <_dtoa_r+0x816>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb2:	0d1b      	lsrs	r3, r3, #20
 8007fb4:	051b      	lsls	r3, r3, #20
 8007fb6:	b12b      	cbz	r3, 8007fc4 <_dtoa_r+0x7c4>
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	f109 0901 	add.w	r9, r9, #1
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	9308      	str	r3, [sp, #32]
 8007fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d128      	bne.n	800801e <_dtoa_r+0x81e>
 8007fcc:	2001      	movs	r0, #1
 8007fce:	e02e      	b.n	800802e <_dtoa_r+0x82e>
 8007fd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fd6:	e796      	b.n	8007f06 <_dtoa_r+0x706>
 8007fd8:	9b08      	ldr	r3, [sp, #32]
 8007fda:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8007fde:	42b3      	cmp	r3, r6
 8007fe0:	bfb7      	itett	lt
 8007fe2:	9b08      	ldrlt	r3, [sp, #32]
 8007fe4:	1b9e      	subge	r6, r3, r6
 8007fe6:	1af2      	sublt	r2, r6, r3
 8007fe8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007fea:	bfbf      	itttt	lt
 8007fec:	9608      	strlt	r6, [sp, #32]
 8007fee:	189b      	addlt	r3, r3, r2
 8007ff0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007ff2:	2600      	movlt	r6, #0
 8007ff4:	f1b8 0f00 	cmp.w	r8, #0
 8007ff8:	bfb9      	ittee	lt
 8007ffa:	eba9 0508 	sublt.w	r5, r9, r8
 8007ffe:	2300      	movlt	r3, #0
 8008000:	464d      	movge	r5, r9
 8008002:	4643      	movge	r3, r8
 8008004:	e781      	b.n	8007f0a <_dtoa_r+0x70a>
 8008006:	9e08      	ldr	r6, [sp, #32]
 8008008:	464d      	mov	r5, r9
 800800a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800800c:	e786      	b.n	8007f1c <_dtoa_r+0x71c>
 800800e:	9a08      	ldr	r2, [sp, #32]
 8008010:	e7ad      	b.n	8007f6e <_dtoa_r+0x76e>
 8008012:	2300      	movs	r3, #0
 8008014:	e7d6      	b.n	8007fc4 <_dtoa_r+0x7c4>
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	e7d4      	b.n	8007fc4 <_dtoa_r+0x7c4>
 800801a:	2300      	movs	r3, #0
 800801c:	9308      	str	r3, [sp, #32]
 800801e:	6933      	ldr	r3, [r6, #16]
 8008020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008024:	6918      	ldr	r0, [r3, #16]
 8008026:	f000 fa3b 	bl	80084a0 <__hi0bits>
 800802a:	f1c0 0020 	rsb	r0, r0, #32
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	4418      	add	r0, r3
 8008032:	f010 001f 	ands.w	r0, r0, #31
 8008036:	d047      	beq.n	80080c8 <_dtoa_r+0x8c8>
 8008038:	f1c0 0320 	rsb	r3, r0, #32
 800803c:	2b04      	cmp	r3, #4
 800803e:	dd3b      	ble.n	80080b8 <_dtoa_r+0x8b8>
 8008040:	9b07      	ldr	r3, [sp, #28]
 8008042:	f1c0 001c 	rsb	r0, r0, #28
 8008046:	4481      	add	r9, r0
 8008048:	4405      	add	r5, r0
 800804a:	4403      	add	r3, r0
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	f1b9 0f00 	cmp.w	r9, #0
 8008052:	dd05      	ble.n	8008060 <_dtoa_r+0x860>
 8008054:	4659      	mov	r1, fp
 8008056:	464a      	mov	r2, r9
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fb5b 	bl	8008714 <__lshift>
 800805e:	4683      	mov	fp, r0
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dd05      	ble.n	8008072 <_dtoa_r+0x872>
 8008066:	4631      	mov	r1, r6
 8008068:	461a      	mov	r2, r3
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fb52 	bl	8008714 <__lshift>
 8008070:	4606      	mov	r6, r0
 8008072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008074:	b353      	cbz	r3, 80080cc <_dtoa_r+0x8cc>
 8008076:	4631      	mov	r1, r6
 8008078:	4658      	mov	r0, fp
 800807a:	f000 fb9f 	bl	80087bc <__mcmp>
 800807e:	2800      	cmp	r0, #0
 8008080:	da24      	bge.n	80080cc <_dtoa_r+0x8cc>
 8008082:	2300      	movs	r3, #0
 8008084:	4659      	mov	r1, fp
 8008086:	220a      	movs	r2, #10
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f9ce 	bl	800842a <__multadd>
 800808e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008090:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008094:	4683      	mov	fp, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8144 	beq.w	8008324 <_dtoa_r+0xb24>
 800809c:	2300      	movs	r3, #0
 800809e:	4639      	mov	r1, r7
 80080a0:	220a      	movs	r2, #10
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f9c1 	bl	800842a <__multadd>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	4607      	mov	r7, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dc4d      	bgt.n	800814c <_dtoa_r+0x94c>
 80080b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	dd4a      	ble.n	800814c <_dtoa_r+0x94c>
 80080b6:	e011      	b.n	80080dc <_dtoa_r+0x8dc>
 80080b8:	d0c9      	beq.n	800804e <_dtoa_r+0x84e>
 80080ba:	9a07      	ldr	r2, [sp, #28]
 80080bc:	331c      	adds	r3, #28
 80080be:	441a      	add	r2, r3
 80080c0:	4499      	add	r9, r3
 80080c2:	441d      	add	r5, r3
 80080c4:	4613      	mov	r3, r2
 80080c6:	e7c1      	b.n	800804c <_dtoa_r+0x84c>
 80080c8:	4603      	mov	r3, r0
 80080ca:	e7f6      	b.n	80080ba <_dtoa_r+0x8ba>
 80080cc:	f1b8 0f00 	cmp.w	r8, #0
 80080d0:	dc36      	bgt.n	8008140 <_dtoa_r+0x940>
 80080d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	dd33      	ble.n	8008140 <_dtoa_r+0x940>
 80080d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	b963      	cbnz	r3, 80080fa <_dtoa_r+0x8fa>
 80080e0:	4631      	mov	r1, r6
 80080e2:	2205      	movs	r2, #5
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 f9a0 	bl	800842a <__multadd>
 80080ea:	4601      	mov	r1, r0
 80080ec:	4606      	mov	r6, r0
 80080ee:	4658      	mov	r0, fp
 80080f0:	f000 fb64 	bl	80087bc <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f73f add3 	bgt.w	8007ca0 <_dtoa_r+0x4a0>
 80080fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080fc:	9d06      	ldr	r5, [sp, #24]
 80080fe:	ea6f 0a03 	mvn.w	sl, r3
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	4631      	mov	r1, r6
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f977 	bl	80083fc <_Bfree>
 800810e:	2f00      	cmp	r7, #0
 8008110:	f43f aebd 	beq.w	8007e8e <_dtoa_r+0x68e>
 8008114:	f1b9 0f00 	cmp.w	r9, #0
 8008118:	d005      	beq.n	8008126 <_dtoa_r+0x926>
 800811a:	45b9      	cmp	r9, r7
 800811c:	d003      	beq.n	8008126 <_dtoa_r+0x926>
 800811e:	4649      	mov	r1, r9
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f96b 	bl	80083fc <_Bfree>
 8008126:	4639      	mov	r1, r7
 8008128:	4620      	mov	r0, r4
 800812a:	f000 f967 	bl	80083fc <_Bfree>
 800812e:	e6ae      	b.n	8007e8e <_dtoa_r+0x68e>
 8008130:	2600      	movs	r6, #0
 8008132:	4637      	mov	r7, r6
 8008134:	e7e1      	b.n	80080fa <_dtoa_r+0x8fa>
 8008136:	46ba      	mov	sl, r7
 8008138:	4637      	mov	r7, r6
 800813a:	e5b1      	b.n	8007ca0 <_dtoa_r+0x4a0>
 800813c:	40240000 	.word	0x40240000
 8008140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008142:	f8cd 8010 	str.w	r8, [sp, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 80f3 	beq.w	8008332 <_dtoa_r+0xb32>
 800814c:	2d00      	cmp	r5, #0
 800814e:	dd05      	ble.n	800815c <_dtoa_r+0x95c>
 8008150:	4639      	mov	r1, r7
 8008152:	462a      	mov	r2, r5
 8008154:	4620      	mov	r0, r4
 8008156:	f000 fadd 	bl	8008714 <__lshift>
 800815a:	4607      	mov	r7, r0
 800815c:	9b08      	ldr	r3, [sp, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04c      	beq.n	80081fc <_dtoa_r+0x9fc>
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4620      	mov	r0, r4
 8008166:	f000 f915 	bl	8008394 <_Balloc>
 800816a:	4605      	mov	r5, r0
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	f107 010c 	add.w	r1, r7, #12
 8008172:	3202      	adds	r2, #2
 8008174:	0092      	lsls	r2, r2, #2
 8008176:	300c      	adds	r0, #12
 8008178:	f7fe ff62 	bl	8007040 <memcpy>
 800817c:	2201      	movs	r2, #1
 800817e:	4629      	mov	r1, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fac7 	bl	8008714 <__lshift>
 8008186:	46b9      	mov	r9, r7
 8008188:	4607      	mov	r7, r0
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	9308      	str	r3, [sp, #32]
 8008196:	4631      	mov	r1, r6
 8008198:	4658      	mov	r0, fp
 800819a:	f7ff faa1 	bl	80076e0 <quorem>
 800819e:	4649      	mov	r1, r9
 80081a0:	4605      	mov	r5, r0
 80081a2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081a6:	4658      	mov	r0, fp
 80081a8:	f000 fb08 	bl	80087bc <__mcmp>
 80081ac:	463a      	mov	r2, r7
 80081ae:	9002      	str	r0, [sp, #8]
 80081b0:	4631      	mov	r1, r6
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 fb1c 	bl	80087f0 <__mdiff>
 80081b8:	68c3      	ldr	r3, [r0, #12]
 80081ba:	4602      	mov	r2, r0
 80081bc:	bb03      	cbnz	r3, 8008200 <_dtoa_r+0xa00>
 80081be:	4601      	mov	r1, r0
 80081c0:	9009      	str	r0, [sp, #36]	; 0x24
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 fafa 	bl	80087bc <__mcmp>
 80081c8:	4603      	mov	r3, r0
 80081ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081cc:	4611      	mov	r1, r2
 80081ce:	4620      	mov	r0, r4
 80081d0:	9309      	str	r3, [sp, #36]	; 0x24
 80081d2:	f000 f913 	bl	80083fc <_Bfree>
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	b9a3      	cbnz	r3, 8008204 <_dtoa_r+0xa04>
 80081da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081dc:	b992      	cbnz	r2, 8008204 <_dtoa_r+0xa04>
 80081de:	9a08      	ldr	r2, [sp, #32]
 80081e0:	b982      	cbnz	r2, 8008204 <_dtoa_r+0xa04>
 80081e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081e6:	d029      	beq.n	800823c <_dtoa_r+0xa3c>
 80081e8:	9b02      	ldr	r3, [sp, #8]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd01      	ble.n	80081f2 <_dtoa_r+0x9f2>
 80081ee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80081f2:	9b07      	ldr	r3, [sp, #28]
 80081f4:	1c5d      	adds	r5, r3, #1
 80081f6:	f883 8000 	strb.w	r8, [r3]
 80081fa:	e784      	b.n	8008106 <_dtoa_r+0x906>
 80081fc:	4638      	mov	r0, r7
 80081fe:	e7c2      	b.n	8008186 <_dtoa_r+0x986>
 8008200:	2301      	movs	r3, #1
 8008202:	e7e3      	b.n	80081cc <_dtoa_r+0x9cc>
 8008204:	9a02      	ldr	r2, [sp, #8]
 8008206:	2a00      	cmp	r2, #0
 8008208:	db04      	blt.n	8008214 <_dtoa_r+0xa14>
 800820a:	d123      	bne.n	8008254 <_dtoa_r+0xa54>
 800820c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800820e:	bb0a      	cbnz	r2, 8008254 <_dtoa_r+0xa54>
 8008210:	9a08      	ldr	r2, [sp, #32]
 8008212:	b9fa      	cbnz	r2, 8008254 <_dtoa_r+0xa54>
 8008214:	2b00      	cmp	r3, #0
 8008216:	ddec      	ble.n	80081f2 <_dtoa_r+0x9f2>
 8008218:	4659      	mov	r1, fp
 800821a:	2201      	movs	r2, #1
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fa79 	bl	8008714 <__lshift>
 8008222:	4631      	mov	r1, r6
 8008224:	4683      	mov	fp, r0
 8008226:	f000 fac9 	bl	80087bc <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	dc03      	bgt.n	8008236 <_dtoa_r+0xa36>
 800822e:	d1e0      	bne.n	80081f2 <_dtoa_r+0x9f2>
 8008230:	f018 0f01 	tst.w	r8, #1
 8008234:	d0dd      	beq.n	80081f2 <_dtoa_r+0x9f2>
 8008236:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800823a:	d1d8      	bne.n	80081ee <_dtoa_r+0x9ee>
 800823c:	9b07      	ldr	r3, [sp, #28]
 800823e:	9a07      	ldr	r2, [sp, #28]
 8008240:	1c5d      	adds	r5, r3, #1
 8008242:	2339      	movs	r3, #57	; 0x39
 8008244:	7013      	strb	r3, [r2, #0]
 8008246:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800824a:	1e6a      	subs	r2, r5, #1
 800824c:	2b39      	cmp	r3, #57	; 0x39
 800824e:	d04d      	beq.n	80082ec <_dtoa_r+0xaec>
 8008250:	3301      	adds	r3, #1
 8008252:	e052      	b.n	80082fa <_dtoa_r+0xafa>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f102 0501 	add.w	r5, r2, #1
 800825c:	dd06      	ble.n	800826c <_dtoa_r+0xa6c>
 800825e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008262:	d0eb      	beq.n	800823c <_dtoa_r+0xa3c>
 8008264:	f108 0801 	add.w	r8, r8, #1
 8008268:	9b07      	ldr	r3, [sp, #28]
 800826a:	e7c4      	b.n	80081f6 <_dtoa_r+0x9f6>
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	1aeb      	subs	r3, r5, r3
 8008272:	4293      	cmp	r3, r2
 8008274:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008278:	d021      	beq.n	80082be <_dtoa_r+0xabe>
 800827a:	4659      	mov	r1, fp
 800827c:	2300      	movs	r3, #0
 800827e:	220a      	movs	r2, #10
 8008280:	4620      	mov	r0, r4
 8008282:	f000 f8d2 	bl	800842a <__multadd>
 8008286:	45b9      	cmp	r9, r7
 8008288:	4683      	mov	fp, r0
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	f04f 020a 	mov.w	r2, #10
 8008292:	4649      	mov	r1, r9
 8008294:	4620      	mov	r0, r4
 8008296:	d105      	bne.n	80082a4 <_dtoa_r+0xaa4>
 8008298:	f000 f8c7 	bl	800842a <__multadd>
 800829c:	4681      	mov	r9, r0
 800829e:	4607      	mov	r7, r0
 80082a0:	9507      	str	r5, [sp, #28]
 80082a2:	e778      	b.n	8008196 <_dtoa_r+0x996>
 80082a4:	f000 f8c1 	bl	800842a <__multadd>
 80082a8:	4639      	mov	r1, r7
 80082aa:	4681      	mov	r9, r0
 80082ac:	2300      	movs	r3, #0
 80082ae:	220a      	movs	r2, #10
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 f8ba 	bl	800842a <__multadd>
 80082b6:	4607      	mov	r7, r0
 80082b8:	e7f2      	b.n	80082a0 <_dtoa_r+0xaa0>
 80082ba:	f04f 0900 	mov.w	r9, #0
 80082be:	4659      	mov	r1, fp
 80082c0:	2201      	movs	r2, #1
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fa26 	bl	8008714 <__lshift>
 80082c8:	4631      	mov	r1, r6
 80082ca:	4683      	mov	fp, r0
 80082cc:	f000 fa76 	bl	80087bc <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dcb8      	bgt.n	8008246 <_dtoa_r+0xa46>
 80082d4:	d102      	bne.n	80082dc <_dtoa_r+0xadc>
 80082d6:	f018 0f01 	tst.w	r8, #1
 80082da:	d1b4      	bne.n	8008246 <_dtoa_r+0xa46>
 80082dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082e0:	1e6a      	subs	r2, r5, #1
 80082e2:	2b30      	cmp	r3, #48	; 0x30
 80082e4:	f47f af0f 	bne.w	8008106 <_dtoa_r+0x906>
 80082e8:	4615      	mov	r5, r2
 80082ea:	e7f7      	b.n	80082dc <_dtoa_r+0xadc>
 80082ec:	9b06      	ldr	r3, [sp, #24]
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d105      	bne.n	80082fe <_dtoa_r+0xafe>
 80082f2:	2331      	movs	r3, #49	; 0x31
 80082f4:	9a06      	ldr	r2, [sp, #24]
 80082f6:	f10a 0a01 	add.w	sl, sl, #1
 80082fa:	7013      	strb	r3, [r2, #0]
 80082fc:	e703      	b.n	8008106 <_dtoa_r+0x906>
 80082fe:	4615      	mov	r5, r2
 8008300:	e7a1      	b.n	8008246 <_dtoa_r+0xa46>
 8008302:	4b17      	ldr	r3, [pc, #92]	; (8008360 <_dtoa_r+0xb60>)
 8008304:	f7ff bae1 	b.w	80078ca <_dtoa_r+0xca>
 8008308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f aabb 	bne.w	8007886 <_dtoa_r+0x86>
 8008310:	4b14      	ldr	r3, [pc, #80]	; (8008364 <_dtoa_r+0xb64>)
 8008312:	f7ff bada 	b.w	80078ca <_dtoa_r+0xca>
 8008316:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008318:	2b01      	cmp	r3, #1
 800831a:	f77f ae3f 	ble.w	8007f9c <_dtoa_r+0x79c>
 800831e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008320:	9308      	str	r3, [sp, #32]
 8008322:	e653      	b.n	8007fcc <_dtoa_r+0x7cc>
 8008324:	9b04      	ldr	r3, [sp, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc03      	bgt.n	8008332 <_dtoa_r+0xb32>
 800832a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800832c:	2b02      	cmp	r3, #2
 800832e:	f73f aed5 	bgt.w	80080dc <_dtoa_r+0x8dc>
 8008332:	9d06      	ldr	r5, [sp, #24]
 8008334:	4631      	mov	r1, r6
 8008336:	4658      	mov	r0, fp
 8008338:	f7ff f9d2 	bl	80076e0 <quorem>
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008342:	f805 8b01 	strb.w	r8, [r5], #1
 8008346:	9a04      	ldr	r2, [sp, #16]
 8008348:	1aeb      	subs	r3, r5, r3
 800834a:	429a      	cmp	r2, r3
 800834c:	ddb5      	ble.n	80082ba <_dtoa_r+0xaba>
 800834e:	4659      	mov	r1, fp
 8008350:	2300      	movs	r3, #0
 8008352:	220a      	movs	r2, #10
 8008354:	4620      	mov	r0, r4
 8008356:	f000 f868 	bl	800842a <__multadd>
 800835a:	4683      	mov	fp, r0
 800835c:	e7ea      	b.n	8008334 <_dtoa_r+0xb34>
 800835e:	bf00      	nop
 8008360:	08008b7c 	.word	0x08008b7c
 8008364:	08008b7e 	.word	0x08008b7e

08008368 <_localeconv_r>:
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <_localeconv_r+0x14>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6a18      	ldr	r0, [r3, #32]
 800836e:	4b04      	ldr	r3, [pc, #16]	; (8008380 <_localeconv_r+0x18>)
 8008370:	2800      	cmp	r0, #0
 8008372:	bf08      	it	eq
 8008374:	4618      	moveq	r0, r3
 8008376:	30f0      	adds	r0, #240	; 0xf0
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000038 	.word	0x20000038
 8008380:	2000009c 	.word	0x2000009c

08008384 <malloc>:
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <malloc+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f000 baed 	b.w	8008968 <_malloc_r>
 800838e:	bf00      	nop
 8008390:	20000038 	.word	0x20000038

08008394 <_Balloc>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008398:	4604      	mov	r4, r0
 800839a:	460e      	mov	r6, r1
 800839c:	b93d      	cbnz	r5, 80083ae <_Balloc+0x1a>
 800839e:	2010      	movs	r0, #16
 80083a0:	f7ff fff0 	bl	8008384 <malloc>
 80083a4:	6260      	str	r0, [r4, #36]	; 0x24
 80083a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083aa:	6005      	str	r5, [r0, #0]
 80083ac:	60c5      	str	r5, [r0, #12]
 80083ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083b0:	68eb      	ldr	r3, [r5, #12]
 80083b2:	b183      	cbz	r3, 80083d6 <_Balloc+0x42>
 80083b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80083bc:	b9b8      	cbnz	r0, 80083ee <_Balloc+0x5a>
 80083be:	2101      	movs	r1, #1
 80083c0:	fa01 f506 	lsl.w	r5, r1, r6
 80083c4:	1d6a      	adds	r2, r5, #5
 80083c6:	0092      	lsls	r2, r2, #2
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fabe 	bl	800894a <_calloc_r>
 80083ce:	b160      	cbz	r0, 80083ea <_Balloc+0x56>
 80083d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80083d4:	e00e      	b.n	80083f4 <_Balloc+0x60>
 80083d6:	2221      	movs	r2, #33	; 0x21
 80083d8:	2104      	movs	r1, #4
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fab5 	bl	800894a <_calloc_r>
 80083e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083e2:	60e8      	str	r0, [r5, #12]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e4      	bne.n	80083b4 <_Balloc+0x20>
 80083ea:	2000      	movs	r0, #0
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	6802      	ldr	r2, [r0, #0]
 80083f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80083f4:	2300      	movs	r3, #0
 80083f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083fa:	e7f7      	b.n	80083ec <_Balloc+0x58>

080083fc <_Bfree>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008400:	4606      	mov	r6, r0
 8008402:	460d      	mov	r5, r1
 8008404:	b93c      	cbnz	r4, 8008416 <_Bfree+0x1a>
 8008406:	2010      	movs	r0, #16
 8008408:	f7ff ffbc 	bl	8008384 <malloc>
 800840c:	6270      	str	r0, [r6, #36]	; 0x24
 800840e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008412:	6004      	str	r4, [r0, #0]
 8008414:	60c4      	str	r4, [r0, #12]
 8008416:	b13d      	cbz	r5, 8008428 <_Bfree+0x2c>
 8008418:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800841a:	686a      	ldr	r2, [r5, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008422:	6029      	str	r1, [r5, #0]
 8008424:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008428:	bd70      	pop	{r4, r5, r6, pc}

0800842a <__multadd>:
 800842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	461f      	mov	r7, r3
 8008430:	4606      	mov	r6, r0
 8008432:	460c      	mov	r4, r1
 8008434:	2300      	movs	r3, #0
 8008436:	690d      	ldr	r5, [r1, #16]
 8008438:	f101 0c14 	add.w	ip, r1, #20
 800843c:	f8dc 0000 	ldr.w	r0, [ip]
 8008440:	3301      	adds	r3, #1
 8008442:	b281      	uxth	r1, r0
 8008444:	fb02 7101 	mla	r1, r2, r1, r7
 8008448:	0c00      	lsrs	r0, r0, #16
 800844a:	0c0f      	lsrs	r7, r1, #16
 800844c:	fb02 7000 	mla	r0, r2, r0, r7
 8008450:	b289      	uxth	r1, r1
 8008452:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008456:	429d      	cmp	r5, r3
 8008458:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800845c:	f84c 1b04 	str.w	r1, [ip], #4
 8008460:	dcec      	bgt.n	800843c <__multadd+0x12>
 8008462:	b1d7      	cbz	r7, 800849a <__multadd+0x70>
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	42ab      	cmp	r3, r5
 8008468:	dc12      	bgt.n	8008490 <__multadd+0x66>
 800846a:	6861      	ldr	r1, [r4, #4]
 800846c:	4630      	mov	r0, r6
 800846e:	3101      	adds	r1, #1
 8008470:	f7ff ff90 	bl	8008394 <_Balloc>
 8008474:	4680      	mov	r8, r0
 8008476:	6922      	ldr	r2, [r4, #16]
 8008478:	f104 010c 	add.w	r1, r4, #12
 800847c:	3202      	adds	r2, #2
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	300c      	adds	r0, #12
 8008482:	f7fe fddd 	bl	8007040 <memcpy>
 8008486:	4621      	mov	r1, r4
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff ffb7 	bl	80083fc <_Bfree>
 800848e:	4644      	mov	r4, r8
 8008490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008494:	3501      	adds	r5, #1
 8008496:	615f      	str	r7, [r3, #20]
 8008498:	6125      	str	r5, [r4, #16]
 800849a:	4620      	mov	r0, r4
 800849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084a0 <__hi0bits>:
 80084a0:	0c02      	lsrs	r2, r0, #16
 80084a2:	0412      	lsls	r2, r2, #16
 80084a4:	4603      	mov	r3, r0
 80084a6:	b9b2      	cbnz	r2, 80084d6 <__hi0bits+0x36>
 80084a8:	0403      	lsls	r3, r0, #16
 80084aa:	2010      	movs	r0, #16
 80084ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80084b0:	bf04      	itt	eq
 80084b2:	021b      	lsleq	r3, r3, #8
 80084b4:	3008      	addeq	r0, #8
 80084b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80084ba:	bf04      	itt	eq
 80084bc:	011b      	lsleq	r3, r3, #4
 80084be:	3004      	addeq	r0, #4
 80084c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80084c4:	bf04      	itt	eq
 80084c6:	009b      	lsleq	r3, r3, #2
 80084c8:	3002      	addeq	r0, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	db06      	blt.n	80084dc <__hi0bits+0x3c>
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	d503      	bpl.n	80084da <__hi0bits+0x3a>
 80084d2:	3001      	adds	r0, #1
 80084d4:	4770      	bx	lr
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7e8      	b.n	80084ac <__hi0bits+0xc>
 80084da:	2020      	movs	r0, #32
 80084dc:	4770      	bx	lr

080084de <__lo0bits>:
 80084de:	6803      	ldr	r3, [r0, #0]
 80084e0:	4601      	mov	r1, r0
 80084e2:	f013 0207 	ands.w	r2, r3, #7
 80084e6:	d00b      	beq.n	8008500 <__lo0bits+0x22>
 80084e8:	07da      	lsls	r2, r3, #31
 80084ea:	d423      	bmi.n	8008534 <__lo0bits+0x56>
 80084ec:	0798      	lsls	r0, r3, #30
 80084ee:	bf49      	itett	mi
 80084f0:	085b      	lsrmi	r3, r3, #1
 80084f2:	089b      	lsrpl	r3, r3, #2
 80084f4:	2001      	movmi	r0, #1
 80084f6:	600b      	strmi	r3, [r1, #0]
 80084f8:	bf5c      	itt	pl
 80084fa:	600b      	strpl	r3, [r1, #0]
 80084fc:	2002      	movpl	r0, #2
 80084fe:	4770      	bx	lr
 8008500:	b298      	uxth	r0, r3
 8008502:	b9a8      	cbnz	r0, 8008530 <__lo0bits+0x52>
 8008504:	2010      	movs	r0, #16
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	f013 0fff 	tst.w	r3, #255	; 0xff
 800850c:	bf04      	itt	eq
 800850e:	0a1b      	lsreq	r3, r3, #8
 8008510:	3008      	addeq	r0, #8
 8008512:	071a      	lsls	r2, r3, #28
 8008514:	bf04      	itt	eq
 8008516:	091b      	lsreq	r3, r3, #4
 8008518:	3004      	addeq	r0, #4
 800851a:	079a      	lsls	r2, r3, #30
 800851c:	bf04      	itt	eq
 800851e:	089b      	lsreq	r3, r3, #2
 8008520:	3002      	addeq	r0, #2
 8008522:	07da      	lsls	r2, r3, #31
 8008524:	d402      	bmi.n	800852c <__lo0bits+0x4e>
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	d006      	beq.n	8008538 <__lo0bits+0x5a>
 800852a:	3001      	adds	r0, #1
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	4770      	bx	lr
 8008530:	4610      	mov	r0, r2
 8008532:	e7e9      	b.n	8008508 <__lo0bits+0x2a>
 8008534:	2000      	movs	r0, #0
 8008536:	4770      	bx	lr
 8008538:	2020      	movs	r0, #32
 800853a:	4770      	bx	lr

0800853c <__i2b>:
 800853c:	b510      	push	{r4, lr}
 800853e:	460c      	mov	r4, r1
 8008540:	2101      	movs	r1, #1
 8008542:	f7ff ff27 	bl	8008394 <_Balloc>
 8008546:	2201      	movs	r2, #1
 8008548:	6144      	str	r4, [r0, #20]
 800854a:	6102      	str	r2, [r0, #16]
 800854c:	bd10      	pop	{r4, pc}

0800854e <__multiply>:
 800854e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008552:	4614      	mov	r4, r2
 8008554:	690a      	ldr	r2, [r1, #16]
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	4688      	mov	r8, r1
 800855a:	429a      	cmp	r2, r3
 800855c:	bfbe      	ittt	lt
 800855e:	460b      	movlt	r3, r1
 8008560:	46a0      	movlt	r8, r4
 8008562:	461c      	movlt	r4, r3
 8008564:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008568:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800856c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008574:	eb07 0609 	add.w	r6, r7, r9
 8008578:	42b3      	cmp	r3, r6
 800857a:	bfb8      	it	lt
 800857c:	3101      	addlt	r1, #1
 800857e:	f7ff ff09 	bl	8008394 <_Balloc>
 8008582:	f100 0514 	add.w	r5, r0, #20
 8008586:	462b      	mov	r3, r5
 8008588:	2200      	movs	r2, #0
 800858a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800858e:	4573      	cmp	r3, lr
 8008590:	d316      	bcc.n	80085c0 <__multiply+0x72>
 8008592:	f104 0214 	add.w	r2, r4, #20
 8008596:	f108 0114 	add.w	r1, r8, #20
 800859a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800859e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	9b00      	ldr	r3, [sp, #0]
 80085a6:	9201      	str	r2, [sp, #4]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d80c      	bhi.n	80085c6 <__multiply+0x78>
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	dd03      	ble.n	80085b8 <__multiply+0x6a>
 80085b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d05d      	beq.n	8008674 <__multiply+0x126>
 80085b8:	6106      	str	r6, [r0, #16]
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	f843 2b04 	str.w	r2, [r3], #4
 80085c4:	e7e3      	b.n	800858e <__multiply+0x40>
 80085c6:	f8b2 b000 	ldrh.w	fp, [r2]
 80085ca:	f1bb 0f00 	cmp.w	fp, #0
 80085ce:	d023      	beq.n	8008618 <__multiply+0xca>
 80085d0:	4689      	mov	r9, r1
 80085d2:	46ac      	mov	ip, r5
 80085d4:	f04f 0800 	mov.w	r8, #0
 80085d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80085dc:	f8dc a000 	ldr.w	sl, [ip]
 80085e0:	b2a3      	uxth	r3, r4
 80085e2:	fa1f fa8a 	uxth.w	sl, sl
 80085e6:	fb0b a303 	mla	r3, fp, r3, sl
 80085ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80085ee:	f8dc 4000 	ldr.w	r4, [ip]
 80085f2:	4443      	add	r3, r8
 80085f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085f8:	fb0b 840a 	mla	r4, fp, sl, r8
 80085fc:	46e2      	mov	sl, ip
 80085fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008602:	b29b      	uxth	r3, r3
 8008604:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008608:	454f      	cmp	r7, r9
 800860a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800860e:	f84a 3b04 	str.w	r3, [sl], #4
 8008612:	d82b      	bhi.n	800866c <__multiply+0x11e>
 8008614:	f8cc 8004 	str.w	r8, [ip, #4]
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	3204      	adds	r2, #4
 800861c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008620:	f1ba 0f00 	cmp.w	sl, #0
 8008624:	d020      	beq.n	8008668 <__multiply+0x11a>
 8008626:	4689      	mov	r9, r1
 8008628:	46a8      	mov	r8, r5
 800862a:	f04f 0b00 	mov.w	fp, #0
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	f8b9 c000 	ldrh.w	ip, [r9]
 8008634:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008638:	b29b      	uxth	r3, r3
 800863a:	fb0a 440c 	mla	r4, sl, ip, r4
 800863e:	46c4      	mov	ip, r8
 8008640:	445c      	add	r4, fp
 8008642:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008646:	f84c 3b04 	str.w	r3, [ip], #4
 800864a:	f859 3b04 	ldr.w	r3, [r9], #4
 800864e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	fb0a b303 	mla	r3, sl, r3, fp
 8008658:	454f      	cmp	r7, r9
 800865a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800865e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008662:	d805      	bhi.n	8008670 <__multiply+0x122>
 8008664:	f8c8 3004 	str.w	r3, [r8, #4]
 8008668:	3504      	adds	r5, #4
 800866a:	e79b      	b.n	80085a4 <__multiply+0x56>
 800866c:	46d4      	mov	ip, sl
 800866e:	e7b3      	b.n	80085d8 <__multiply+0x8a>
 8008670:	46e0      	mov	r8, ip
 8008672:	e7dd      	b.n	8008630 <__multiply+0xe2>
 8008674:	3e01      	subs	r6, #1
 8008676:	e799      	b.n	80085ac <__multiply+0x5e>

08008678 <__pow5mult>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	4615      	mov	r5, r2
 800867e:	f012 0203 	ands.w	r2, r2, #3
 8008682:	4606      	mov	r6, r0
 8008684:	460f      	mov	r7, r1
 8008686:	d007      	beq.n	8008698 <__pow5mult+0x20>
 8008688:	4c21      	ldr	r4, [pc, #132]	; (8008710 <__pow5mult+0x98>)
 800868a:	3a01      	subs	r2, #1
 800868c:	2300      	movs	r3, #0
 800868e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008692:	f7ff feca 	bl	800842a <__multadd>
 8008696:	4607      	mov	r7, r0
 8008698:	10ad      	asrs	r5, r5, #2
 800869a:	d035      	beq.n	8008708 <__pow5mult+0x90>
 800869c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800869e:	b93c      	cbnz	r4, 80086b0 <__pow5mult+0x38>
 80086a0:	2010      	movs	r0, #16
 80086a2:	f7ff fe6f 	bl	8008384 <malloc>
 80086a6:	6270      	str	r0, [r6, #36]	; 0x24
 80086a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086ac:	6004      	str	r4, [r0, #0]
 80086ae:	60c4      	str	r4, [r0, #12]
 80086b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086b8:	b94c      	cbnz	r4, 80086ce <__pow5mult+0x56>
 80086ba:	f240 2171 	movw	r1, #625	; 0x271
 80086be:	4630      	mov	r0, r6
 80086c0:	f7ff ff3c 	bl	800853c <__i2b>
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	f04f 0800 	mov.w	r8, #0
 80086d2:	07eb      	lsls	r3, r5, #31
 80086d4:	d50a      	bpl.n	80086ec <__pow5mult+0x74>
 80086d6:	4639      	mov	r1, r7
 80086d8:	4622      	mov	r2, r4
 80086da:	4630      	mov	r0, r6
 80086dc:	f7ff ff37 	bl	800854e <__multiply>
 80086e0:	4681      	mov	r9, r0
 80086e2:	4639      	mov	r1, r7
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff fe89 	bl	80083fc <_Bfree>
 80086ea:	464f      	mov	r7, r9
 80086ec:	106d      	asrs	r5, r5, #1
 80086ee:	d00b      	beq.n	8008708 <__pow5mult+0x90>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	b938      	cbnz	r0, 8008704 <__pow5mult+0x8c>
 80086f4:	4622      	mov	r2, r4
 80086f6:	4621      	mov	r1, r4
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7ff ff28 	bl	800854e <__multiply>
 80086fe:	6020      	str	r0, [r4, #0]
 8008700:	f8c0 8000 	str.w	r8, [r0]
 8008704:	4604      	mov	r4, r0
 8008706:	e7e4      	b.n	80086d2 <__pow5mult+0x5a>
 8008708:	4638      	mov	r0, r7
 800870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870e:	bf00      	nop
 8008710:	08008c80 	.word	0x08008c80

08008714 <__lshift>:
 8008714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	460c      	mov	r4, r1
 800871a:	4607      	mov	r7, r0
 800871c:	4616      	mov	r6, r2
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008724:	eb0a 0903 	add.w	r9, sl, r3
 8008728:	6849      	ldr	r1, [r1, #4]
 800872a:	68a3      	ldr	r3, [r4, #8]
 800872c:	f109 0501 	add.w	r5, r9, #1
 8008730:	42ab      	cmp	r3, r5
 8008732:	db32      	blt.n	800879a <__lshift+0x86>
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff fe2d 	bl	8008394 <_Balloc>
 800873a:	2300      	movs	r3, #0
 800873c:	4680      	mov	r8, r0
 800873e:	461a      	mov	r2, r3
 8008740:	f100 0114 	add.w	r1, r0, #20
 8008744:	4553      	cmp	r3, sl
 8008746:	db2b      	blt.n	80087a0 <__lshift+0x8c>
 8008748:	6920      	ldr	r0, [r4, #16]
 800874a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800874e:	f104 0314 	add.w	r3, r4, #20
 8008752:	f016 021f 	ands.w	r2, r6, #31
 8008756:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800875a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800875e:	d025      	beq.n	80087ac <__lshift+0x98>
 8008760:	2000      	movs	r0, #0
 8008762:	f1c2 0e20 	rsb	lr, r2, #32
 8008766:	468a      	mov	sl, r1
 8008768:	681e      	ldr	r6, [r3, #0]
 800876a:	4096      	lsls	r6, r2
 800876c:	4330      	orrs	r0, r6
 800876e:	f84a 0b04 	str.w	r0, [sl], #4
 8008772:	f853 0b04 	ldr.w	r0, [r3], #4
 8008776:	459c      	cmp	ip, r3
 8008778:	fa20 f00e 	lsr.w	r0, r0, lr
 800877c:	d814      	bhi.n	80087a8 <__lshift+0x94>
 800877e:	6048      	str	r0, [r1, #4]
 8008780:	b108      	cbz	r0, 8008786 <__lshift+0x72>
 8008782:	f109 0502 	add.w	r5, r9, #2
 8008786:	3d01      	subs	r5, #1
 8008788:	4638      	mov	r0, r7
 800878a:	f8c8 5010 	str.w	r5, [r8, #16]
 800878e:	4621      	mov	r1, r4
 8008790:	f7ff fe34 	bl	80083fc <_Bfree>
 8008794:	4640      	mov	r0, r8
 8008796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879a:	3101      	adds	r1, #1
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	e7c7      	b.n	8008730 <__lshift+0x1c>
 80087a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80087a4:	3301      	adds	r3, #1
 80087a6:	e7cd      	b.n	8008744 <__lshift+0x30>
 80087a8:	4651      	mov	r1, sl
 80087aa:	e7dc      	b.n	8008766 <__lshift+0x52>
 80087ac:	3904      	subs	r1, #4
 80087ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b2:	459c      	cmp	ip, r3
 80087b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087b8:	d8f9      	bhi.n	80087ae <__lshift+0x9a>
 80087ba:	e7e4      	b.n	8008786 <__lshift+0x72>

080087bc <__mcmp>:
 80087bc:	6903      	ldr	r3, [r0, #16]
 80087be:	690a      	ldr	r2, [r1, #16]
 80087c0:	b530      	push	{r4, r5, lr}
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	d10c      	bne.n	80087e0 <__mcmp+0x24>
 80087c6:	0092      	lsls	r2, r2, #2
 80087c8:	3014      	adds	r0, #20
 80087ca:	3114      	adds	r1, #20
 80087cc:	1884      	adds	r4, r0, r2
 80087ce:	4411      	add	r1, r2
 80087d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087d8:	4295      	cmp	r5, r2
 80087da:	d003      	beq.n	80087e4 <__mcmp+0x28>
 80087dc:	d305      	bcc.n	80087ea <__mcmp+0x2e>
 80087de:	2301      	movs	r3, #1
 80087e0:	4618      	mov	r0, r3
 80087e2:	bd30      	pop	{r4, r5, pc}
 80087e4:	42a0      	cmp	r0, r4
 80087e6:	d3f3      	bcc.n	80087d0 <__mcmp+0x14>
 80087e8:	e7fa      	b.n	80087e0 <__mcmp+0x24>
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ee:	e7f7      	b.n	80087e0 <__mcmp+0x24>

080087f0 <__mdiff>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	460d      	mov	r5, r1
 80087f6:	4607      	mov	r7, r0
 80087f8:	4611      	mov	r1, r2
 80087fa:	4628      	mov	r0, r5
 80087fc:	4614      	mov	r4, r2
 80087fe:	f7ff ffdd 	bl	80087bc <__mcmp>
 8008802:	1e06      	subs	r6, r0, #0
 8008804:	d108      	bne.n	8008818 <__mdiff+0x28>
 8008806:	4631      	mov	r1, r6
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff fdc3 	bl	8008394 <_Balloc>
 800880e:	2301      	movs	r3, #1
 8008810:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008818:	bfa4      	itt	ge
 800881a:	4623      	movge	r3, r4
 800881c:	462c      	movge	r4, r5
 800881e:	4638      	mov	r0, r7
 8008820:	6861      	ldr	r1, [r4, #4]
 8008822:	bfa6      	itte	ge
 8008824:	461d      	movge	r5, r3
 8008826:	2600      	movge	r6, #0
 8008828:	2601      	movlt	r6, #1
 800882a:	f7ff fdb3 	bl	8008394 <_Balloc>
 800882e:	f04f 0e00 	mov.w	lr, #0
 8008832:	60c6      	str	r6, [r0, #12]
 8008834:	692b      	ldr	r3, [r5, #16]
 8008836:	6926      	ldr	r6, [r4, #16]
 8008838:	f104 0214 	add.w	r2, r4, #20
 800883c:	f105 0914 	add.w	r9, r5, #20
 8008840:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008844:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008848:	f100 0114 	add.w	r1, r0, #20
 800884c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008850:	f859 5b04 	ldr.w	r5, [r9], #4
 8008854:	fa1f f38a 	uxth.w	r3, sl
 8008858:	4473      	add	r3, lr
 800885a:	b2ac      	uxth	r4, r5
 800885c:	1b1b      	subs	r3, r3, r4
 800885e:	0c2c      	lsrs	r4, r5, #16
 8008860:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008864:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008868:	b29b      	uxth	r3, r3
 800886a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800886e:	45c8      	cmp	r8, r9
 8008870:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008874:	4694      	mov	ip, r2
 8008876:	f841 4b04 	str.w	r4, [r1], #4
 800887a:	d8e7      	bhi.n	800884c <__mdiff+0x5c>
 800887c:	45bc      	cmp	ip, r7
 800887e:	d304      	bcc.n	800888a <__mdiff+0x9a>
 8008880:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008884:	b183      	cbz	r3, 80088a8 <__mdiff+0xb8>
 8008886:	6106      	str	r6, [r0, #16]
 8008888:	e7c4      	b.n	8008814 <__mdiff+0x24>
 800888a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800888e:	b2a2      	uxth	r2, r4
 8008890:	4472      	add	r2, lr
 8008892:	1413      	asrs	r3, r2, #16
 8008894:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008898:	b292      	uxth	r2, r2
 800889a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800889e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80088a2:	f841 2b04 	str.w	r2, [r1], #4
 80088a6:	e7e9      	b.n	800887c <__mdiff+0x8c>
 80088a8:	3e01      	subs	r6, #1
 80088aa:	e7e9      	b.n	8008880 <__mdiff+0x90>

080088ac <__d2b>:
 80088ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80088b0:	461c      	mov	r4, r3
 80088b2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80088b6:	2101      	movs	r1, #1
 80088b8:	4690      	mov	r8, r2
 80088ba:	f7ff fd6b 	bl	8008394 <_Balloc>
 80088be:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80088c2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80088c6:	4607      	mov	r7, r0
 80088c8:	bb34      	cbnz	r4, 8008918 <__d2b+0x6c>
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	f1b8 0200 	subs.w	r2, r8, #0
 80088d0:	d027      	beq.n	8008922 <__d2b+0x76>
 80088d2:	a802      	add	r0, sp, #8
 80088d4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80088d8:	f7ff fe01 	bl	80084de <__lo0bits>
 80088dc:	9900      	ldr	r1, [sp, #0]
 80088de:	b1f0      	cbz	r0, 800891e <__d2b+0x72>
 80088e0:	9a01      	ldr	r2, [sp, #4]
 80088e2:	f1c0 0320 	rsb	r3, r0, #32
 80088e6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ea:	430b      	orrs	r3, r1
 80088ec:	40c2      	lsrs	r2, r0
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	9201      	str	r2, [sp, #4]
 80088f2:	9b01      	ldr	r3, [sp, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf14      	ite	ne
 80088f8:	2102      	movne	r1, #2
 80088fa:	2101      	moveq	r1, #1
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	6139      	str	r1, [r7, #16]
 8008900:	b1c4      	cbz	r4, 8008934 <__d2b+0x88>
 8008902:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008906:	4404      	add	r4, r0
 8008908:	6034      	str	r4, [r6, #0]
 800890a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800890e:	6028      	str	r0, [r5, #0]
 8008910:	4638      	mov	r0, r7
 8008912:	b002      	add	sp, #8
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800891c:	e7d5      	b.n	80088ca <__d2b+0x1e>
 800891e:	6179      	str	r1, [r7, #20]
 8008920:	e7e7      	b.n	80088f2 <__d2b+0x46>
 8008922:	a801      	add	r0, sp, #4
 8008924:	f7ff fddb 	bl	80084de <__lo0bits>
 8008928:	2101      	movs	r1, #1
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	6139      	str	r1, [r7, #16]
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	3020      	adds	r0, #32
 8008932:	e7e5      	b.n	8008900 <__d2b+0x54>
 8008934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008938:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800893c:	6030      	str	r0, [r6, #0]
 800893e:	6918      	ldr	r0, [r3, #16]
 8008940:	f7ff fdae 	bl	80084a0 <__hi0bits>
 8008944:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008948:	e7e1      	b.n	800890e <__d2b+0x62>

0800894a <_calloc_r>:
 800894a:	b538      	push	{r3, r4, r5, lr}
 800894c:	fb02 f401 	mul.w	r4, r2, r1
 8008950:	4621      	mov	r1, r4
 8008952:	f000 f809 	bl	8008968 <_malloc_r>
 8008956:	4605      	mov	r5, r0
 8008958:	b118      	cbz	r0, 8008962 <_calloc_r+0x18>
 800895a:	4622      	mov	r2, r4
 800895c:	2100      	movs	r1, #0
 800895e:	f7fe fb7a 	bl	8007056 <memset>
 8008962:	4628      	mov	r0, r5
 8008964:	bd38      	pop	{r3, r4, r5, pc}
	...

08008968 <_malloc_r>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	1ccd      	adds	r5, r1, #3
 800896c:	f025 0503 	bic.w	r5, r5, #3
 8008970:	3508      	adds	r5, #8
 8008972:	2d0c      	cmp	r5, #12
 8008974:	bf38      	it	cc
 8008976:	250c      	movcc	r5, #12
 8008978:	2d00      	cmp	r5, #0
 800897a:	4606      	mov	r6, r0
 800897c:	db01      	blt.n	8008982 <_malloc_r+0x1a>
 800897e:	42a9      	cmp	r1, r5
 8008980:	d903      	bls.n	800898a <_malloc_r+0x22>
 8008982:	230c      	movs	r3, #12
 8008984:	6033      	str	r3, [r6, #0]
 8008986:	2000      	movs	r0, #0
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	f000 f869 	bl	8008a60 <__malloc_lock>
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <_malloc_r+0xac>)
 8008990:	6814      	ldr	r4, [r2, #0]
 8008992:	4621      	mov	r1, r4
 8008994:	b991      	cbnz	r1, 80089bc <_malloc_r+0x54>
 8008996:	4c20      	ldr	r4, [pc, #128]	; (8008a18 <_malloc_r+0xb0>)
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	b91b      	cbnz	r3, 80089a4 <_malloc_r+0x3c>
 800899c:	4630      	mov	r0, r6
 800899e:	f000 f83d 	bl	8008a1c <_sbrk_r>
 80089a2:	6020      	str	r0, [r4, #0]
 80089a4:	4629      	mov	r1, r5
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 f838 	bl	8008a1c <_sbrk_r>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d124      	bne.n	80089fa <_malloc_r+0x92>
 80089b0:	230c      	movs	r3, #12
 80089b2:	4630      	mov	r0, r6
 80089b4:	6033      	str	r3, [r6, #0]
 80089b6:	f000 f854 	bl	8008a62 <__malloc_unlock>
 80089ba:	e7e4      	b.n	8008986 <_malloc_r+0x1e>
 80089bc:	680b      	ldr	r3, [r1, #0]
 80089be:	1b5b      	subs	r3, r3, r5
 80089c0:	d418      	bmi.n	80089f4 <_malloc_r+0x8c>
 80089c2:	2b0b      	cmp	r3, #11
 80089c4:	d90f      	bls.n	80089e6 <_malloc_r+0x7e>
 80089c6:	600b      	str	r3, [r1, #0]
 80089c8:	18cc      	adds	r4, r1, r3
 80089ca:	50cd      	str	r5, [r1, r3]
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f848 	bl	8008a62 <__malloc_unlock>
 80089d2:	f104 000b 	add.w	r0, r4, #11
 80089d6:	1d23      	adds	r3, r4, #4
 80089d8:	f020 0007 	bic.w	r0, r0, #7
 80089dc:	1ac3      	subs	r3, r0, r3
 80089de:	d0d3      	beq.n	8008988 <_malloc_r+0x20>
 80089e0:	425a      	negs	r2, r3
 80089e2:	50e2      	str	r2, [r4, r3]
 80089e4:	e7d0      	b.n	8008988 <_malloc_r+0x20>
 80089e6:	684b      	ldr	r3, [r1, #4]
 80089e8:	428c      	cmp	r4, r1
 80089ea:	bf16      	itet	ne
 80089ec:	6063      	strne	r3, [r4, #4]
 80089ee:	6013      	streq	r3, [r2, #0]
 80089f0:	460c      	movne	r4, r1
 80089f2:	e7eb      	b.n	80089cc <_malloc_r+0x64>
 80089f4:	460c      	mov	r4, r1
 80089f6:	6849      	ldr	r1, [r1, #4]
 80089f8:	e7cc      	b.n	8008994 <_malloc_r+0x2c>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d005      	beq.n	8008a10 <_malloc_r+0xa8>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f808 	bl	8008a1c <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d0cf      	beq.n	80089b0 <_malloc_r+0x48>
 8008a10:	6025      	str	r5, [r4, #0]
 8008a12:	e7db      	b.n	80089cc <_malloc_r+0x64>
 8008a14:	20001b4c 	.word	0x20001b4c
 8008a18:	20001b50 	.word	0x20001b50

08008a1c <_sbrk_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4c05      	ldr	r4, [pc, #20]	; (8008a38 <_sbrk_r+0x1c>)
 8008a22:	4605      	mov	r5, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	f7f9 fa42 	bl	8001eb0 <_sbrk>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_sbrk_r+0x1a>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_sbrk_r+0x1a>
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20001d0c 	.word	0x20001d0c

08008a3c <__ascii_mbtowc>:
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	b901      	cbnz	r1, 8008a42 <__ascii_mbtowc+0x6>
 8008a40:	a901      	add	r1, sp, #4
 8008a42:	b142      	cbz	r2, 8008a56 <__ascii_mbtowc+0x1a>
 8008a44:	b14b      	cbz	r3, 8008a5a <__ascii_mbtowc+0x1e>
 8008a46:	7813      	ldrb	r3, [r2, #0]
 8008a48:	600b      	str	r3, [r1, #0]
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	1c10      	adds	r0, r2, #0
 8008a4e:	bf18      	it	ne
 8008a50:	2001      	movne	r0, #1
 8008a52:	b002      	add	sp, #8
 8008a54:	4770      	bx	lr
 8008a56:	4610      	mov	r0, r2
 8008a58:	e7fb      	b.n	8008a52 <__ascii_mbtowc+0x16>
 8008a5a:	f06f 0001 	mvn.w	r0, #1
 8008a5e:	e7f8      	b.n	8008a52 <__ascii_mbtowc+0x16>

08008a60 <__malloc_lock>:
 8008a60:	4770      	bx	lr

08008a62 <__malloc_unlock>:
 8008a62:	4770      	bx	lr

08008a64 <__ascii_wctomb>:
 8008a64:	b149      	cbz	r1, 8008a7a <__ascii_wctomb+0x16>
 8008a66:	2aff      	cmp	r2, #255	; 0xff
 8008a68:	bf8b      	itete	hi
 8008a6a:	238a      	movhi	r3, #138	; 0x8a
 8008a6c:	700a      	strbls	r2, [r1, #0]
 8008a6e:	6003      	strhi	r3, [r0, #0]
 8008a70:	2001      	movls	r0, #1
 8008a72:	bf88      	it	hi
 8008a74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008a78:	4770      	bx	lr
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4770      	bx	lr
	...

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
