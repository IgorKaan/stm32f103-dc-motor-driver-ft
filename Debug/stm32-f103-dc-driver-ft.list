
stm32-f103-dc-driver-ft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006778  08006778  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08006778  08006778  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006778  08006778  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800677c  0800677c  0001677c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08006780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000038  080067b8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b30  080067b8  00021b30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001672f  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bed  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00039380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  0003a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000273b  00000000  00000000  0003b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d1fd  00000000  00000000  0003ddd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ac5c  00000000  00000000  0004afd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5c2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d60  00000000  00000000  000c5ca8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	0800668c 	.word	0x0800668c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	0800668c 	.word	0x0800668c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <calculate_pwm>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculate_pwm( float target_speed, float current_speed )
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	float error = target_speed - current_speed;
 8000742:	6839      	ldr	r1, [r7, #0]
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fd07 	bl	8000158 <__aeabi_fsub>
 800074a:	4603      	mov	r3, r0
 800074c:	61bb      	str	r3, [r7, #24]

	float Pout = _Kp * error;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <calculate_pwm+0xa4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	69b8      	ldr	r0, [r7, #24]
 8000756:	f7ff fe09 	bl	800036c <__aeabi_fmul>
 800075a:	4603      	mov	r3, r0
 800075c:	617b      	str	r3, [r7, #20]

	float derivative = (error - _pre_error) / _dt;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <calculate_pwm+0xa8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	69b8      	ldr	r0, [r7, #24]
 8000766:	f7ff fcf7 	bl	8000158 <__aeabi_fsub>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <calculate_pwm+0xac>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f7ff fead 	bl	80004d4 <__aeabi_fdiv>
 800077a:	4603      	mov	r3, r0
 800077c:	613b      	str	r3, [r7, #16]
	float Dout = _Kd * derivative;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <calculate_pwm+0xb0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	6938      	ldr	r0, [r7, #16]
 8000786:	f7ff fdf1 	bl	800036c <__aeabi_fmul>
 800078a:	4603      	mov	r3, r0
 800078c:	60fb      	str	r3, [r7, #12]

	float output = Pout + Dout;
 800078e:	68f9      	ldr	r1, [r7, #12]
 8000790:	6978      	ldr	r0, [r7, #20]
 8000792:	f7ff fce3 	bl	800015c <__addsf3>
 8000796:	4603      	mov	r3, r0
 8000798:	61fb      	str	r3, [r7, #28]

    if( output > _max )
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <calculate_pwm+0xb4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	69f8      	ldr	r0, [r7, #28]
 80007a2:	f7ff ff9f 	bl	80006e4 <__aeabi_fcmpgt>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <calculate_pwm+0x7c>
        output = _max;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <calculate_pwm+0xb4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	e00b      	b.n	80007cc <calculate_pwm+0x94>
    else if( output < _min )
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <calculate_pwm+0xb8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	69f8      	ldr	r0, [r7, #28]
 80007bc:	f7ff ff74 	bl	80006a8 <__aeabi_fcmplt>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <calculate_pwm+0x94>
        output = _min;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <calculate_pwm+0xb8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	61fb      	str	r3, [r7, #28]

    _pre_error = error;
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <calculate_pwm+0xa8>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	6013      	str	r3, [r2, #0]

    return output;
 80007d2:	69fb      	ldr	r3, [r7, #28]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000001c 	.word	0x2000001c
 80007e0:	20000068 	.word	0x20000068
 80007e4:	2000000c 	.word	0x2000000c
 80007e8:	20000020 	.word	0x20000020
 80007ec:	20000014 	.word	0x20000014
 80007f0:	20000018 	.word	0x20000018

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 ff00 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f886 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f9c8 	bl	8000b94 <MX_GPIO_Init>
  MX_CAN_Init();
 8000804:	f000 f8c8 	bl	8000998 <MX_CAN_Init>
  MX_TIM2_Init();
 8000808:	f000 f94e 	bl	8000aa8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800080c:	f000 f8fa 	bl	8000a04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000810:	482d      	ldr	r0, [pc, #180]	; (80008c8 <main+0xd4>)
 8000812:	f002 fc3c 	bl	800308e <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000816:	210c      	movs	r1, #12
 8000818:	482c      	ldr	r0, [pc, #176]	; (80008cc <main+0xd8>)
 800081a:	f002 fc8f 	bl	800313c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <main+0xdc>)
 8000824:	f001 ff94 	bl	8002750 <HAL_GPIO_WritePin>

  pHeader.DLC = 4;
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <main+0xe0>)
 800082a:	2204      	movs	r2, #4
 800082c:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <main+0xe0>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <main+0xe0>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  pHeader.StdId = header_id;
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <main+0xe4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <main+0xe0>)
 8000840:	6013      	str	r3, [r2, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <main+0xe8>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <main+0xec>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	015b      	lsls	r3, r3, #5
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <main+0xe8>)
 8000850:	6013      	str	r3, [r2, #0]
  sFilterConfig.FilterIdLow = 0;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <main+0xe8>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <main+0xe8>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <main+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <main+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <main+0xe8>)
 800086c:	2201      	movs	r2, #1
 800086e:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <main+0xe8>)
 8000872:	2201      	movs	r2, #1
 8000874:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000876:	4919      	ldr	r1, [pc, #100]	; (80008dc <main+0xe8>)
 8000878:	481a      	ldr	r0, [pc, #104]	; (80008e4 <main+0xf0>)
 800087a:	f000 ffec 	bl	8001856 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 800087e:	4819      	ldr	r0, [pc, #100]	; (80008e4 <main+0xf0>)
 8000880:	f001 f8b2 	bl	80019e8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000884:	2102      	movs	r1, #2
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <main+0xf0>)
 8000888:	f001 fadd 	bl	8001e46 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800088c:	f003 fa2c 	bl	8003ce8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of firstTask */
  firstTaskHandle = osThreadNew(StartDefaultTask, NULL, &firstTask_attributes);
 8000890:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <main+0xf4>)
 8000892:	2100      	movs	r1, #0
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <main+0xf8>)
 8000896:	f003 fa8d 	bl	8003db4 <osThreadNew>
 800089a:	4602      	mov	r2, r0
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <main+0xfc>)
 800089e:	601a      	str	r2, [r3, #0]

  /* creation of secondTask */
  secondTaskHandle = osThreadNew(StartTask02, NULL, &secondTask_attributes);
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <main+0x100>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <main+0x104>)
 80008a6:	f003 fa85 	bl	8003db4 <osThreadNew>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <main+0x108>)
 80008ae:	601a      	str	r2, [r3, #0]

  /* creation of thirdTask */
  thirdTaskHandle = osThreadNew(StartTask03, NULL, &thirdTask_attributes);
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <main+0x10c>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <main+0x110>)
 80008b6:	f003 fa7d 	bl	8003db4 <osThreadNew>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <main+0x114>)
 80008be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008c0:	f003 fa44 	bl	8003d4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <main+0xd0>
 80008c6:	bf00      	nop
 80008c8:	200019e8 	.word	0x200019e8
 80008cc:	20001a34 	.word	0x20001a34
 80008d0:	40010800 	.word	0x40010800
 80008d4:	20001a90 	.word	0x20001a90
 80008d8:	20000004 	.word	0x20000004
 80008dc:	20001978 	.word	0x20001978
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200019ac 	.word	0x200019ac
 80008e8:	080066f4 	.word	0x080066f4
 80008ec:	08001021 	.word	0x08001021
 80008f0:	200019d4 	.word	0x200019d4
 80008f4:	08006718 	.word	0x08006718
 80008f8:	08001109 	.word	0x08001109
 80008fc:	200019a0 	.word	0x200019a0
 8000900:	0800673c 	.word	0x0800673c
 8000904:	0800111d 	.word	0x0800111d
 8000908:	200019dc 	.word	0x200019dc

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b090      	sub	sp, #64	; 0x40
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f005 fead 	bl	800667a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092e:	2301      	movs	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093e:	2301      	movs	r3, #1
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800094c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4618      	mov	r0, r3
 8000958:	f001 ff34 	bl	80027c4 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000962:	f000 fc3f 	bl	80011e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f002 f99f 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800098c:	f000 fc2a 	bl	80011e4 <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3740      	adds	r7, #64	; 0x40
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_CAN_Init+0x64>)
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <MX_CAN_Init+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_CAN_Init+0x64>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_CAN_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_CAN_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_CAN_Init+0x64>)
 80009b6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80009ba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_CAN_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_CAN_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_CAN_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_CAN_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_CAN_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_CAN_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_CAN_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_CAN_Init+0x64>)
 80009e8:	f000 fe3a 	bl	8001660 <HAL_CAN_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80009f2:	f000 fbf7 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200019ac 	.word	0x200019ac
 8000a00:	40006400 	.word	0x40006400

08000a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a22:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a28:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000a2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a36:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a50:	f002 faf2 	bl	8003038 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 fbc3 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a6c:	f002 fd66 	bl	800353c <HAL_TIM_ConfigClockSource>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a76:	f000 fbb5 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM1_Init+0x9c>)
 8000a88:	f003 f8d8 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000a92:	f000 fba7 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200019e8 	.word	0x200019e8
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000aee:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000af2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b02:	f002 fa99 	bl	8003038 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b0c:	f000 fb6a 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481c      	ldr	r0, [pc, #112]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b1e:	f002 fd0d 	bl	800353c <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b28:	f000 fb5c 	bl	80011e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2c:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b2e:	f002 fad1 	bl	80030d4 <HAL_TIM_PWM_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b38:	f000 fb54 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b4c:	f003 f876 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b56:	f000 fb45 	bl	80011e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b72:	f002 fc1d 	bl	80033b0 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b7c:	f000 fb32 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM2_Init+0xe8>)
 8000b82:	f000 fbf3 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20001a34 	.word	0x20001a34

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bae:	f043 0320 	orr.w	r3, r3, #32
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0320 	and.w	r3, r3, #32
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2a      	ldr	r2, [pc, #168]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_GPIO_Init+0xdc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	481f      	ldr	r0, [pc, #124]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bf6:	f001 fdab 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c00:	481d      	ldr	r0, [pc, #116]	; (8000c78 <MX_GPIO_Init+0xe4>)
 8000c02:	f001 fda5 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4815      	ldr	r0, [pc, #84]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000c1e:	f001 fc3d 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_GPIO_Init+0xe8>)
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4619      	mov	r1, r3
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <MX_GPIO_Init+0xe4>)
 8000c36:	f001 fc31 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4809      	ldr	r0, [pc, #36]	; (8000c78 <MX_GPIO_Init+0xe4>)
 8000c54:	f001 fc22 	bl	800249c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2007      	movs	r0, #7
 8000c5e:	f001 fbf2 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f001 fc0b 	bl	800247e <HAL_NVIC_EnableIRQ>

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	10110000 	.word	0x10110000

08000c80 <rotate_ccw>:

/* USER CODE BEGIN 4 */
void rotate_ccw(uint8_t r_speed) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	482b      	ldr	r0, [pc, #172]	; (8000d40 <rotate_ccw+0xc0>)
 8000c92:	f001 fd5d 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9c:	4828      	ldr	r0, [pc, #160]	; (8000d40 <rotate_ccw+0xc0>)
 8000c9e:	f001 fd57 	bl	8002750 <HAL_GPIO_WritePin>
	can_tx_side = 1;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <rotate_ccw+0xc4>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm((float)(r_speed), (float)encoder_speed);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fb06 	bl	80002bc <__aeabi_ui2f>
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <rotate_ccw+0xc8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fb00 	bl	80002bc <__aeabi_ui2f>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fd39 	bl	8000738 <calculate_pwm>
 8000cc6:	60f8      	str	r0, [r7, #12]
	u_pwm += inc;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <rotate_ccw+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa44 	bl	800015c <__addsf3>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <rotate_ccw+0xcc>)
 8000cda:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <rotate_ccw+0xcc>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <rotate_ccw+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	f7ff fcfc 	bl	80006e4 <__aeabi_fcmpgt>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d004      	beq.n	8000cfc <rotate_ccw+0x7c>
		u_pwm = _Max;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <rotate_ccw+0xd0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <rotate_ccw+0xcc>)
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e00e      	b.n	8000d1a <rotate_ccw+0x9a>
	else if( u_pwm < _Min )
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <rotate_ccw+0xcc>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <rotate_ccw+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4610      	mov	r0, r2
 8000d08:	f7ff fcce 	bl	80006a8 <__aeabi_fcmplt>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <rotate_ccw+0x9a>
		u_pwm = _Min;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <rotate_ccw+0xd4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <rotate_ccw+0xcc>)
 8000d18:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <rotate_ccw+0xcc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fcea 	bl	80006f8 <__aeabi_f2uiz>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <rotate_ccw+0xd8>)
 8000d2a:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <rotate_ccw+0xd8>)
 8000d2e:	881a      	ldrh	r2, [r3, #0]
 8000d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d34:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	200019d9 	.word	0x200019d9
 8000d48:	20001aa9 	.word	0x20001aa9
 8000d4c:	2000006c 	.word	0x2000006c
 8000d50:	20000010 	.word	0x20000010
 8000d54:	20000064 	.word	0x20000064
 8000d58:	20000060 	.word	0x20000060

08000d5c <rotate_cw>:

void rotate_cw(uint8_t l_speed) {
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6c:	482e      	ldr	r0, [pc, #184]	; (8000e28 <rotate_cw+0xcc>)
 8000d6e:	f001 fcef 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	482b      	ldr	r0, [pc, #172]	; (8000e28 <rotate_cw+0xcc>)
 8000d7a:	f001 fce9 	bl	8002750 <HAL_GPIO_WritePin>
	can_tx_side = 2;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <rotate_cw+0xd0>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm((float)(l_speed), (float)encoder_speed);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fa98 	bl	80002bc <__aeabi_ui2f>
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <rotate_cw+0xd4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fa92 	bl	80002bc <__aeabi_ui2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff fccb 	bl	8000738 <calculate_pwm>
 8000da2:	60f8      	str	r0, [r7, #12]
	u_pwm += inc;
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <rotate_cw+0xd8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68f9      	ldr	r1, [r7, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff f9d6 	bl	800015c <__addsf3>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <rotate_cw+0xd8>)
 8000db6:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <rotate_cw+0xd8>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <rotate_cw+0xdc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	f7ff fc8e 	bl	80006e4 <__aeabi_fcmpgt>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d004      	beq.n	8000dd8 <rotate_cw+0x7c>
		u_pwm = _Max;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <rotate_cw+0xdc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <rotate_cw+0xd8>)
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	e00e      	b.n	8000df6 <rotate_cw+0x9a>
	else if( u_pwm < _Min )
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <rotate_cw+0xd8>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <rotate_cw+0xe0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	4610      	mov	r0, r2
 8000de4:	f7ff fc60 	bl	80006a8 <__aeabi_fcmplt>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <rotate_cw+0x9a>
		u_pwm = _Min;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <rotate_cw+0xe0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <rotate_cw+0xd8>)
 8000df4:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <rotate_cw+0xd8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fc7c 	bl	80006f8 <__aeabi_f2uiz>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <rotate_cw+0xe4>)
 8000e06:	801a      	strh	r2, [r3, #0]
	pwm = TIM2->CCR4;
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <rotate_cw+0xe8>)
 8000e12:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <rotate_cw+0xe4>)
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	200019d9 	.word	0x200019d9
 8000e30:	20001aa9 	.word	0x20001aa9
 8000e34:	2000006c 	.word	0x2000006c
 8000e38:	20000010 	.word	0x20000010
 8000e3c:	20000064 	.word	0x20000064
 8000e40:	20000060 	.word	0x20000060
 8000e44:	20001a30 	.word	0x20001a30

08000e48 <reduce_speed_ccw>:

void reduce_speed_ccw() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e54:	4829      	ldr	r0, [pc, #164]	; (8000efc <reduce_speed_ccw+0xb4>)
 8000e56:	f001 fc7b 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e60:	4826      	ldr	r0, [pc, #152]	; (8000efc <reduce_speed_ccw+0xb4>)
 8000e62:	f001 fc75 	bl	8002750 <HAL_GPIO_WritePin>
	can_tx_side = 1;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <reduce_speed_ccw+0xb8>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm(0, (float)encoder_speed);
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <reduce_speed_ccw+0xbc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fa23 	bl	80002bc <__aeabi_ui2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0000 	mov.w	r0, #0
 8000e7e:	f7ff fc5b 	bl	8000738 <calculate_pwm>
 8000e82:	6078      	str	r0, [r7, #4]
	u_pwm += inc;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f966 	bl	800015c <__addsf3>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000e96:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <reduce_speed_ccw+0xc4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f7ff fc1e 	bl	80006e4 <__aeabi_fcmpgt>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <reduce_speed_ccw+0x70>
		u_pwm = _Max;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <reduce_speed_ccw+0xc4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e00e      	b.n	8000ed6 <reduce_speed_ccw+0x8e>
	else if( u_pwm < _Min )
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <reduce_speed_ccw+0xc8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff fbf0 	bl	80006a8 <__aeabi_fcmplt>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <reduce_speed_ccw+0x8e>
		u_pwm = _Min;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <reduce_speed_ccw+0xc8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000ed4:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <reduce_speed_ccw+0xc0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fc0c 	bl	80006f8 <__aeabi_f2uiz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <reduce_speed_ccw+0xcc>)
 8000ee6:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <reduce_speed_ccw+0xcc>)
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	200019d9 	.word	0x200019d9
 8000f04:	20001aa9 	.word	0x20001aa9
 8000f08:	2000006c 	.word	0x2000006c
 8000f0c:	20000010 	.word	0x20000010
 8000f10:	20000064 	.word	0x20000064
 8000f14:	20000060 	.word	0x20000060

08000f18 <reduce_speed_cw>:

void reduce_speed_cw() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <reduce_speed_cw+0xb4>)
 8000f26:	f001 fc13 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f30:	4826      	ldr	r0, [pc, #152]	; (8000fcc <reduce_speed_cw+0xb4>)
 8000f32:	f001 fc0d 	bl	8002750 <HAL_GPIO_WritePin>
	can_tx_side = 2;
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <reduce_speed_cw+0xb8>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm(0, (float)encoder_speed);
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <reduce_speed_cw+0xbc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff f9bb 	bl	80002bc <__aeabi_ui2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	f7ff fbf3 	bl	8000738 <calculate_pwm>
 8000f52:	6078      	str	r0, [r7, #4]
	u_pwm += inc;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f8fe 	bl	800015c <__addsf3>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000f66:	601a      	str	r2, [r3, #0]
	if( u_pwm > _Max )
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <reduce_speed_cw+0xc4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	4610      	mov	r0, r2
 8000f74:	f7ff fbb6 	bl	80006e4 <__aeabi_fcmpgt>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <reduce_speed_cw+0x70>
		u_pwm = _Max;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <reduce_speed_cw+0xc4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00e      	b.n	8000fa6 <reduce_speed_cw+0x8e>
	else if( u_pwm < _Min )
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <reduce_speed_cw+0xc8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f7ff fb88 	bl	80006a8 <__aeabi_fcmplt>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <reduce_speed_cw+0x8e>
		u_pwm = _Min;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <reduce_speed_cw+0xc8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000fa4:	6013      	str	r3, [r2, #0]
	dc_driver_pwm = u_pwm;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <reduce_speed_cw+0xc0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fba4 	bl	80006f8 <__aeabi_f2uiz>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <reduce_speed_cw+0xcc>)
 8000fb6:	801a      	strh	r2, [r3, #0]
	TIM2->CCR4 = (uint16_t)dc_driver_pwm;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <reduce_speed_cw+0xcc>)
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010c00 	.word	0x40010c00
 8000fd0:	200019d9 	.word	0x200019d9
 8000fd4:	20001aa9 	.word	0x20001aa9
 8000fd8:	2000006c 	.word	0x2000006c
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000064 	.word	0x20000064
 8000fe4:	20000060 	.word	0x20000060

08000fe8 <stop_movement>:

void stop_movement(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <stop_movement+0x30>)
 8000ff4:	f001 fbac 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <stop_movement+0x30>)
 8001000:	f001 fba6 	bl	8002750 <HAL_GPIO_WritePin>
	TIM2->CCR4 = 0;
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	2200      	movs	r2, #0
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
	u_pwm = 0;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <stop_movement+0x34>)
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40010c00 	.word	0x40010c00
 800101c:	2000006c 	.word	0x2000006c

08001020 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if ((can_rx_side == 1)&&(status == State_CCW)) {
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <StartDefaultTask+0xd4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10f      	bne.n	8001050 <StartDefaultTask+0x30>
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <StartDefaultTask+0xd8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d10b      	bne.n	8001050 <StartDefaultTask+0x30>
		rotate_ccw(can_rx_speed);
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <StartDefaultTask+0xdc>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe1f 	bl	8000c80 <rotate_ccw>
		status = State_CCW;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <StartDefaultTask+0xd8>)
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
		current_st = 1;
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <StartDefaultTask+0xe0>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e04c      	b.n	80010ea <StartDefaultTask+0xca>
	}
	else if ((can_rx_side == 0)&&(status == State_CCW)) {
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <StartDefaultTask+0xd4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d113      	bne.n	8001080 <StartDefaultTask+0x60>
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <StartDefaultTask+0xd8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d10f      	bne.n	8001080 <StartDefaultTask+0x60>
		while (encoder_speed != 0) {
 8001060:	e001      	b.n	8001066 <StartDefaultTask+0x46>
			reduce_speed_ccw();
 8001062:	f7ff fef1 	bl	8000e48 <reduce_speed_ccw>
		while (encoder_speed != 0) {
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <StartDefaultTask+0xe4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <StartDefaultTask+0x42>
		}
		stop_movement();
 800106e:	f7ff ffbb 	bl	8000fe8 <stop_movement>
		current_st = 2;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <StartDefaultTask+0xe0>)
 8001074:	2202      	movs	r2, #2
 8001076:	701a      	strb	r2, [r3, #0]
		status = State_CW;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <StartDefaultTask+0xd8>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e034      	b.n	80010ea <StartDefaultTask+0xca>
	}
	else if ((can_rx_side == 0)&&(status == State_CW)) {
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <StartDefaultTask+0xd4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10f      	bne.n	80010a8 <StartDefaultTask+0x88>
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <StartDefaultTask+0xd8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10b      	bne.n	80010a8 <StartDefaultTask+0x88>
		rotate_cw(can_rx_speed);
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <StartDefaultTask+0xdc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe61 	bl	8000d5c <rotate_cw>
		current_st = 3;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <StartDefaultTask+0xe0>)
 800109c:	2203      	movs	r2, #3
 800109e:	701a      	strb	r2, [r3, #0]
		status = State_CW;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <StartDefaultTask+0xd8>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e020      	b.n	80010ea <StartDefaultTask+0xca>
	}
	else if ((can_rx_side == 1)&&(status == State_CW)) {
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <StartDefaultTask+0xd4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d113      	bne.n	80010d8 <StartDefaultTask+0xb8>
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <StartDefaultTask+0xd8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <StartDefaultTask+0xb8>
		while (encoder_speed != 0) {
 80010b8:	e001      	b.n	80010be <StartDefaultTask+0x9e>
			reduce_speed_cw();
 80010ba:	f7ff ff2d 	bl	8000f18 <reduce_speed_cw>
		while (encoder_speed != 0) {
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <StartDefaultTask+0xe4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <StartDefaultTask+0x9a>
		}
		stop_movement();
 80010c6:	f7ff ff8f 	bl	8000fe8 <stop_movement>
		current_st = 4;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <StartDefaultTask+0xe0>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	701a      	strb	r2, [r3, #0]
		status = State_CCW;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <StartDefaultTask+0xd8>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e008      	b.n	80010ea <StartDefaultTask+0xca>
	}
	else if (can_rx_speed == 0) {
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <StartDefaultTask+0xdc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d104      	bne.n	80010ea <StartDefaultTask+0xca>
		current_st = 5;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <StartDefaultTask+0xe0>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	701a      	strb	r2, [r3, #0]
		stop_movement();
 80010e6:	f7ff ff7f 	bl	8000fe8 <stop_movement>
	}
    osDelay(20);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f002 ff0c 	bl	8003f08 <osDelay>
    if ((can_rx_side == 1)&&(status == State_CCW)) {
 80010f0:	e79a      	b.n	8001028 <StartDefaultTask+0x8>
 80010f2:	bf00      	nop
 80010f4:	200019d8 	.word	0x200019d8
 80010f8:	20000024 	.word	0x20000024
 80010fc:	20001aa8 	.word	0x20001aa8
 8001100:	20000062 	.word	0x20000062
 8001104:	20001aa9 	.word	0x20001aa9

08001108 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(5000);
 8001110:	f241 3088 	movw	r0, #5000	; 0x1388
 8001114:	f002 fef8 	bl	8003f08 <osDelay>
 8001118:	e7fa      	b.n	8001110 <StartTask02+0x8>
	...

0800111c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	driver_tx_data[0] = encoder_speed;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <StartTask03+0x2c>)
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <StartTask03+0x30>)
 800112a:	701a      	strb	r2, [r3, #0]
	driver_tx_data[1] = can_tx_side;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <StartTask03+0x34>)
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <StartTask03+0x30>)
 8001132:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_tx_data, &TxMailbox);
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <StartTask03+0x38>)
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <StartTask03+0x30>)
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <StartTask03+0x3c>)
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <StartTask03+0x40>)
 800113c:	f000 fc98 	bl	8001a70 <HAL_CAN_AddTxMessage>
    osDelay(20);
 8001140:	2014      	movs	r0, #20
 8001142:	f002 fee1 	bl	8003f08 <osDelay>
	driver_tx_data[0] = encoder_speed;
 8001146:	e7ed      	b.n	8001124 <StartTask03+0x8>
 8001148:	20001aa9 	.word	0x20001aa9
 800114c:	20000054 	.word	0x20000054
 8001150:	200019d9 	.word	0x200019d9
 8001154:	20001a28 	.word	0x20001a28
 8001158:	20001a90 	.word	0x20001a90
 800115c:	200019ac 	.word	0x200019ac

08001160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001172:	f000 fa59 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d121      	bne.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x64>
	encoder_speed = (uint8_t)(encoder_tick*(float)300/encoder_ratio);
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f89c 	bl	80002c4 <__aeabi_i2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4912      	ldr	r1, [pc, #72]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f8eb 	bl	800036c <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	461c      	mov	r4, r3
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f88c 	bl	80002bc <__aeabi_ui2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff f993 	bl	80004d4 <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff faa1 	bl	80006f8 <__aeabi_f2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011bc:	701a      	strb	r2, [r3, #0]
	encoder_tick = 0;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	40000800 	.word	0x40000800
 80011d0:	40012c00 	.word	0x40012c00
 80011d4:	200019e0 	.word	0x200019e0
 80011d8:	43960000 	.word	0x43960000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20001aa9 	.word	0x20001aa9

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_MspInit+0x5c>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_MspInit+0x5c>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_MspInit+0x5c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_MspInit+0x5c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_MspInit+0x60>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_MspInit+0x60>)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000

08001254 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <HAL_CAN_MspInit+0x9c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d139      	bne.n	80012e8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 800127a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800127e:	61d3      	str	r3, [r2, #28]
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_CAN_MspInit+0xa0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <HAL_CAN_MspInit+0xa4>)
 80012ba:	f001 f8ef 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <HAL_CAN_MspInit+0xa4>)
 80012d4:	f001 f8e2 	bl	800249c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2014      	movs	r0, #20
 80012de:	f001 f8b2 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012e2:	2014      	movs	r0, #20
 80012e4:	f001 f8cb 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40006400 	.word	0x40006400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a16      	ldr	r2, [pc, #88]	; (8001364 <HAL_TIM_Base_MspInit+0x68>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d114      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2019      	movs	r0, #25
 800132c:	f001 f88b 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f001 f8a4 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001336:	e010      	b.n	800135a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d10b      	bne.n	800135a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138a:	d117      	bne.n	80013bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_TIM_MspPostInit+0x58>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <HAL_TIM_MspPostInit+0x58>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_TIM_MspPostInit+0x58>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <HAL_TIM_MspPostInit+0x5c>)
 80013b8:	f001 f870 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	201e      	movs	r0, #30
 80013e2:	f001 f830 	bl	8002446 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013e6:	201e      	movs	r0, #30
 80013e8:	f001 f849 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_InitTick+0xa0>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_InitTick+0xa0>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_InitTick+0xa0>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001404:	f107 0210 	add.w	r2, r7, #16
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fdc4 	bl	8002f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001414:	f001 fdae 	bl	8002f74 <HAL_RCC_GetPCLK1Freq>
 8001418:	4603      	mov	r3, r0
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <HAL_InitTick+0xa4>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	3b01      	subs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_InitTick+0xa8>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_InitTick+0xac>)
 8001430:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_InitTick+0xa8>)
 8001434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001438:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_InitTick+0xa8>)
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_InitTick+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_InitTick+0xa8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_InitTick+0xa8>)
 800144e:	f001 fdf3 	bl	8003038 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d104      	bne.n	8001462 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_InitTick+0xa8>)
 800145a:	f001 fe18 	bl	800308e <HAL_TIM_Base_Start_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	431bde83 	.word	0x431bde83
 8001474:	20001aac 	.word	0x20001aac
 8001478:	40000800 	.word	0x40000800

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <HardFault_Handler+0x4>

0800148e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <BusFault_Handler+0x4>

0800149a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <UsageFault_Handler+0x4>

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f001 f965 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  encoder_tick++;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <EXTI1_IRQHandler+0x2c>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <EXTI1_IRQHandler+0x2c>)
 80014c2:	801a      	strh	r2, [r3, #0]
  f++;
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <EXTI1_IRQHandler+0x30>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <EXTI1_IRQHandler+0x30>)
 80014d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200019e0 	.word	0x200019e0
 80014dc:	200019a8 	.word	0x200019a8

080014e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, can_rx_control_data);
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <USB_LP_CAN1_RX0_IRQHandler+0x30>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 80014ec:	f000 fb9a 	bl	8001c24 <HAL_CAN_GetRxMessage>
  can_rx_side = can_rx_control_data[0];
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <USB_LP_CAN1_RX0_IRQHandler+0x38>)
 80014f6:	701a      	strb	r2, [r3, #0]
  can_rx_speed = can_rx_control_data[1];
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <USB_LP_CAN1_RX0_IRQHandler+0x2c>)
 80014fa:	785a      	ldrb	r2, [r3, #1]
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 80014fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 8001502:	f000 fcc5 	bl	8001e90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000058 	.word	0x20000058
 8001510:	20001a74 	.word	0x20001a74
 8001514:	200019ac 	.word	0x200019ac
 8001518:	200019d8 	.word	0x200019d8
 800151c:	20001aa8 	.word	0x20001aa8

08001520 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM1_UP_IRQHandler+0x10>)
 8001526:	f001 fe3b 	bl	80031a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200019e8 	.word	0x200019e8

08001534 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM4_IRQHandler+0x10>)
 800153a:	f001 fe31 	bl	80031a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001aac 	.word	0x20001aac

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <SystemInit+0x5c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <SystemInit+0x5c>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <SystemInit+0x5c>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4911      	ldr	r1, [pc, #68]	; (80015a4 <SystemInit+0x5c>)
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <SystemInit+0x60>)
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <SystemInit+0x5c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <SystemInit+0x5c>)
 800156a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <SystemInit+0x5c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SystemInit+0x5c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SystemInit+0x5c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <SystemInit+0x5c>)
 8001586:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800158a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SystemInit+0x5c>)
 800158e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001592:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SystemInit+0x64>)
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
#endif 
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40021000 	.word	0x40021000
 80015a8:	f8ff0000 	.word	0xf8ff0000
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d6:	f7ff ffb7 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f005 f81f 	bl	800661c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff f909 	bl	80007f4 <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r3, =_sidata
 80015e4:	08006780 	.word	0x08006780
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ec:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 80015f0:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 80015f4:	20001b30 	.word	0x20001b30

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 ff0f 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff feda 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fdea 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	20000030 	.word	0x20000030
 8001648:	20001aec 	.word	0x20001aec

0800164c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <HAL_GetTick+0x10>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20001aec 	.word	0x20001aec

08001660 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0ed      	b.n	800184e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fde8 	bl	8001254 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0202 	bic.w	r2, r2, #2
 8001692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001694:	f7ff ffda 	bl	800164c <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800169a:	e012      	b.n	80016c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800169c:	f7ff ffd6 	bl	800164c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b0a      	cmp	r3, #10
 80016a8:	d90b      	bls.n	80016c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2205      	movs	r2, #5
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0c5      	b.n	800184e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1e5      	bne.n	800169c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e0:	f7ff ffb4 	bl	800164c <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e6:	e012      	b.n	800170e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e8:	f7ff ffb0 	bl	800164c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b0a      	cmp	r3, #10
 80016f4:	d90b      	bls.n	800170e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2205      	movs	r2, #5
 8001706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e09f      	b.n	800184e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0e5      	beq.n	80016e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d108      	bne.n	8001736 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e007      	b.n	8001746 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e5b      	ldrb	r3, [r3, #25]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e007      	b.n	8001770 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7e9b      	ldrb	r3, [r3, #26]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d108      	bne.n	800178a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	e007      	b.n	800179a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0220 	bic.w	r2, r2, #32
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7edb      	ldrb	r3, [r3, #27]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0210 	bic.w	r2, r2, #16
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e007      	b.n	80017c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0210 	orr.w	r2, r2, #16
 80017c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7f1b      	ldrb	r3, [r3, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e007      	b.n	80017ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0208 	bic.w	r2, r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7f5b      	ldrb	r3, [r3, #29]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0204 	orr.w	r2, r2, #4
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e007      	b.n	8001818 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0204 	bic.w	r2, r2, #4
 8001816:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	ea42 0103 	orr.w	r1, r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800186e:	7cfb      	ldrb	r3, [r7, #19]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d003      	beq.n	800187c <HAL_CAN_ConfigFilter+0x26>
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	2b02      	cmp	r3, #2
 8001878:	f040 80aa 	bne.w	80019d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2201      	movs	r2, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d123      	bne.n	80018fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43db      	mvns	r3, r3
 80018c0:	401a      	ands	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3248      	adds	r2, #72	; 0x48
 80018de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	3348      	adds	r3, #72	; 0x48
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d122      	bne.n	800194c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3248      	adds	r2, #72	; 0x48
 800192c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001942:	6979      	ldr	r1, [r7, #20]
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001966:	e007      	b.n	8001978 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001992:	e007      	b.n	80019a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c2:	f023 0201 	bic.w	r2, r3, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e006      	b.n	80019de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d12e      	bne.n	8001a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fe1a 	bl	800164c <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fe16 	bl	800164c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e012      	b.n	8001a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e5      	bne.n	8001a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e006      	b.n	8001a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_AddTxMessage+0x2c>
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 80b8 	bne.w	8001c0c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a0 	beq.w	8001bfc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	0e1b      	lsrs	r3, r3, #24
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d907      	bls.n	8001adc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e09e      	b.n	8001c1a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001adc:	2201      	movs	r2, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10d      	bne.n	8001b0a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3318      	adds	r3, #24
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	440b      	add	r3, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e00f      	b.n	8001b2a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3318      	adds	r3, #24
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3318      	adds	r3, #24
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	440b      	add	r3, r1
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	7d1b      	ldrb	r3, [r3, #20]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d111      	bne.n	8001b6a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	4413      	add	r3, r2
 8001b52:	3304      	adds	r3, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6811      	ldr	r1, [r2, #0]
 8001b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3318      	adds	r3, #24
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	3304      	adds	r3, #4
 8001b68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3307      	adds	r3, #7
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	061a      	lsls	r2, r3, #24
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3306      	adds	r3, #6
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3305      	adds	r3, #5
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4313      	orrs	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	3204      	adds	r2, #4
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6811      	ldr	r1, [r2, #0]
 8001b92:	ea43 0200 	orr.w	r2, r3, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ba0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	061a      	lsls	r2, r3, #24
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3302      	adds	r3, #2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	6811      	ldr	r1, [r2, #0]
 8001bc8:	ea43 0200 	orr.w	r2, r3, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001bd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3318      	adds	r3, #24
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	6811      	ldr	r1, [r2, #0]
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	440b      	add	r3, r1
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e00e      	b.n	8001c1a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e006      	b.n	8001c1a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d003      	beq.n	8001c48 <HAL_CAN_GetRxMessage+0x24>
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80f3 	bne.w	8001e2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10e      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e7      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d107      	bne.n	8001c8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0d8      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0204 	and.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	331b      	adds	r3, #27
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4413      	add	r3, r2
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0d5b      	lsrs	r3, r3, #21
 8001cb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e00b      	b.n	8001cda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	331b      	adds	r3, #27
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	331b      	adds	r3, #27
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0202 	and.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	331b      	adds	r3, #27
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	331b      	adds	r3, #27
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0a1a      	lsrs	r2, r3, #8
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1a      	lsrs	r2, r3, #16
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0e1a      	lsrs	r2, r3, #24
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3303      	adds	r3, #3
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	3304      	adds	r3, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0a1a      	lsrs	r2, r3, #8
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0c1a      	lsrs	r2, r3, #16
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	3306      	adds	r3, #6
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e1a      	lsrs	r2, r3, #24
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d108      	bne.n	8001e1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	e007      	b.n	8001e2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0220 	orr.w	r2, r2, #32
 8001e28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d002      	beq.n	8001e64 <HAL_CAN_ActivateNotification+0x1e>
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d109      	bne.n	8001e78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6959      	ldr	r1, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e006      	b.n	8001e86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d07c      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f97d 	bl	80021f2 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ef8:	e016      	b.n	8001f28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e00c      	b.n	8001f28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	e002      	b.n	8001f28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f980 	bl	8002228 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f95c 	bl	8002204 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f4c:	e016      	b.n	8001f7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e00c      	b.n	8001f7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e002      	b.n	8001f7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f95f 	bl	800223a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f93b 	bl	8002216 <HAL_CAN_TxMailbox2CompleteCallback>
 8001fa0:	e016      	b.n	8001fd0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	e00c      	b.n	8001fd0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	e002      	b.n	8001fd0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f93e 	bl	800224c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2208      	movs	r2, #8
 800200e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f92d 	bl	8002270 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f915 	bl	800225e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2210      	movs	r2, #16
 8002056:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f90d 	bl	8002294 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8f5 	bl	8002282 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2210      	movs	r2, #16
 80020b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8f6 	bl	80022a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00b      	beq.n	80020dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2208      	movs	r2, #8
 80020d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8ee 	bl	80022b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d075      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d06c      	beq.n	80021ca <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03d      	beq.n	80021ca <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d038      	beq.n	80021ca <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800215e:	2b30      	cmp	r3, #48	; 0x30
 8002160:	d017      	beq.n	8002192 <HAL_CAN_IRQHandler+0x302>
 8002162:	2b30      	cmp	r3, #48	; 0x30
 8002164:	d804      	bhi.n	8002170 <HAL_CAN_IRQHandler+0x2e0>
 8002166:	2b10      	cmp	r3, #16
 8002168:	d009      	beq.n	800217e <HAL_CAN_IRQHandler+0x2ee>
 800216a:	2b20      	cmp	r3, #32
 800216c:	d00c      	beq.n	8002188 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800216e:	e024      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002170:	2b50      	cmp	r3, #80	; 0x50
 8002172:	d018      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x316>
 8002174:	2b60      	cmp	r3, #96	; 0x60
 8002176:	d01b      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x320>
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d00f      	beq.n	800219c <HAL_CAN_IRQHandler+0x30c>
            break;
 800217c:	e01d      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002186:	e018      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002190:	e013      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	f043 0320 	orr.w	r3, r3, #32
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800219a:	e00e      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021a4:	e009      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ae:	e004      	b.n	80021ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2204      	movs	r2, #4
 80021d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f870 	bl	80022ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f8:	4013      	ands	r3, r2
 80022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <__NVIC_SetPriorityGrouping+0x44>)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	60d3      	str	r3, [r2, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_GetPriorityGrouping+0x18>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	f003 0307 	and.w	r3, r3, #7
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0b      	blt.n	800236a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f003 021f 	and.w	r2, r3, #31
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <__NVIC_EnableIRQ+0x34>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	2001      	movs	r0, #1
 8002362:	fa00 f202 	lsl.w	r2, r0, r2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff4f 	bl	80022dc <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff64 	bl	8002324 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ffb2 	bl	80023cc <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff81 	bl	8002378 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff57 	bl	8002340 <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b08b      	sub	sp, #44	; 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ae:	e127      	b.n	8002700 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b0:	2201      	movs	r2, #1
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8116 	bne.w	80026fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d034      	beq.n	8002540 <HAL_GPIO_Init+0xa4>
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d80d      	bhi.n	80024f6 <HAL_GPIO_Init+0x5a>
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d02b      	beq.n	8002536 <HAL_GPIO_Init+0x9a>
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d804      	bhi.n	80024ec <HAL_GPIO_Init+0x50>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d031      	beq.n	800254a <HAL_GPIO_Init+0xae>
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d01c      	beq.n	8002524 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ea:	e048      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d043      	beq.n	8002578 <HAL_GPIO_Init+0xdc>
 80024f0:	2b11      	cmp	r3, #17
 80024f2:	d01b      	beq.n	800252c <HAL_GPIO_Init+0x90>
          break;
 80024f4:	e043      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024f6:	4a89      	ldr	r2, [pc, #548]	; (800271c <HAL_GPIO_Init+0x280>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d026      	beq.n	800254a <HAL_GPIO_Init+0xae>
 80024fc:	4a87      	ldr	r2, [pc, #540]	; (800271c <HAL_GPIO_Init+0x280>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d806      	bhi.n	8002510 <HAL_GPIO_Init+0x74>
 8002502:	4a87      	ldr	r2, [pc, #540]	; (8002720 <HAL_GPIO_Init+0x284>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d020      	beq.n	800254a <HAL_GPIO_Init+0xae>
 8002508:	4a86      	ldr	r2, [pc, #536]	; (8002724 <HAL_GPIO_Init+0x288>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_GPIO_Init+0xae>
          break;
 800250e:	e036      	b.n	800257e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002510:	4a85      	ldr	r2, [pc, #532]	; (8002728 <HAL_GPIO_Init+0x28c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0xae>
 8002516:	4a85      	ldr	r2, [pc, #532]	; (800272c <HAL_GPIO_Init+0x290>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d016      	beq.n	800254a <HAL_GPIO_Init+0xae>
 800251c:	4a84      	ldr	r2, [pc, #528]	; (8002730 <HAL_GPIO_Init+0x294>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0xae>
          break;
 8002522:	e02c      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e028      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	3304      	adds	r3, #4
 8002532:	623b      	str	r3, [r7, #32]
          break;
 8002534:	e023      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	3308      	adds	r3, #8
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e01e      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	330c      	adds	r3, #12
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e019      	b.n	800257e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002552:	2304      	movs	r3, #4
 8002554:	623b      	str	r3, [r7, #32]
          break;
 8002556:	e012      	b.n	800257e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002560:	2308      	movs	r3, #8
 8002562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	611a      	str	r2, [r3, #16]
          break;
 800256a:	e008      	b.n	800257e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	615a      	str	r2, [r3, #20]
          break;
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d801      	bhi.n	8002588 <HAL_GPIO_Init+0xec>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	e001      	b.n	800258c <HAL_GPIO_Init+0xf0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3304      	adds	r3, #4
 800258c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2bff      	cmp	r3, #255	; 0xff
 8002592:	d802      	bhi.n	800259a <HAL_GPIO_Init+0xfe>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x104>
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3b08      	subs	r3, #8
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	210f      	movs	r1, #15
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	6a39      	ldr	r1, [r7, #32]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8096 	beq.w	80026fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ce:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6193      	str	r3, [r2, #24]
 80025da:	4b56      	ldr	r3, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x298>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e6:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_GPIO_Init+0x29c>)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4b      	ldr	r2, [pc, #300]	; (800273c <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x19e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <HAL_GPIO_Init+0x2a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x19a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_GPIO_Init+0x2a8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x196>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a48      	ldr	r2, [pc, #288]	; (8002748 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x192>
 800262a:	2303      	movs	r3, #3
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 800262e:	2304      	movs	r3, #4
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x1a0>
 800263a:	2300      	movs	r3, #0
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	f002 0203 	and.w	r2, r2, #3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4093      	lsls	r3, r2
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800264c:	493a      	ldr	r1, [pc, #232]	; (8002738 <HAL_GPIO_Init+0x29c>)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4938      	ldr	r1, [pc, #224]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
 8002672:	e006      	b.n	8002682 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	43db      	mvns	r3, r3
 800267c:	4933      	ldr	r1, [pc, #204]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	492e      	ldr	r1, [pc, #184]	; (800274c <HAL_GPIO_Init+0x2b0>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_GPIO_Init+0x2b0>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4924      	ldr	r1, [pc, #144]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
 80026c2:	e006      	b.n	80026d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	491f      	ldr	r1, [pc, #124]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	491a      	ldr	r1, [pc, #104]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]
 80026ea:	e006      	b.n	80026fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	4915      	ldr	r1, [pc, #84]	; (800274c <HAL_GPIO_Init+0x2b0>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	3301      	adds	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	fa22 f303 	lsr.w	r3, r2, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	f47f aed0 	bne.w	80024b0 <HAL_GPIO_Init+0x14>
  }
}
 8002710:	bf00      	nop
 8002712:	372c      	adds	r7, #44	; 0x2c
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	10210000 	.word	0x10210000
 8002720:	10110000 	.word	0x10110000
 8002724:	10120000 	.word	0x10120000
 8002728:	10310000 	.word	0x10310000
 800272c:	10320000 	.word	0x10320000
 8002730:	10220000 	.word	0x10220000
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	40010800 	.word	0x40010800
 8002740:	40010c00 	.word	0x40010c00
 8002744:	40011000 	.word	0x40011000
 8002748:	40011400 	.word	0x40011400
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f806 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e26c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e4:	4b92      	ldr	r3, [pc, #584]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00c      	beq.n	800280a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027f0:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d112      	bne.n	8002822 <HAL_RCC_OscConfig+0x5e>
 80027fc:	4b8c      	ldr	r3, [pc, #560]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b89      	ldr	r3, [pc, #548]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d06c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x12c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d168      	bne.n	80028f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e246      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x76>
 800282c:	4b80      	ldr	r3, [pc, #512]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a7f      	ldr	r2, [pc, #508]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e02e      	b.n	8002898 <HAL_RCC_OscConfig+0xd4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x98>
 8002842:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0xd4>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0xbc>
 8002866:	4b72      	ldr	r3, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a71      	ldr	r2, [pc, #452]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6e      	ldr	r2, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0xd4>
 8002880:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6a      	ldr	r2, [pc, #424]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a67      	ldr	r2, [pc, #412]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fed4 	bl	800164c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fed0 	bl	800164c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1fa      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b5d      	ldr	r3, [pc, #372]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0xe4>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fec0 	bl	800164c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe febc 	bl	800164c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1e6      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x10c>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d063      	beq.n	80029c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fe:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_OscConfig+0x18c>
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x176>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e1ba      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4939      	ldr	r1, [pc, #228]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	e03a      	b.n	80029c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d020      	beq.n	800299a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe fe75 	bl	800164c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002966:	f7fe fe71 	bl	800164c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e19b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4927      	ldr	r1, [pc, #156]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	600b      	str	r3, [r1, #0]
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_RCC_OscConfig+0x270>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fe54 	bl	800164c <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a8:	f7fe fe50 	bl	800164c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e17a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03a      	beq.n	8002a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d019      	beq.n	8002a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <HAL_RCC_OscConfig+0x274>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fe34 	bl	800164c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fe30 	bl	800164c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e15a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f000 faf8 	bl	8002ffc <RCC_Delay>
 8002a0c:	e01c      	b.n	8002a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7fe fe1a 	bl	800164c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fe16 	bl	800164c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d908      	bls.n	8002a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e140      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	42420000 	.word	0x42420000
 8002a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e9      	bne.n	8002a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a6 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b97      	ldr	r3, [pc, #604]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	4b94      	ldr	r3, [pc, #592]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a93      	ldr	r2, [pc, #588]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	4b91      	ldr	r3, [pc, #580]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b8e      	ldr	r3, [pc, #568]	; (8002cbc <HAL_RCC_OscConfig+0x4f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <HAL_RCC_OscConfig+0x4f8>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fdd7 	bl	800164c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe fdd3 	bl	800164c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0fd      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x4f8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x312>
 8002ac8:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a7a      	ldr	r2, [pc, #488]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	e02d      	b.n	8002b32 <HAL_RCC_OscConfig+0x36e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x334>
 8002ade:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a75      	ldr	r2, [pc, #468]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a72      	ldr	r2, [pc, #456]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	e01c      	b.n	8002b32 <HAL_RCC_OscConfig+0x36e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x356>
 8002b00:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4a6c      	ldr	r2, [pc, #432]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6213      	str	r3, [r2, #32]
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a69      	ldr	r2, [pc, #420]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x36e>
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a66      	ldr	r2, [pc, #408]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fd87 	bl	800164c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fd83 	bl	800164c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0ab      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	4b57      	ldr	r3, [pc, #348]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCC_OscConfig+0x37e>
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fd71 	bl	800164c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fd6d 	bl	800164c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e095      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4a47      	ldr	r2, [pc, #284]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8081 	beq.w	8002cae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d061      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d146      	bne.n	8002c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_OscConfig+0x4fc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fd41 	bl	800164c <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fd3d 	bl	800164c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e067      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d108      	bne.n	8002c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	492d      	ldr	r1, [pc, #180]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a19      	ldr	r1, [r3, #32]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	4927      	ldr	r1, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_RCC_OscConfig+0x4fc>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fd11 	bl	800164c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fd0d 	bl	800164c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e037      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x46a>
 8002c4c:	e02f      	b.n	8002cae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_RCC_OscConfig+0x4fc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fcfa 	bl	800164c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fcf6 	bl	800164c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e020      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x498>
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42420060 	.word	0x42420060

08002cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d0      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4965      	ldr	r1, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d040      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e073      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fc4a 	bl	800164c <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fc46 	bl	800164c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e053      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d210      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4922      	ldr	r1, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe faaa 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08006760 	.word	0x08006760
 8002e90:	20000028 	.word	0x20000028
 8002e94:	2000002c 	.word	0x2000002c

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b490      	push	{r4, r7}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ea0:	1d3c      	adds	r4, r7, #4
 8002ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x46>
 8002ed6:	e02d      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eda:	623b      	str	r3, [r7, #32]
      break;
 8002edc:	e02d      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	0c9b      	lsrs	r3, r3, #18
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eea:	4413      	add	r3, r2
 8002eec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ef0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c5b      	lsrs	r3, r3, #17
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f16:	fb02 f203 	mul.w	r2, r2, r3
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e004      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f28:	fb02 f303 	mul.w	r3, r2, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	623b      	str	r3, [r7, #32]
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f36:	623b      	str	r3, [r7, #32]
      break;
 8002f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc90      	pop	{r4, r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	080066c8 	.word	0x080066c8
 8002f4c:	080066d8 	.word	0x080066d8
 8002f50:	40021000 	.word	0x40021000
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	003d0900 	.word	0x003d0900
 8002f5c:	007a1200 	.word	0x007a1200

08002f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	20000028 	.word	0x20000028

08002f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f78:	f7ff fff2 	bl	8002f60 <HAL_RCC_GetHCLKFreq>
 8002f7c:	4601      	mov	r1, r0
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08006770 	.word	0x08006770

08002f9c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	220f      	movs	r2, #15
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_RCC_GetClockConfig+0x58>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0207 	and.w	r2, r3, #7
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000028 	.word	0x20000028
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e01d      	b.n	8003086 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f94c 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fb3c 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	d007      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e01d      	b.n	8003122 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f815 	bl	800312a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f000 faee 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2201      	movs	r2, #1
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fd50 	bl	8003bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_TIM_PWM_Start+0x60>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d107      	bne.n	800316e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d007      	beq.n	8003190 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00

080031a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0202 	mvn.w	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa6a 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa5d 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa6c 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0204 	mvn.w	r2, #4
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa40 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fa33 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa42 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d122      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b08      	cmp	r3, #8
 800326a:	d11b      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0208 	mvn.w	r2, #8
 8003274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2204      	movs	r2, #4
 800327a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa16 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 8003290:	e005      	b.n	800329e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa09 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 fa18 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d122      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d11b      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0210 	mvn.w	r2, #16
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2208      	movs	r2, #8
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9ec 	bl	80036bc <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9df 	bl	80036aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9ee 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0201 	mvn.w	r2, #1
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd ff1e 	bl	8001160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b80      	cmp	r3, #128	; 0x80
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d107      	bne.n	8003350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fcc3 	bl	8003cd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d10e      	bne.n	800337c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d107      	bne.n	800337c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9b2 	bl	80036e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b20      	cmp	r3, #32
 8003388:	d10e      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	d107      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0220 	mvn.w	r2, #32
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fc8e 	bl	8003cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0b4      	b.n	8003534 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	f200 809f 	bhi.w	8003520 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	08003521 	.word	0x08003521
 80033f0:	08003521 	.word	0x08003521
 80033f4:	08003521 	.word	0x08003521
 80033f8:	0800345d 	.word	0x0800345d
 80033fc:	08003521 	.word	0x08003521
 8003400:	08003521 	.word	0x08003521
 8003404:	08003521 	.word	0x08003521
 8003408:	0800349f 	.word	0x0800349f
 800340c:	08003521 	.word	0x08003521
 8003410:	08003521 	.word	0x08003521
 8003414:	08003521 	.word	0x08003521
 8003418:	080034df 	.word	0x080034df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f9c8 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0208 	orr.w	r2, r2, #8
 8003436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	619a      	str	r2, [r3, #24]
      break;
 800345a:	e062      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fa0e 	bl	8003884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	021a      	lsls	r2, r3, #8
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
      break;
 800349c:	e041      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fa57 	bl	8003958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0208 	orr.w	r2, r2, #8
 80034b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0204 	bic.w	r2, r2, #4
 80034c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	61da      	str	r2, [r3, #28]
      break;
 80034dc:	e021      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 faa1 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	021a      	lsls	r2, r3, #8
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	61da      	str	r2, [r3, #28]
      break;
 800351e:	e000      	b.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003520:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIM_ConfigClockSource+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e0a6      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x166>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003572:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800357a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d067      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x120>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d80b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x6c>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d073      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x140>
 8003594:	2b10      	cmp	r3, #16
 8003596:	d802      	bhi.n	800359e <HAL_TIM_ConfigClockSource+0x62>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d06f      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800359c:	e078      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d06c      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x140>
 80035a2:	2b30      	cmp	r3, #48	; 0x30
 80035a4:	d06a      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035a6:	e073      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035a8:	2b70      	cmp	r3, #112	; 0x70
 80035aa:	d00d      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x8c>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d804      	bhi.n	80035ba <HAL_TIM_ConfigClockSource+0x7e>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d033      	beq.n	800361c <HAL_TIM_ConfigClockSource+0xe0>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d041      	beq.n	800363c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035b8:	e06a      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	d066      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x152>
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d017      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035c6:	e063      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f000 faed 	bl	8003bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
      break;
 80035f4:	e04c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f000 fad6 	bl	8003bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003618:	609a      	str	r2, [r3, #8]
      break;
 800361a:	e039      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	f000 fa4d 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2150      	movs	r1, #80	; 0x50
 8003634:	4618      	mov	r0, r3
 8003636:	f000 faa4 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800363a:	e029      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 fa6b 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2160      	movs	r1, #96	; 0x60
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fa94 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800365a:	e019      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	f000 fa2d 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fa84 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800367a:	e009      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 fa7b 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800368c:	e000      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800368e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10c      	bne.n	800382e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0308 	bic.w	r3, r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0320 	bic.w	r3, r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10d      	bne.n	8003900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d113      	bne.n	8003930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <TIM_OC4_SetConfig+0x98>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d109      	bne.n	8003aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e032      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c8c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cee:	f3ef 8305 	mrs	r3, IPSR
 8003cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	607b      	str	r3, [r7, #4]
  return(result);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <osKernelInitialize+0x32>
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <osKernelInitialize+0x60>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d109      	bne.n	8003d22 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d12:	603b      	str	r3, [r7, #0]
  return(result);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d1a:	f06f 0305 	mvn.w	r3, #5
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	e00c      	b.n	8003d3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <osKernelInitialize+0x60>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <osKernelInitialize+0x60>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e002      	b.n	8003d3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	20000070 	.word	0x20000070

08003d4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d52:	f3ef 8305 	mrs	r3, IPSR
 8003d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d62:	607b      	str	r3, [r7, #4]
  return(result);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <osKernelStart+0x32>
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <osKernelStart+0x64>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d109      	bne.n	8003d86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d72:	f3ef 8311 	mrs	r3, BASEPRI
 8003d76:	603b      	str	r3, [r7, #0]
  return(result);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d7e:	f06f 0305 	mvn.w	r3, #5
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e00e      	b.n	8003da4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <osKernelStart+0x64>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <osKernelStart+0x64>)
 8003d90:	2202      	movs	r2, #2
 8003d92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d94:	f001 f864 	bl	8004e60 <vTaskStartScheduler>
      stat = osOK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000070 	.word	0x20000070

08003db4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b092      	sub	sp, #72	; 0x48
 8003db8:	af04      	add	r7, sp, #16
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc4:	f3ef 8305 	mrs	r3, IPSR
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f040 8094 	bne.w	8003efa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	623b      	str	r3, [r7, #32]
  return(result);
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 808d 	bne.w	8003efa <osThreadNew+0x146>
 8003de0:	4b48      	ldr	r3, [pc, #288]	; (8003f04 <osThreadNew+0x150>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d106      	bne.n	8003df6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003de8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f040 8082 	bne.w	8003efa <osThreadNew+0x146>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d07e      	beq.n	8003efa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003e00:	2318      	movs	r3, #24
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003e08:	f107 031b 	add.w	r3, r7, #27
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d045      	beq.n	8003ea6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <osThreadNew+0x74>
        name = attr->name;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <osThreadNew+0x9a>
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	2b38      	cmp	r3, #56	; 0x38
 8003e40:	d805      	bhi.n	8003e4e <osThreadNew+0x9a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <osThreadNew+0x9e>
        return (NULL);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e054      	b.n	8003efc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <osThreadNew+0xd4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b5b      	cmp	r3, #91	; 0x5b
 8003e70:	d90a      	bls.n	8003e88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d006      	beq.n	8003e88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <osThreadNew+0xd4>
        mem = 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e86:	e010      	b.n	8003eaa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10c      	bne.n	8003eaa <osThreadNew+0xf6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <osThreadNew+0xf6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <osThreadNew+0xf6>
          mem = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea4:	e001      	b.n	8003eaa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d110      	bne.n	8003ed2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003eb8:	9202      	str	r2, [sp, #8]
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fe02 	bl	8004ad0 <xTaskCreateStatic>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e013      	b.n	8003efa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d110      	bne.n	8003efa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fe49 	bl	8004b82 <xTaskCreate>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <osThreadNew+0x146>
          hTask = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003efa:	697b      	ldr	r3, [r7, #20]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3738      	adds	r7, #56	; 0x38
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000070 	.word	0x20000070

08003f08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f10:	f3ef 8305 	mrs	r3, IPSR
 8003f14:	613b      	str	r3, [r7, #16]
  return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <osDelay+0x34>
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <osDelay+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d109      	bne.n	8003f44 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f30:	f3ef 8311 	mrs	r3, BASEPRI
 8003f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <osDelay+0x3c>
    stat = osErrorISR;
 8003f3c:	f06f 0305 	mvn.w	r3, #5
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e007      	b.n	8003f54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ff52 	bl	8004df8 <vTaskDelay>
    }
  }

  return (stat);
 8003f54:	697b      	ldr	r3, [r7, #20]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000070 	.word	0x20000070

08003f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a06      	ldr	r2, [pc, #24]	; (8003f8c <vApplicationGetIdleTaskMemory+0x28>)
 8003f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	20000074 	.word	0x20000074
 8003f90:	200000d0 	.word	0x200000d0

08003f94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4a06      	ldr	r2, [pc, #24]	; (8003fc4 <vApplicationGetTimerTaskMemory+0x30>)
 8003faa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	200002d0 	.word	0x200002d0
 8003fc4:	2000032c 	.word	0x2000032c

08003fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0208 	add.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f103 0208 	add.w	r2, r3, #8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f103 0208 	add.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407a:	d103      	bne.n	8004084 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e00c      	b.n	800409e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3308      	adds	r3, #8
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e002      	b.n	8004092 <vListInsert+0x2e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d2f6      	bcs.n	800408c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6892      	ldr	r2, [r2, #8]
 80040ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6852      	ldr	r2, [r2, #4]
 80040f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d103      	bne.n	8004108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
	...

08004128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	e7fe      	b.n	800414e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004150:	f001 ff9a 	bl	8006088 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	441a      	add	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	3b01      	subs	r3, #1
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	441a      	add	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	22ff      	movs	r2, #255	; 0xff
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	22ff      	movs	r2, #255	; 0xff
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d114      	bne.n	80041d0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01a      	beq.n	80041e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3310      	adds	r3, #16
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f8d8 	bl	8005368 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d012      	beq.n	80041e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <xQueueGenericReset+0xcc>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e009      	b.n	80041e4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3310      	adds	r3, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fef7 	bl	8003fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fef2 	bl	8003fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e4:	f001 ff7e 	bl	80060e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	e000ed04 	.word	0xe000ed04

080041f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	; 0x38
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d109      	bne.n	8004220 <xQueueGenericCreateStatic+0x28>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
 800421e:	e7fe      	b.n	800421e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <xQueueGenericCreateStatic+0x42>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
 8004238:	e7fe      	b.n	8004238 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <xQueueGenericCreateStatic+0x4e>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <xQueueGenericCreateStatic+0x52>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <xQueueGenericCreateStatic+0x54>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <xQueueGenericCreateStatic+0x6c>
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	623b      	str	r3, [r7, #32]
 8004262:	e7fe      	b.n	8004262 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <xQueueGenericCreateStatic+0x78>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <xQueueGenericCreateStatic+0x7c>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <xQueueGenericCreateStatic+0x7e>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <xQueueGenericCreateStatic+0x96>
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	e7fe      	b.n	800428c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800428e:	2350      	movs	r3, #80	; 0x50
 8004290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b50      	cmp	r3, #80	; 0x50
 8004296:	d009      	beq.n	80042ac <xQueueGenericCreateStatic+0xb4>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e7fe      	b.n	80042aa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f805 	bl	80042dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3730      	adds	r7, #48	; 0x30
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e002      	b.n	80042fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800430a:	2101      	movs	r1, #1
 800430c:	69b8      	ldr	r0, [r7, #24]
 800430e:	f7ff ff0b 	bl	8004128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004332:	2300      	movs	r3, #0
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <xQueueGenericSend+0x30>
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
 8004352:	e7fe      	b.n	8004352 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <xQueueGenericSend+0x3e>
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericSend+0x42>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSend+0x44>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <xQueueGenericSend+0x5c>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	e7fe      	b.n	800437e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d103      	bne.n	800438e <xQueueGenericSend+0x6a>
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <xQueueGenericSend+0x6e>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSend+0x70>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <xQueueGenericSend+0x88>
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	e7fe      	b.n	80043aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ac:	f001 f996 	bl	80056dc <xTaskGetSchedulerState>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <xQueueGenericSend+0x98>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <xQueueGenericSend+0x9c>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <xQueueGenericSend+0x9e>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <xQueueGenericSend+0xb6>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e7fe      	b.n	80043d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043da:	f001 fe55 	bl	8006088 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <xQueueGenericSend+0xcc>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d129      	bne.n	8004444 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 f9ff 	bl	80047f8 <prvCopyDataToQueue>
 80043fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	4618      	mov	r0, r3
 800440a:	f000 ffad 	bl	8005368 <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <xQueueGenericSend+0x1f0>)
 8004416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	e00a      	b.n	800443c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800442c:	4b39      	ldr	r3, [pc, #228]	; (8004514 <xQueueGenericSend+0x1f0>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800443c:	f001 fe52 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004440:	2301      	movs	r3, #1
 8004442:	e063      	b.n	800450c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d103      	bne.n	8004452 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800444a:	f001 fe4b 	bl	80060e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800444e:	2300      	movs	r3, #0
 8004450:	e05c      	b.n	800450c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004458:	f107 0314 	add.w	r3, r7, #20
 800445c:	4618      	mov	r0, r3
 800445e:	f000 ffe5 	bl	800542c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004466:	f001 fe3d 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800446a:	f000 fd5d 	bl	8004f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800446e:	f001 fe0b 	bl	8006088 <vPortEnterCritical>
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447e:	d103      	bne.n	8004488 <xQueueGenericSend+0x164>
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004494:	d103      	bne.n	800449e <xQueueGenericSend+0x17a>
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800449e:	f001 fe21 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044a2:	1d3a      	adds	r2, r7, #4
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 ffd4 	bl	8005458 <xTaskCheckForTimeOut>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d124      	bne.n	8004500 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b8:	f000 fa96 	bl	80049e8 <prvIsQueueFull>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	3310      	adds	r3, #16
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fefe 	bl	80052cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d2:	f000 fa21 	bl	8004918 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044d6:	f000 fd35 	bl	8004f44 <xTaskResumeAll>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f af7c 	bne.w	80043da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <xQueueGenericSend+0x1f0>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	e772      	b.n	80043da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f6:	f000 fa0f 	bl	8004918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044fa:	f000 fd23 	bl	8004f44 <xTaskResumeAll>
 80044fe:	e76c      	b.n	80043da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004502:	f000 fa09 	bl	8004918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004506:	f000 fd1d 	bl	8004f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800450a:	2300      	movs	r3, #0
		}
	}
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	; 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <xQueueGenericSendFromISR+0x2c>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	e7fe      	b.n	8004542 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d103      	bne.n	8004552 <xQueueGenericSendFromISR+0x3a>
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <xQueueGenericSendFromISR+0x3e>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <xQueueGenericSendFromISR+0x40>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <xQueueGenericSendFromISR+0x58>
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	e7fe      	b.n	800456e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d103      	bne.n	800457e <xQueueGenericSendFromISR+0x66>
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <xQueueGenericSendFromISR+0x6a>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueGenericSendFromISR+0x6c>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <xQueueGenericSendFromISR+0x84>
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e7fe      	b.n	800459a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459c:	f001 fe2e 	bl	80061fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045a0:	f3ef 8211 	mrs	r2, BASEPRI
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <xQueueGenericSendFromISR+0xb6>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d12c      	bne.n	8004628 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045de:	f000 f90b 	bl	80047f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ea:	d112      	bne.n	8004612 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 feb5 	bl	8005368 <xTaskRemoveFromEventList>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e007      	b.n	8004622 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004616:	3301      	adds	r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	b25a      	sxtb	r2, r3
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004626:	e001      	b.n	800462c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004638:	4618      	mov	r0, r3
 800463a:	3738      	adds	r7, #56	; 0x38
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <xQueueReceive+0x2e>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	e7fe      	b.n	800466c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <xQueueReceive+0x3c>
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <xQueueReceive+0x40>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <xQueueReceive+0x42>
 8004680:	2300      	movs	r3, #0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <xQueueReceive+0x5a>
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e7fe      	b.n	8004698 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 f81f 	bl	80056dc <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueReceive+0x6a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueReceive+0x6e>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueReceive+0x70>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <xQueueReceive+0x88>
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e7fe      	b.n	80046c6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046c8:	f001 fcde 	bl	8006088 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01f      	beq.n	8004718 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046dc:	f000 f8f6 	bl	80048cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1e5a      	subs	r2, r3, #1
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	3310      	adds	r3, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fe37 	bl	8005368 <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004700:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <xQueueReceive+0x1b4>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004710:	f001 fce8 	bl	80060e4 <vPortExitCritical>
				return pdPASS;
 8004714:	2301      	movs	r3, #1
 8004716:	e069      	b.n	80047ec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471e:	f001 fce1 	bl	80060e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004722:	2300      	movs	r3, #0
 8004724:	e062      	b.n	80047ec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472c:	f107 0310 	add.w	r3, r7, #16
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fe7b 	bl	800542c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473a:	f001 fcd3 	bl	80060e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473e:	f000 fbf3 	bl	8004f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004742:	f001 fca1 	bl	8006088 <vPortEnterCritical>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474c:	b25b      	sxtb	r3, r3
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004752:	d103      	bne.n	800475c <xQueueReceive+0x11c>
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004768:	d103      	bne.n	8004772 <xQueueReceive+0x132>
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004772:	f001 fcb7 	bl	80060e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004776:	1d3a      	adds	r2, r7, #4
 8004778:	f107 0310 	add.w	r3, r7, #16
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe6a 	bl	8005458 <xTaskCheckForTimeOut>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d123      	bne.n	80047d2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800478a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478c:	f000 f916 	bl	80049bc <prvIsQueueEmpty>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	3324      	adds	r3, #36	; 0x24
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fd94 	bl	80052cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a6:	f000 f8b7 	bl	8004918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047aa:	f000 fbcb 	bl	8004f44 <xTaskResumeAll>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d189      	bne.n	80046c8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <xQueueReceive+0x1b4>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	e780      	b.n	80046c8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c8:	f000 f8a6 	bl	8004918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047cc:	f000 fbba 	bl	8004f44 <xTaskResumeAll>
 80047d0:	e77a      	b.n	80046c8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d4:	f000 f8a0 	bl	8004918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d8:	f000 fbb4 	bl	8004f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f000 f8ed 	bl	80049bc <prvIsQueueEmpty>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f43f af6f 	beq.w	80046c8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3730      	adds	r7, #48	; 0x30
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d14d      	bne.n	80048ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff78 	bl	8005718 <xTaskPriorityDisinherit>
 8004828:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	e043      	b.n	80048ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d119      	bne.n	800486c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6898      	ldr	r0, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	461a      	mov	r2, r3
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	f001 ff0e 	bl	8006664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	441a      	add	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d32b      	bcc.n	80048ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	e026      	b.n	80048ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68d8      	ldr	r0, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	f001 fef4 	bl	8006664 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	425b      	negs	r3, r3
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d207      	bcs.n	80048a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	425b      	negs	r3, r3
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d105      	bne.n	80048ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048c2:	697b      	ldr	r3, [r7, #20]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	441a      	add	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d303      	bcc.n	8004900 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	461a      	mov	r2, r3
 800490a:	6838      	ldr	r0, [r7, #0]
 800490c:	f001 feaa 	bl	8006664 <memcpy>
	}
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004920:	f001 fbb2 	bl	8006088 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800492c:	e011      	b.n	8004952 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d012      	beq.n	800495c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3324      	adds	r3, #36	; 0x24
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fd14 	bl	8005368 <xTaskRemoveFromEventList>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004946:	f000 fde7 	bl	8005518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	3b01      	subs	r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	dce9      	bgt.n	800492e <prvUnlockQueue+0x16>
 800495a:	e000      	b.n	800495e <prvUnlockQueue+0x46>
					break;
 800495c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	22ff      	movs	r2, #255	; 0xff
 8004962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004966:	f001 fbbd 	bl	80060e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800496a:	f001 fb8d 	bl	8006088 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004974:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004976:	e011      	b.n	800499c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d012      	beq.n	80049a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3310      	adds	r3, #16
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fcef 	bl	8005368 <xTaskRemoveFromEventList>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004990:	f000 fdc2 	bl	8005518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	3b01      	subs	r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800499c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dce9      	bgt.n	8004978 <prvUnlockQueue+0x60>
 80049a4:	e000      	b.n	80049a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	22ff      	movs	r2, #255	; 0xff
 80049ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049b0:	f001 fb98 	bl	80060e4 <vPortExitCritical>
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c4:	f001 fb60 	bl	8006088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e001      	b.n	80049da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049da:	f001 fb83 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f0:	f001 fb4a 	bl	8006088 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d102      	bne.n	8004a06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a00:	2301      	movs	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e001      	b.n	8004a0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f001 fb6b 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e014      	b.n	8004a52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a28:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a34:	490b      	ldr	r1, [pc, #44]	; (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <vQueueAddToRegistry+0x4c>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a4a:	e005      	b.n	8004a58 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b07      	cmp	r3, #7
 8004a56:	d9e7      	bls.n	8004a28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20001af0 	.word	0x20001af0

08004a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a78:	f001 fb06 	bl	8006088 <vPortEnterCritical>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a88:	d103      	bne.n	8004a92 <vQueueWaitForMessageRestricted+0x2a>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a98:	b25b      	sxtb	r3, r3
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9e:	d103      	bne.n	8004aa8 <vQueueWaitForMessageRestricted+0x40>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	f001 fb1c 	bl	80060e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d106      	bne.n	8004ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3324      	adds	r3, #36	; 0x24
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fc29 	bl	8005314 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff ff28 	bl	8004918 <prvUnlockQueue>
	}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <xTaskCreateStatic+0x28>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	e7fe      	b.n	8004af6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <xTaskCreateStatic+0x42>
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e7fe      	b.n	8004b10 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b12:	235c      	movs	r3, #92	; 0x5c
 8004b14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b5c      	cmp	r3, #92	; 0x5c
 8004b1a:	d009      	beq.n	8004b30 <xTaskCreateStatic+0x60>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	e7fe      	b.n	8004b2e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01e      	beq.n	8004b74 <xTaskCreateStatic+0xa4>
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f850 	bl	8004c0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b6e:	f000 f8d3 	bl	8004d18 <prvAddNewTaskToReadyList>
 8004b72:	e001      	b.n	8004b78 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b78:	697b      	ldr	r3, [r7, #20]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b08c      	sub	sp, #48	; 0x30
 8004b86:	af04      	add	r7, sp, #16
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fb6c 	bl	8006274 <pvPortMalloc>
 8004b9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ba4:	205c      	movs	r0, #92	; 0x5c
 8004ba6:	f001 fb65 	bl	8006274 <pvPortMalloc>
 8004baa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb8:	e005      	b.n	8004bc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f001 fc1c 	bl	80063f8 <vPortFree>
 8004bc0:	e001      	b.n	8004bc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d017      	beq.n	8004bfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	9302      	str	r3, [sp, #8]
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f80e 	bl	8004c0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf0:	69f8      	ldr	r0, [r7, #28]
 8004bf2:	f000 f891 	bl	8004d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e002      	b.n	8004c02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c02:	69bb      	ldr	r3, [r7, #24]
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	461a      	mov	r2, r3
 8004c24:	21a5      	movs	r1, #165	; 0xa5
 8004c26:	f001 fd28 	bl	800667a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c34:	3b01      	subs	r3, #1
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d009      	beq.n	8004c62 <prvInitialiseNewTask+0x56>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e7fe      	b.n	8004c60 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	e012      	b.n	8004c8e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	7819      	ldrb	r1, [r3, #0]
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	3334      	adds	r3, #52	; 0x34
 8004c78:	460a      	mov	r2, r1
 8004c7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	d9e9      	bls.n	8004c68 <prvInitialiseNewTask+0x5c>
 8004c94:	e000      	b.n	8004c98 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004c96:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	2b37      	cmp	r3, #55	; 0x37
 8004ca4:	d901      	bls.n	8004caa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ca6:	2337      	movs	r3, #55	; 0x37
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	2200      	movs	r2, #0
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff f9a0 	bl	8004006 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	3318      	adds	r3, #24
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f99b 	bl	8004006 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	69b8      	ldr	r0, [r7, #24]
 8004cfa:	f001 f8d7 	bl	8005eac <pxPortInitialiseStack>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d10:	bf00      	nop
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d20:	f001 f9b2 	bl	8006088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d24:	4b2d      	ldr	r3, [pc, #180]	; (8004ddc <prvAddNewTaskToReadyList+0xc4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <prvAddNewTaskToReadyList+0xc4>)
 8004d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d2e:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <prvAddNewTaskToReadyList+0xc8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d36:	4a2a      	ldr	r2, [pc, #168]	; (8004de0 <prvAddNewTaskToReadyList+0xc8>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d3c:	4b27      	ldr	r3, [pc, #156]	; (8004ddc <prvAddNewTaskToReadyList+0xc4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d110      	bne.n	8004d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d44:	f000 fc0c 	bl	8005560 <prvInitialiseTaskLists>
 8004d48:	e00d      	b.n	8004d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d4a:	4b26      	ldr	r3, [pc, #152]	; (8004de4 <prvAddNewTaskToReadyList+0xcc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <prvAddNewTaskToReadyList+0xc8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d802      	bhi.n	8004d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <prvAddNewTaskToReadyList+0xc8>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d66:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <prvAddNewTaskToReadyList+0xd0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <prvAddNewTaskToReadyList+0xd0>)
 8004d6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d70:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <prvAddNewTaskToReadyList+0xd0>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <prvAddNewTaskToReadyList+0xd4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d903      	bls.n	8004d8c <prvAddNewTaskToReadyList+0x74>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <prvAddNewTaskToReadyList+0xd4>)
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <prvAddNewTaskToReadyList+0xd8>)
 8004d9a:	441a      	add	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f7ff f93b 	bl	800401e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004da8:	f001 f99c 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <prvAddNewTaskToReadyList+0xcc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00e      	beq.n	8004dd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <prvAddNewTaskToReadyList+0xc8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d207      	bcs.n	8004dd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <prvAddNewTaskToReadyList+0xdc>)
 8004dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000c00 	.word	0x20000c00
 8004de0:	2000072c 	.word	0x2000072c
 8004de4:	20000c0c 	.word	0x20000c0c
 8004de8:	20000c1c 	.word	0x20000c1c
 8004dec:	20000c08 	.word	0x20000c08
 8004df0:	20000730 	.word	0x20000730
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <vTaskDelay+0x60>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <vTaskDelay+0x2e>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	e7fe      	b.n	8004e24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004e26:	f000 f87f 	bl	8004f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fcdf 	bl	80057f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e32:	f000 f887 	bl	8004f44 <xTaskResumeAll>
 8004e36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <vTaskDelay+0x64>)
 8004e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000c28 	.word	0x20000c28
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e6e:	463a      	mov	r2, r7
 8004e70:	1d39      	adds	r1, r7, #4
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff f874 	bl	8003f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e7c:	6839      	ldr	r1, [r7, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	9202      	str	r2, [sp, #8]
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	460a      	mov	r2, r1
 8004e8e:	4920      	ldr	r1, [pc, #128]	; (8004f10 <vTaskStartScheduler+0xb0>)
 8004e90:	4820      	ldr	r0, [pc, #128]	; (8004f14 <vTaskStartScheduler+0xb4>)
 8004e92:	f7ff fe1d 	bl	8004ad0 <xTaskCreateStatic>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <vTaskStartScheduler+0xb8>)
 8004e9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <vTaskStartScheduler+0xb8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e001      	b.n	8004eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004eb4:	f000 fcf0 	bl	8005898 <xTimerCreateTimerTask>
 8004eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d115      	bne.n	8004eec <vTaskStartScheduler+0x8c>
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <vTaskStartScheduler+0xbc>)
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <vTaskStartScheduler+0xc0>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <vTaskStartScheduler+0xc4>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ee6:	f001 f85f 	bl	8005fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004eea:	e00d      	b.n	8004f08 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef2:	d109      	bne.n	8004f08 <vTaskStartScheduler+0xa8>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e7fe      	b.n	8004f06 <vTaskStartScheduler+0xa6>
}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	080066dc 	.word	0x080066dc
 8004f14:	08005531 	.word	0x08005531
 8004f18:	20000c24 	.word	0x20000c24
 8004f1c:	20000c20 	.word	0x20000c20
 8004f20:	20000c0c 	.word	0x20000c0c
 8004f24:	20000c04 	.word	0x20000c04

08004f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <vTaskSuspendAll+0x18>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <vTaskSuspendAll+0x18>)
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000c28 	.word	0x20000c28

08004f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <xTaskResumeAll+0x114>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <xTaskResumeAll+0x2a>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	e7fe      	b.n	8004f6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f6e:	f001 f88b 	bl	8006088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f72:	4b39      	ldr	r3, [pc, #228]	; (8005058 <xTaskResumeAll+0x114>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	4a37      	ldr	r2, [pc, #220]	; (8005058 <xTaskResumeAll+0x114>)
 8004f7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <xTaskResumeAll+0x114>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d162      	bne.n	800504a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <xTaskResumeAll+0x118>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05e      	beq.n	800504a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f8c:	e02f      	b.n	8004fee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f8e:	4b34      	ldr	r3, [pc, #208]	; (8005060 <xTaskResumeAll+0x11c>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f89a 	bl	80040d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f895 	bl	80040d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fae:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <xTaskResumeAll+0x120>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <xTaskResumeAll+0x7a>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <xTaskResumeAll+0x120>)
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4a27      	ldr	r2, [pc, #156]	; (8005068 <xTaskResumeAll+0x124>)
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff f822 	bl	800401e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <xTaskResumeAll+0x128>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <xTaskResumeAll+0x12c>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fee:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <xTaskResumeAll+0x11c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1cb      	bne.n	8004f8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ffc:	f000 fb4a 	bl	8005694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005000:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <xTaskResumeAll+0x130>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d010      	beq.n	800502e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800500c:	f000 f844 	bl	8005098 <xTaskIncrementTick>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <xTaskResumeAll+0x12c>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f1      	bne.n	800500c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005028:	4b12      	ldr	r3, [pc, #72]	; (8005074 <xTaskResumeAll+0x130>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <xTaskResumeAll+0x12c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <xTaskResumeAll+0x134>)
 800503c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800504a:	f001 f84b 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 800504e:	68bb      	ldr	r3, [r7, #8]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000c28 	.word	0x20000c28
 800505c:	20000c00 	.word	0x20000c00
 8005060:	20000bc0 	.word	0x20000bc0
 8005064:	20000c08 	.word	0x20000c08
 8005068:	20000730 	.word	0x20000730
 800506c:	2000072c 	.word	0x2000072c
 8005070:	20000c14 	.word	0x20000c14
 8005074:	20000c10 	.word	0x20000c10
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <xTaskGetTickCount+0x18>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005088:	687b      	ldr	r3, [r7, #4]
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	20000c04 	.word	0x20000c04

08005098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a2:	4b51      	ldr	r3, [pc, #324]	; (80051e8 <xTaskIncrementTick+0x150>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 808d 	bne.w	80051c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050ac:	4b4f      	ldr	r3, [pc, #316]	; (80051ec <xTaskIncrementTick+0x154>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050b4:	4a4d      	ldr	r2, [pc, #308]	; (80051ec <xTaskIncrementTick+0x154>)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11f      	bne.n	8005100 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80050c0:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <xTaskIncrementTick+0x158>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <xTaskIncrementTick+0x46>
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	e7fe      	b.n	80050dc <xTaskIncrementTick+0x44>
 80050de:	4b44      	ldr	r3, [pc, #272]	; (80051f0 <xTaskIncrementTick+0x158>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <xTaskIncrementTick+0x15c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a41      	ldr	r2, [pc, #260]	; (80051f0 <xTaskIncrementTick+0x158>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4a41      	ldr	r2, [pc, #260]	; (80051f4 <xTaskIncrementTick+0x15c>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b41      	ldr	r3, [pc, #260]	; (80051f8 <xTaskIncrementTick+0x160>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	4a3f      	ldr	r2, [pc, #252]	; (80051f8 <xTaskIncrementTick+0x160>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	f000 faca 	bl	8005694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005100:	4b3e      	ldr	r3, [pc, #248]	; (80051fc <xTaskIncrementTick+0x164>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d34e      	bcc.n	80051a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <xTaskIncrementTick+0x158>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <xTaskIncrementTick+0x80>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <xTaskIncrementTick+0x82>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <xTaskIncrementTick+0x164>)
 8005120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005124:	601a      	str	r2, [r3, #0]
					break;
 8005126:	e03f      	b.n	80051a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <xTaskIncrementTick+0x158>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d203      	bcs.n	8005148 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005140:	4a2e      	ldr	r2, [pc, #184]	; (80051fc <xTaskIncrementTick+0x164>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6013      	str	r3, [r2, #0]
						break;
 8005146:	e02f      	b.n	80051a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3304      	adds	r3, #4
 800514c:	4618      	mov	r0, r3
 800514e:	f7fe ffc1 	bl	80040d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	3318      	adds	r3, #24
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe ffb8 	bl	80040d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <xTaskIncrementTick+0x168>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <xTaskIncrementTick+0xe0>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a22      	ldr	r2, [pc, #136]	; (8005200 <xTaskIncrementTick+0x168>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <xTaskIncrementTick+0x16c>)
 8005186:	441a      	add	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe ff45 	bl	800401e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <xTaskIncrementTick+0x170>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3b3      	bcc.n	800510a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a6:	e7b0      	b.n	800510a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <xTaskIncrementTick+0x170>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	4915      	ldr	r1, [pc, #84]	; (8005204 <xTaskIncrementTick+0x16c>)
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d907      	bls.n	80051d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e004      	b.n	80051d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <xTaskIncrementTick+0x174>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a0f      	ldr	r2, [pc, #60]	; (800520c <xTaskIncrementTick+0x174>)
 80051ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051d0:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <xTaskIncrementTick+0x178>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051dc:	697b      	ldr	r3, [r7, #20]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000c28 	.word	0x20000c28
 80051ec:	20000c04 	.word	0x20000c04
 80051f0:	20000bb8 	.word	0x20000bb8
 80051f4:	20000bbc 	.word	0x20000bbc
 80051f8:	20000c18 	.word	0x20000c18
 80051fc:	20000c20 	.word	0x20000c20
 8005200:	20000c08 	.word	0x20000c08
 8005204:	20000730 	.word	0x20000730
 8005208:	2000072c 	.word	0x2000072c
 800520c:	20000c10 	.word	0x20000c10
 8005210:	20000c14 	.word	0x20000c14

08005214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <vTaskSwitchContext+0xa4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005222:	4b26      	ldr	r3, [pc, #152]	; (80052bc <vTaskSwitchContext+0xa8>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005228:	e040      	b.n	80052ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <vTaskSwitchContext+0xa8>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005230:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <vTaskSwitchContext+0xac>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e00f      	b.n	8005258 <vTaskSwitchContext+0x44>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <vTaskSwitchContext+0x3e>
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e7fe      	b.n	8005250 <vTaskSwitchContext+0x3c>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b01      	subs	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	491a      	ldr	r1, [pc, #104]	; (80052c4 <vTaskSwitchContext+0xb0>)
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0e5      	beq.n	8005238 <vTaskSwitchContext+0x24>
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <vTaskSwitchContext+0xb0>)
 8005278:	4413      	add	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	605a      	str	r2, [r3, #4]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	3308      	adds	r3, #8
 800528e:	429a      	cmp	r2, r3
 8005290:	d104      	bne.n	800529c <vTaskSwitchContext+0x88>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <vTaskSwitchContext+0xb4>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <vTaskSwitchContext+0xac>)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6013      	str	r3, [r2, #0]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000c28 	.word	0x20000c28
 80052bc:	20000c14 	.word	0x20000c14
 80052c0:	20000c08 	.word	0x20000c08
 80052c4:	20000730 	.word	0x20000730
 80052c8:	2000072c 	.word	0x2000072c

080052cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <vTaskPlaceOnEventList+0x24>
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e7fe      	b.n	80052ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <vTaskPlaceOnEventList+0x44>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3318      	adds	r3, #24
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fe feb3 	bl	8004064 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052fe:	2101      	movs	r1, #1
 8005300:	6838      	ldr	r0, [r7, #0]
 8005302:	f000 fa75 	bl	80057f0 <prvAddCurrentTaskToDelayedList>
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	2000072c 	.word	0x2000072c

08005314 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <vTaskPlaceOnEventListRestricted+0x26>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e7fe      	b.n	8005338 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <vTaskPlaceOnEventListRestricted+0x50>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3318      	adds	r3, #24
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7fe fe6b 	bl	800401e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005352:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f000 fa4a 	bl	80057f0 <prvAddCurrentTaskToDelayedList>
	}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000072c 	.word	0x2000072c

08005368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <xTaskRemoveFromEventList+0x2a>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e7fe      	b.n	8005390 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3318      	adds	r3, #24
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fe9c 	bl	80040d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <xTaskRemoveFromEventList+0xac>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11d      	bne.n	80053e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fe93 	bl	80040d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <xTaskRemoveFromEventList+0xb0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d903      	bls.n	80053c2 <xTaskRemoveFromEventList+0x5a>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a16      	ldr	r2, [pc, #88]	; (8005418 <xTaskRemoveFromEventList+0xb0>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <xTaskRemoveFromEventList+0xb4>)
 80053d0:	441a      	add	r2, r3
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fe fe20 	bl	800401e <vListInsertEnd>
 80053de:	e005      	b.n	80053ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	480e      	ldr	r0, [pc, #56]	; (8005420 <xTaskRemoveFromEventList+0xb8>)
 80053e8:	f7fe fe19 	bl	800401e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <xTaskRemoveFromEventList+0xbc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d905      	bls.n	8005406 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <xTaskRemoveFromEventList+0xc0>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e001      	b.n	800540a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800540a:	697b      	ldr	r3, [r7, #20]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000c28 	.word	0x20000c28
 8005418:	20000c08 	.word	0x20000c08
 800541c:	20000730 	.word	0x20000730
 8005420:	20000bc0 	.word	0x20000bc0
 8005424:	2000072c 	.word	0x2000072c
 8005428:	20000c14 	.word	0x20000c14

0800542c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <vTaskInternalSetTimeOutState+0x24>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <vTaskInternalSetTimeOutState+0x28>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	605a      	str	r2, [r3, #4]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20000c18 	.word	0x20000c18
 8005454:	20000c04 	.word	0x20000c04

08005458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <xTaskCheckForTimeOut+0x24>
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e7fe      	b.n	800547a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <xTaskCheckForTimeOut+0x3e>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e7fe      	b.n	8005494 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005496:	f000 fdf7 	bl	8006088 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <xTaskCheckForTimeOut+0xb8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d102      	bne.n	80054ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	e023      	b.n	8005502 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <xTaskCheckForTimeOut+0xbc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d007      	beq.n	80054d6 <xTaskCheckForTimeOut+0x7e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d302      	bcc.n	80054d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e015      	b.n	8005502 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d20b      	bcs.n	80054f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff ff9d 	bl	800542c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e004      	b.n	8005502 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005502:	f000 fdef 	bl	80060e4 <vPortExitCritical>

	return xReturn;
 8005506:	69fb      	ldr	r3, [r7, #28]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000c04 	.word	0x20000c04
 8005514:	20000c18 	.word	0x20000c18

08005518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <vTaskMissedYield+0x14>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000c14 	.word	0x20000c14

08005530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005538:	f000 f852 	bl	80055e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <prvIdleTask+0x28>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d9f9      	bls.n	8005538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <prvIdleTask+0x2c>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005554:	e7f0      	b.n	8005538 <prvIdleTask+0x8>
 8005556:	bf00      	nop
 8005558:	20000730 	.word	0x20000730
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	e00c      	b.n	8005586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <prvInitialiseTaskLists+0x60>)
 8005578:	4413      	add	r3, r2
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fd24 	bl	8003fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3301      	adds	r3, #1
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b37      	cmp	r3, #55	; 0x37
 800558a:	d9ef      	bls.n	800556c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800558c:	480d      	ldr	r0, [pc, #52]	; (80055c4 <prvInitialiseTaskLists+0x64>)
 800558e:	f7fe fd1b 	bl	8003fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005592:	480d      	ldr	r0, [pc, #52]	; (80055c8 <prvInitialiseTaskLists+0x68>)
 8005594:	f7fe fd18 	bl	8003fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005598:	480c      	ldr	r0, [pc, #48]	; (80055cc <prvInitialiseTaskLists+0x6c>)
 800559a:	f7fe fd15 	bl	8003fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800559e:	480c      	ldr	r0, [pc, #48]	; (80055d0 <prvInitialiseTaskLists+0x70>)
 80055a0:	f7fe fd12 	bl	8003fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055a4:	480b      	ldr	r0, [pc, #44]	; (80055d4 <prvInitialiseTaskLists+0x74>)
 80055a6:	f7fe fd0f 	bl	8003fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <prvInitialiseTaskLists+0x78>)
 80055ac:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <prvInitialiseTaskLists+0x64>)
 80055ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <prvInitialiseTaskLists+0x7c>)
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <prvInitialiseTaskLists+0x68>)
 80055b4:	601a      	str	r2, [r3, #0]
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000730 	.word	0x20000730
 80055c4:	20000b90 	.word	0x20000b90
 80055c8:	20000ba4 	.word	0x20000ba4
 80055cc:	20000bc0 	.word	0x20000bc0
 80055d0:	20000bd4 	.word	0x20000bd4
 80055d4:	20000bec 	.word	0x20000bec
 80055d8:	20000bb8 	.word	0x20000bb8
 80055dc:	20000bbc 	.word	0x20000bbc

080055e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055e6:	e019      	b.n	800561c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055e8:	f000 fd4e 	bl	8006088 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <prvCheckTasksWaitingTermination+0x4c>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fd6b 	bl	80040d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <prvCheckTasksWaitingTermination+0x50>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3b01      	subs	r3, #1
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <prvCheckTasksWaitingTermination+0x50>)
 8005606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <prvCheckTasksWaitingTermination+0x54>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3b01      	subs	r3, #1
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <prvCheckTasksWaitingTermination+0x54>)
 8005610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005612:	f000 fd67 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f80e 	bl	8005638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <prvCheckTasksWaitingTermination+0x54>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e1      	bne.n	80055e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000bd4 	.word	0x20000bd4
 8005630:	20000c00 	.word	0x20000c00
 8005634:	20000be8 	.word	0x20000be8

08005638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fed2 	bl	80063f8 <vPortFree>
				vPortFree( pxTCB );
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fecf 	bl	80063f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800565a:	e017      	b.n	800568c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005662:	2b01      	cmp	r3, #1
 8005664:	d103      	bne.n	800566e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fec6 	bl	80063f8 <vPortFree>
	}
 800566c:	e00e      	b.n	800568c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005674:	2b02      	cmp	r3, #2
 8005676:	d009      	beq.n	800568c <prvDeleteTCB+0x54>
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e7fe      	b.n	800568a <prvDeleteTCB+0x52>
	}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800569a:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <prvResetNextTaskUnblockTime+0x40>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <prvResetNextTaskUnblockTime+0x14>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <prvResetNextTaskUnblockTime+0x16>
 80056a8:	2300      	movs	r3, #0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <prvResetNextTaskUnblockTime+0x44>)
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056b6:	e008      	b.n	80056ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <prvResetNextTaskUnblockTime+0x40>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <prvResetNextTaskUnblockTime+0x44>)
 80056c8:	6013      	str	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	20000bb8 	.word	0x20000bb8
 80056d8:	20000c20 	.word	0x20000c20

080056dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056e2:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <xTaskGetSchedulerState+0x34>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d102      	bne.n	80056f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ea:	2301      	movs	r3, #1
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	e008      	b.n	8005702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <xTaskGetSchedulerState+0x38>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056f8:	2302      	movs	r3, #2
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	e001      	b.n	8005702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005702:	687b      	ldr	r3, [r7, #4]
	}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20000c0c 	.word	0x20000c0c
 8005714:	20000c28 	.word	0x20000c28

08005718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d054      	beq.n	80057d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800572e:	4b2d      	ldr	r3, [pc, #180]	; (80057e4 <xTaskPriorityDisinherit+0xcc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	d009      	beq.n	800574c <xTaskPriorityDisinherit+0x34>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e7fe      	b.n	800574a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <xTaskPriorityDisinherit+0x50>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	e7fe      	b.n	8005766 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	429a      	cmp	r2, r3
 800577c:	d02c      	beq.n	80057d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d128      	bne.n	80057d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	3304      	adds	r3, #4
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe fca2 	bl	80040d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <xTaskPriorityDisinherit+0xd0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d903      	bls.n	80057b8 <xTaskPriorityDisinherit+0xa0>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <xTaskPriorityDisinherit+0xd0>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4a09      	ldr	r2, [pc, #36]	; (80057ec <xTaskPriorityDisinherit+0xd4>)
 80057c6:	441a      	add	r2, r3
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fc25 	bl	800401e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057d8:	697b      	ldr	r3, [r7, #20]
	}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	2000072c 	.word	0x2000072c
 80057e8:	20000c08 	.word	0x20000c08
 80057ec:	20000730 	.word	0x20000730

080057f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057fa:	4b21      	ldr	r3, [pc, #132]	; (8005880 <prvAddCurrentTaskToDelayedList+0x90>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005800:	4b20      	ldr	r3, [pc, #128]	; (8005884 <prvAddCurrentTaskToDelayedList+0x94>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3304      	adds	r3, #4
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fc64 	bl	80040d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d10a      	bne.n	800582a <prvAddCurrentTaskToDelayedList+0x3a>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <prvAddCurrentTaskToDelayedList+0x94>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3304      	adds	r3, #4
 8005820:	4619      	mov	r1, r3
 8005822:	4819      	ldr	r0, [pc, #100]	; (8005888 <prvAddCurrentTaskToDelayedList+0x98>)
 8005824:	f7fe fbfb 	bl	800401e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005828:	e026      	b.n	8005878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <prvAddCurrentTaskToDelayedList+0x94>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	429a      	cmp	r2, r3
 8005840:	d209      	bcs.n	8005856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <prvAddCurrentTaskToDelayedList+0x94>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7fe fc08 	bl	8004064 <vListInsert>
}
 8005854:	e010      	b.n	8005878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005856:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <prvAddCurrentTaskToDelayedList+0x94>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7fe fbfe 	bl	8004064 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d202      	bcs.n	8005878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000c04 	.word	0x20000c04
 8005884:	2000072c 	.word	0x2000072c
 8005888:	20000bec 	.word	0x20000bec
 800588c:	20000bbc 	.word	0x20000bbc
 8005890:	20000bb8 	.word	0x20000bb8
 8005894:	20000c20 	.word	0x20000c20

08005898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058a2:	f000 fac3 	bl	8005e2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <xTimerCreateTimerTask+0x80>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d021      	beq.n	80058f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058b6:	1d3a      	adds	r2, r7, #4
 80058b8:	f107 0108 	add.w	r1, r7, #8
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe fb67 	bl	8003f94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	9202      	str	r2, [sp, #8]
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	2302      	movs	r3, #2
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2300      	movs	r3, #0
 80058d6:	460a      	mov	r2, r1
 80058d8:	4910      	ldr	r1, [pc, #64]	; (800591c <xTimerCreateTimerTask+0x84>)
 80058da:	4811      	ldr	r0, [pc, #68]	; (8005920 <xTimerCreateTimerTask+0x88>)
 80058dc:	f7ff f8f8 	bl	8004ad0 <xTaskCreateStatic>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <xTimerCreateTimerTask+0x8c>)
 80058e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <xTimerCreateTimerTask+0x8c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <xTimerCreateTimerTask+0x74>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	e7fe      	b.n	800590a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800590c:	697b      	ldr	r3, [r7, #20]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000c5c 	.word	0x20000c5c
 800591c:	080066e4 	.word	0x080066e4
 8005920:	08005a41 	.word	0x08005a41
 8005924:	20000c60 	.word	0x20000c60

08005928 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005936:	2300      	movs	r3, #0
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <xTimerGenericCommand+0x2c>
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	623b      	str	r3, [r7, #32]
 8005952:	e7fe      	b.n	8005952 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <xTimerGenericCommand+0x94>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02a      	beq.n	80059b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b05      	cmp	r3, #5
 800596c:	dc18      	bgt.n	80059a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800596e:	f7ff feb5 	bl	80056dc <xTaskGetSchedulerState>
 8005972:	4603      	mov	r3, r0
 8005974:	2b02      	cmp	r3, #2
 8005976:	d109      	bne.n	800598c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005978:	4b10      	ldr	r3, [pc, #64]	; (80059bc <xTimerGenericCommand+0x94>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	f107 0110 	add.w	r1, r7, #16
 8005980:	2300      	movs	r3, #0
 8005982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005984:	f7fe fcce 	bl	8004324 <xQueueGenericSend>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24
 800598a:	e012      	b.n	80059b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <xTimerGenericCommand+0x94>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	f107 0110 	add.w	r1, r7, #16
 8005994:	2300      	movs	r3, #0
 8005996:	2200      	movs	r2, #0
 8005998:	f7fe fcc4 	bl	8004324 <xQueueGenericSend>
 800599c:	6278      	str	r0, [r7, #36]	; 0x24
 800599e:	e008      	b.n	80059b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <xTimerGenericCommand+0x94>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	f107 0110 	add.w	r1, r7, #16
 80059a8:	2300      	movs	r3, #0
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	f7fe fdb4 	bl	8004518 <xQueueGenericSendFromISR>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000c5c 	.word	0x20000c5c

080059c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059ca:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <prvProcessExpiredTimer+0x7c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fe fb7b 	bl	80040d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d121      	bne.n	8005a2a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	18d1      	adds	r1, r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	6978      	ldr	r0, [r7, #20]
 80059f4:	f000 f8c8 	bl	8005b88 <prvInsertTimerInActiveList>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d015      	beq.n	8005a2a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	2100      	movs	r1, #0
 8005a08:	6978      	ldr	r0, [r7, #20]
 8005a0a:	f7ff ff8d 	bl	8005928 <xTimerGenericCommand>
 8005a0e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <prvProcessExpiredTimer+0x6a>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e7fe      	b.n	8005a28 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	6978      	ldr	r0, [r7, #20]
 8005a30:	4798      	blx	r3
}
 8005a32:	bf00      	nop
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000c54 	.word	0x20000c54

08005a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f857 	bl	8005b00 <prvGetNextExpireTime>
 8005a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f803 	bl	8005a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a5e:	f000 f8d5 	bl	8005c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a62:	e7f1      	b.n	8005a48 <prvTimerTask+0x8>

08005a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a6e:	f7ff fa5b 	bl	8004f28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a72:	f107 0308 	add.w	r3, r7, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f866 	bl	8005b48 <prvSampleTimeNow>
 8005a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d130      	bne.n	8005ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <prvProcessTimerOrBlockTask+0x3c>
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d806      	bhi.n	8005aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a92:	f7ff fa57 	bl	8004f44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ff91 	bl	80059c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a9e:	e024      	b.n	8005aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <prvProcessTimerOrBlockTask+0x90>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <prvProcessTimerOrBlockTask+0x94>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fe ffcf 	bl	8004a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f7ff fa3b 	bl	8004f44 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <prvProcessTimerOrBlockTask+0x98>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
}
 8005ae4:	e001      	b.n	8005aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ae6:	f7ff fa2d 	bl	8004f44 <xTaskResumeAll>
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000c58 	.word	0x20000c58
 8005af8:	20000c5c 	.word	0x20000c5c
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <prvGetNextExpireTime+0x44>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b26:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <prvGetNextExpireTime+0x44>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e001      	b.n	8005b36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000c54 	.word	0x20000c54

08005b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b50:	f7ff fa94 	bl	800507c <xTaskGetTickCount>
 8005b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvSampleTimeNow+0x3c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d205      	bcs.n	8005b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b60:	f000 f904 	bl	8005d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e002      	b.n	8005b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <prvSampleTimeNow+0x3c>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b78:	68fb      	ldr	r3, [r7, #12]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000c64 	.word	0x20000c64

08005b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d812      	bhi.n	8005bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e01b      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <prvInsertTimerInActiveList+0x7c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7fe fa49 	bl	8004064 <vListInsert>
 8005bd2:	e012      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d206      	bcs.n	8005bea <prvInsertTimerInActiveList+0x62>
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e007      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <prvInsertTimerInActiveList+0x80>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fe fa35 	bl	8004064 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bfa:	697b      	ldr	r3, [r7, #20]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000c58 	.word	0x20000c58
 8005c08:	20000c54 	.word	0x20000c54

08005c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c12:	e099      	b.n	8005d48 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da17      	bge.n	8005c4a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <prvProcessReceivedCommands+0x2e>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	e7fe      	b.n	8005c38 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c40:	6850      	ldr	r0, [r2, #4]
 8005c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db7a      	blt.n	8005d46 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fa37 	bl	80040d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c66:	463b      	mov	r3, r7
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ff6d 	bl	8005b48 <prvSampleTimeNow>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	d868      	bhi.n	8005d48 <prvProcessReceivedCommands+0x13c>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <prvProcessReceivedCommands+0x70>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005ca5 	.word	0x08005ca5
 8005c88:	08005d49 	.word	0x08005d49
 8005c8c:	08005cff 	.word	0x08005cff
 8005c90:	08005d35 	.word	0x08005d35
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005ca5 	.word	0x08005ca5
 8005c9c:	08005d49 	.word	0x08005d49
 8005ca0:	08005cff 	.word	0x08005cff
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	18d1      	adds	r1, r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cb2:	f7ff ff69 	bl	8005b88 <prvInsertTimerInActiveList>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d045      	beq.n	8005d48 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d13d      	bne.n	8005d48 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cde:	f7ff fe23 	bl	8005928 <xTimerGenericCommand>
 8005ce2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d12e      	bne.n	8005d48 <prvProcessReceivedCommands+0x13c>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e7fe      	b.n	8005cfc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <prvProcessReceivedCommands+0x114>
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e7fe      	b.n	8005d1e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	18d1      	adds	r1, r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2e:	f7ff ff2b 	bl	8005b88 <prvInsertTimerInActiveList>
					break;
 8005d32:	e009      	b.n	8005d48 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f000 fb5a 	bl	80063f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d44:	e000      	b.n	8005d48 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d46:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <prvProcessReceivedCommands+0x15c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	1d39      	adds	r1, r7, #4
 8005d4e:	2200      	movs	r2, #0
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fc75 	bl	8004640 <xQueueReceive>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f47f af5b 	bne.w	8005c14 <prvProcessReceivedCommands+0x8>
	}
}
 8005d5e:	bf00      	nop
 8005d60:	3730      	adds	r7, #48	; 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000c5c 	.word	0x20000c5c

08005d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d72:	e044      	b.n	8005dfe <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d74:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d7e:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f9a1 	bl	80040d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d12d      	bne.n	8005dfe <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d90e      	bls.n	8005dd2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dc0:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe f94a 	bl	8004064 <vListInsert>
 8005dd0:	e015      	b.n	8005dfe <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fda3 	bl	8005928 <xTimerGenericCommand>
 8005de2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <prvSwitchTimerLists+0x92>
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	e7fe      	b.n	8005dfc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b5      	bne.n	8005d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <prvSwitchTimerLists+0xbc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <prvSwitchTimerLists+0xb8>)
 8005e14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e16:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <prvSwitchTimerLists+0xbc>)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6013      	str	r3, [r2, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000c54 	.word	0x20000c54
 8005e28:	20000c58 	.word	0x20000c58

08005e2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e32:	f000 f929 	bl	8006088 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d120      	bne.n	8005e80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e3e:	4814      	ldr	r0, [pc, #80]	; (8005e90 <prvCheckForValidListAndQueue+0x64>)
 8005e40:	f7fe f8c2 	bl	8003fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e44:	4813      	ldr	r0, [pc, #76]	; (8005e94 <prvCheckForValidListAndQueue+0x68>)
 8005e46:	f7fe f8bf 	bl	8003fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <prvCheckForValidListAndQueue+0x6c>)
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <prvCheckForValidListAndQueue+0x64>)
 8005e4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <prvCheckForValidListAndQueue+0x70>)
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <prvCheckForValidListAndQueue+0x68>)
 8005e54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <prvCheckForValidListAndQueue+0x74>)
 8005e5c:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <prvCheckForValidListAndQueue+0x78>)
 8005e5e:	2110      	movs	r1, #16
 8005e60:	200a      	movs	r0, #10
 8005e62:	f7fe f9c9 	bl	80041f8 <xQueueGenericCreateStatic>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <prvCheckForValidListAndQueue+0x60>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	490b      	ldr	r1, [pc, #44]	; (8005ea8 <prvCheckForValidListAndQueue+0x7c>)
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fdcc 	bl	8004a18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f000 f930 	bl	80060e4 <vPortExitCritical>
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000c5c 	.word	0x20000c5c
 8005e90:	20000c2c 	.word	0x20000c2c
 8005e94:	20000c40 	.word	0x20000c40
 8005e98:	20000c54 	.word	0x20000c54
 8005e9c:	20000c58 	.word	0x20000c58
 8005ea0:	20000d08 	.word	0x20000d08
 8005ea4:	20000c68 	.word	0x20000c68
 8005ea8:	080066ec 	.word	0x080066ec

08005eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3b04      	subs	r3, #4
 8005ebc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3b04      	subs	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f023 0201 	bic.w	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3b04      	subs	r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <pxPortInitialiseStack+0x54>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b14      	subs	r3, #20
 8005ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b20      	subs	r3, #32
 8005ef2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr
 8005f00:	08005f05 	.word	0x08005f05

08005f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <prvTaskExitError+0x4c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f16:	d009      	beq.n	8005f2c <prvTaskExitError+0x28>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e7fe      	b.n	8005f2a <prvTaskExitError+0x26>
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f3e:	bf00      	nop
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0fc      	beq.n	8005f40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	20000034 	.word	0x20000034
	...

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f7e:	4770      	bx	lr

08005f80 <pxCurrentTCBConst2>:
 8005f80:	2000072c 	.word	0x2000072c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f88:	4806      	ldr	r0, [pc, #24]	; (8005fa4 <prvPortStartFirstTask+0x1c>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	b662      	cpsie	i
 8005f94:	b661      	cpsie	f
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	df00      	svc	0
 8005fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fa2:	bf00      	nop
 8005fa4:	e000ed08 	.word	0xe000ed08

08005fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <xPortStartScheduler+0xcc>)
 8005fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <xPortStartScheduler+0xd0>)
 8005fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fd6:	4b29      	ldr	r3, [pc, #164]	; (800607c <xPortStartScheduler+0xd4>)
 8005fd8:	2207      	movs	r2, #7
 8005fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fdc:	e009      	b.n	8005ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <xPortStartScheduler+0xd4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	4a25      	ldr	r2, [pc, #148]	; (800607c <xPortStartScheduler+0xd4>)
 8005fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b80      	cmp	r3, #128	; 0x80
 8005ffc:	d0ef      	beq.n	8005fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ffe:	4b1f      	ldr	r3, [pc, #124]	; (800607c <xPortStartScheduler+0xd4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1c3 0307 	rsb	r3, r3, #7
 8006006:	2b04      	cmp	r3, #4
 8006008:	d009      	beq.n	800601e <xPortStartScheduler+0x76>
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	e7fe      	b.n	800601c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800601e:	4b17      	ldr	r3, [pc, #92]	; (800607c <xPortStartScheduler+0xd4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4a15      	ldr	r2, [pc, #84]	; (800607c <xPortStartScheduler+0xd4>)
 8006026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <xPortStartScheduler+0xd4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006030:	4a12      	ldr	r2, [pc, #72]	; (800607c <xPortStartScheduler+0xd4>)
 8006032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xPortStartScheduler+0xd8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xPortStartScheduler+0xd8>)
 8006042:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006048:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <xPortStartScheduler+0xd8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <xPortStartScheduler+0xd8>)
 800604e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006054:	f000 f8b0 	bl	80061b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <xPortStartScheduler+0xdc>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800605e:	f7ff ff93 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006062:	f7ff f8d7 	bl	8005214 <vTaskSwitchContext>
	prvTaskExitError();
 8006066:	f7ff ff4d 	bl	8005f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	e000e400 	.word	0xe000e400
 8006078:	20000d58 	.word	0x20000d58
 800607c:	20000d5c 	.word	0x20000d5c
 8006080:	e000ed20 	.word	0xe000ed20
 8006084:	20000034 	.word	0x20000034

08006088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <vPortEnterCritical+0x54>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vPortEnterCritical+0x54>)
 80060a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <vPortEnterCritical+0x54>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d10e      	bne.n	80060d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortEnterCritical+0x58>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <vPortEnterCritical+0x48>
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	e7fe      	b.n	80060ce <vPortEnterCritical+0x46>
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000034 	.word	0x20000034
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <vPortExitCritical+0x48>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <vPortExitCritical+0x22>
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	e7fe      	b.n	8006104 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <vPortExitCritical+0x48>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3b01      	subs	r3, #1
 800610c:	4a07      	ldr	r2, [pc, #28]	; (800612c <vPortExitCritical+0x48>)
 800610e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <vPortExitCritical+0x48>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d104      	bne.n	8006122 <vPortExitCritical+0x3e>
 8006118:	2300      	movs	r3, #0
 800611a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	20000034 	.word	0x20000034

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006140:	6010      	str	r0, [r2, #0]
 8006142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800614a:	f380 8811 	msr	BASEPRI, r0
 800614e:	f7ff f861 	bl	8005214 <vTaskSwitchContext>
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	6808      	ldr	r0, [r1, #0]
 8006162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006166:	f380 8809 	msr	PSP, r0
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	4770      	bx	lr

08006170 <pxCurrentTCBConst>:
 8006170:	2000072c 	.word	0x2000072c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006190:	f7fe ff82 	bl	8005098 <xTaskIncrementTick>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <SysTick_Handler+0x3c>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <vPortSetupTimerInterrupt+0x30>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <vPortSetupTimerInterrupt+0x34>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <vPortSetupTimerInterrupt+0x38>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <vPortSetupTimerInterrupt+0x3c>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <vPortSetupTimerInterrupt+0x40>)
 80061d6:	3b01      	subs	r3, #1
 80061d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <vPortSetupTimerInterrupt+0x30>)
 80061dc:	2207      	movs	r2, #7
 80061de:	601a      	str	r2, [r3, #0]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr
 80061e8:	e000e010 	.word	0xe000e010
 80061ec:	e000e018 	.word	0xe000e018
 80061f0:	20000028 	.word	0x20000028
 80061f4:	10624dd3 	.word	0x10624dd3
 80061f8:	e000e014 	.word	0xe000e014

080061fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006202:	f3ef 8305 	mrs	r3, IPSR
 8006206:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b0f      	cmp	r3, #15
 800620c:	d913      	bls.n	8006236 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <vPortValidateInterruptPriority+0x68>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <vPortValidateInterruptPriority+0x6c>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	7afa      	ldrb	r2, [r7, #11]
 800621e:	429a      	cmp	r2, r3
 8006220:	d209      	bcs.n	8006236 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	e7fe      	b.n	8006234 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <vPortValidateInterruptPriority+0x70>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <vPortValidateInterruptPriority+0x74>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d909      	bls.n	800625a <vPortValidateInterruptPriority+0x5e>
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	e7fe      	b.n	8006258 <vPortValidateInterruptPriority+0x5c>
	}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	e000e3f0 	.word	0xe000e3f0
 8006268:	20000d58 	.word	0x20000d58
 800626c:	e000ed0c 	.word	0xe000ed0c
 8006270:	20000d5c 	.word	0x20000d5c

08006274 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006280:	f7fe fe52 	bl	8004f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006284:	4b57      	ldr	r3, [pc, #348]	; (80063e4 <pvPortMalloc+0x170>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800628c:	f000 f90c 	bl	80064a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006290:	4b55      	ldr	r3, [pc, #340]	; (80063e8 <pvPortMalloc+0x174>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 808c 	bne.w	80063b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01c      	beq.n	80062de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062a4:	2208      	movs	r2, #8
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d013      	beq.n	80062de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f023 0307 	bic.w	r3, r3, #7
 80062bc:	3308      	adds	r3, #8
 80062be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <pvPortMalloc+0x6a>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e7fe      	b.n	80062dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d068      	beq.n	80063b6 <pvPortMalloc+0x142>
 80062e4:	4b41      	ldr	r3, [pc, #260]	; (80063ec <pvPortMalloc+0x178>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d863      	bhi.n	80063b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ee:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <pvPortMalloc+0x17c>)
 80062f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062f2:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <pvPortMalloc+0x17c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062f8:	e004      	b.n	8006304 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d903      	bls.n	8006316 <pvPortMalloc+0xa2>
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f1      	bne.n	80062fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006316:	4b33      	ldr	r3, [pc, #204]	; (80063e4 <pvPortMalloc+0x170>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	429a      	cmp	r2, r3
 800631e:	d04a      	beq.n	80063b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2208      	movs	r2, #8
 8006326:	4413      	add	r3, r2
 8006328:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	2308      	movs	r3, #8
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	429a      	cmp	r2, r3
 8006340:	d91e      	bls.n	8006380 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4413      	add	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	2b00      	cmp	r3, #0
 8006352:	d009      	beq.n	8006368 <pvPortMalloc+0xf4>
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	e7fe      	b.n	8006366 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800637a:	69b8      	ldr	r0, [r7, #24]
 800637c:	f000 f8f6 	bl	800656c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006380:	4b1a      	ldr	r3, [pc, #104]	; (80063ec <pvPortMalloc+0x178>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	4a18      	ldr	r2, [pc, #96]	; (80063ec <pvPortMalloc+0x178>)
 800638c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800638e:	4b17      	ldr	r3, [pc, #92]	; (80063ec <pvPortMalloc+0x178>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <pvPortMalloc+0x180>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d203      	bcs.n	80063a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <pvPortMalloc+0x178>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <pvPortMalloc+0x180>)
 80063a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <pvPortMalloc+0x174>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063b6:	f7fe fdc5 	bl	8004f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <pvPortMalloc+0x164>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	e7fe      	b.n	80063d6 <pvPortMalloc+0x162>
	return pvReturn;
 80063d8:	69fb      	ldr	r3, [r7, #28]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20001968 	.word	0x20001968
 80063e8:	20001974 	.word	0x20001974
 80063ec:	2000196c 	.word	0x2000196c
 80063f0:	20001960 	.word	0x20001960
 80063f4:	20001970 	.word	0x20001970

080063f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d046      	beq.n	8006498 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800640a:	2308      	movs	r3, #8
 800640c:	425b      	negs	r3, r3
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <vPortFree+0xa8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <vPortFree+0x42>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e7fe      	b.n	8006438 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <vPortFree+0x5e>
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	e7fe      	b.n	8006454 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <vPortFree+0xa8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d019      	beq.n	8006498 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d115      	bne.n	8006498 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortFree+0xa8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800647c:	f7fe fd54 	bl	8004f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <vPortFree+0xac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4413      	add	r3, r2
 800648a:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <vPortFree+0xac>)
 800648c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800648e:	6938      	ldr	r0, [r7, #16]
 8006490:	f000 f86c 	bl	800656c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006494:	f7fe fd56 	bl	8004f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006498:	bf00      	nop
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20001974 	.word	0x20001974
 80064a4:	2000196c 	.word	0x2000196c

080064a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80064b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <prvHeapInit+0xac>)
 80064b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00c      	beq.n	80064dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3307      	adds	r3, #7
 80064c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <prvHeapInit+0xac>)
 80064d8:	4413      	add	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064e0:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <prvHeapInit+0xb0>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <prvHeapInit+0xb0>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064f4:	2208      	movs	r2, #8
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <prvHeapInit+0xb4>)
 8006508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <prvHeapInit+0xb4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <prvHeapInit+0xb4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <prvHeapInit+0xb4>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <prvHeapInit+0xb8>)
 8006536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	4a09      	ldr	r2, [pc, #36]	; (8006564 <prvHeapInit+0xbc>)
 800653e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006540:	4b09      	ldr	r3, [pc, #36]	; (8006568 <prvHeapInit+0xc0>)
 8006542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006546:	601a      	str	r2, [r3, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20000d60 	.word	0x20000d60
 8006558:	20001960 	.word	0x20001960
 800655c:	20001968 	.word	0x20001968
 8006560:	20001970 	.word	0x20001970
 8006564:	2000196c 	.word	0x2000196c
 8006568:	20001974 	.word	0x20001974

0800656c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006574:	4b27      	ldr	r3, [pc, #156]	; (8006614 <prvInsertBlockIntoFreeList+0xa8>)
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e002      	b.n	8006580 <prvInsertBlockIntoFreeList+0x14>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d8f7      	bhi.n	800657a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	4413      	add	r3, r2
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d108      	bne.n	80065ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	441a      	add	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	441a      	add	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d118      	bne.n	80065f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b14      	ldr	r3, [pc, #80]	; (8006618 <prvInsertBlockIntoFreeList+0xac>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d00d      	beq.n	80065ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	441a      	add	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	e008      	b.n	80065fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <prvInsertBlockIntoFreeList+0xac>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e003      	b.n	80065fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d002      	beq.n	800660a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr
 8006614:	20001960 	.word	0x20001960
 8006618:	20001968 	.word	0x20001968

0800661c <__libc_init_array>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	2500      	movs	r5, #0
 8006620:	4e0c      	ldr	r6, [pc, #48]	; (8006654 <__libc_init_array+0x38>)
 8006622:	4c0d      	ldr	r4, [pc, #52]	; (8006658 <__libc_init_array+0x3c>)
 8006624:	1ba4      	subs	r4, r4, r6
 8006626:	10a4      	asrs	r4, r4, #2
 8006628:	42a5      	cmp	r5, r4
 800662a:	d109      	bne.n	8006640 <__libc_init_array+0x24>
 800662c:	f000 f82e 	bl	800668c <_init>
 8006630:	2500      	movs	r5, #0
 8006632:	4e0a      	ldr	r6, [pc, #40]	; (800665c <__libc_init_array+0x40>)
 8006634:	4c0a      	ldr	r4, [pc, #40]	; (8006660 <__libc_init_array+0x44>)
 8006636:	1ba4      	subs	r4, r4, r6
 8006638:	10a4      	asrs	r4, r4, #2
 800663a:	42a5      	cmp	r5, r4
 800663c:	d105      	bne.n	800664a <__libc_init_array+0x2e>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006644:	4798      	blx	r3
 8006646:	3501      	adds	r5, #1
 8006648:	e7ee      	b.n	8006628 <__libc_init_array+0xc>
 800664a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800664e:	4798      	blx	r3
 8006650:	3501      	adds	r5, #1
 8006652:	e7f2      	b.n	800663a <__libc_init_array+0x1e>
 8006654:	08006778 	.word	0x08006778
 8006658:	08006778 	.word	0x08006778
 800665c:	08006778 	.word	0x08006778
 8006660:	0800677c 	.word	0x0800677c

08006664 <memcpy>:
 8006664:	b510      	push	{r4, lr}
 8006666:	1e43      	subs	r3, r0, #1
 8006668:	440a      	add	r2, r1
 800666a:	4291      	cmp	r1, r2
 800666c:	d100      	bne.n	8006670 <memcpy+0xc>
 800666e:	bd10      	pop	{r4, pc}
 8006670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006678:	e7f7      	b.n	800666a <memcpy+0x6>

0800667a <memset>:
 800667a:	4603      	mov	r3, r0
 800667c:	4402      	add	r2, r0
 800667e:	4293      	cmp	r3, r2
 8006680:	d100      	bne.n	8006684 <memset+0xa>
 8006682:	4770      	bx	lr
 8006684:	f803 1b01 	strb.w	r1, [r3], #1
 8006688:	e7f9      	b.n	800667e <memset+0x4>
	...

0800668c <_init>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr

08006698 <_fini>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr
